<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="classpybind11_1_1object" kind="class" language="C++" prot="public">
    <compoundname>pybind11::object</compoundname>
    <basecompoundref refid="classpybind11_1_1handle" prot="public" virt="non-virtual">pybind11::handle</basecompoundref>
    <derivedcompoundref refid="classpybind11_1_1bool__" prot="public" virt="non-virtual">pybind11::bool_</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1buffer" prot="public" virt="non-virtual">pybind11::buffer</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1bytes" prot="public" virt="non-virtual">pybind11::bytes</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1capsule" prot="public" virt="non-virtual">pybind11::capsule</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1detail_1_1generic__type" prot="public" virt="non-virtual">pybind11::detail::generic_type</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1dict" prot="public" virt="non-virtual">pybind11::dict</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1dtype" prot="public" virt="non-virtual">pybind11::dtype</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1exception" prot="public" virt="non-virtual">pybind11::exception&lt; type &gt;</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1float__" prot="public" virt="non-virtual">pybind11::float_</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1function" prot="public" virt="non-virtual">pybind11::function</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1int__" prot="public" virt="non-virtual">pybind11::int_</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1iterable" prot="public" virt="non-virtual">pybind11::iterable</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1iterator" prot="public" virt="non-virtual">pybind11::iterator</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1list" prot="public" virt="non-virtual">pybind11::list</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1memoryview" prot="public" virt="non-virtual">pybind11::memoryview</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1module" prot="public" virt="non-virtual">pybind11::module</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1none" prot="public" virt="non-virtual">pybind11::none</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1sequence" prot="public" virt="non-virtual">pybind11::sequence</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1set" prot="public" virt="non-virtual">pybind11::set</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1slice" prot="public" virt="non-virtual">pybind11::slice</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1str" prot="public" virt="non-virtual">pybind11::str</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1tuple" prot="public" virt="non-virtual">pybind11::tuple</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1weakref" prot="public" virt="non-virtual">pybind11::weakref</derivedcompoundref>
    <includes refid="pytypes_8h" local="no">pytypes.h</includes>
    <innerclass refid="structpybind11_1_1object_1_1borrowed__t" prot="protected">pybind11::object::borrowed_t</innerclass>
    <innerclass refid="structpybind11_1_1object_1_1stolen__t" prot="protected">pybind11::object::stolen_t</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classpybind11_1_1object_1a2cf33587d993fb836e9fcc7a9f3e5dcb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pybind11::object::is_borrowed</definition>
        <argsstring></argsstring>
        <name>is_borrowed</name>
        <bitfield> handle(h) { if (is_borrowed) inc_ref()</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="202" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpybind11_1_1object_1a05110f45918e73ad56f66cc713fd1d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::object</definition>
        <argsstring>()=default</argsstring>
        <name>object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="200" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1af0de297f50a8c4db0b6712f4b990f8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::__attribute__</definition>
        <argsstring>((deprecated(&quot;Use reinterpret_borrow&lt;object&gt;() or reinterpret_steal&lt;object&gt;()&quot;))) object(handle h</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(deprecated(&quot;Use <ref refid="classpybind11_1_1object_1ac1ea1a4cbcf197d7c8096037633720d7" kindref="member">reinterpret_borrow</ref>&lt;<ref refid="classpybind11_1_1object" kindref="compound">object</ref>&gt;() or <ref refid="classpybind11_1_1object_1ae1de2ab5a755c10582ac1e46071de5c5" kindref="member">reinterpret_steal</ref>&lt;<ref refid="classpybind11_1_1object" kindref="compound">object</ref>&gt;()&quot;))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="201" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1acd1e392727b7870b82404c6077fd7da3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::object</definition>
        <argsstring>(const object &amp;o)</argsstring>
        <name>object</name>
        <param>
          <type>const <ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor; always increases the reference count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="204" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a8b3e38884a2467c88b61ad8b0f7b0469" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::object</definition>
        <argsstring>(object &amp;&amp;other) noexcept</argsstring>
        <name>object</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor; steals the object from <computeroutput>other</computeroutput> and preserves its reference count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="206" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a18a870a490c34d5a7775e90dc799d2f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::~object</definition>
        <argsstring>()</argsstring>
        <name>~object</name>
        <briefdescription>
<para>Destructor; automatically calls <computeroutput><ref refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" kindref="member">handle::dec_ref()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="208" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>handle pybind11::object::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Resets the internal pointer to <computeroutput>nullptr</computeroutput> without without decreasing the object&apos;s reference count. The function returns a raw handle to the original Python object. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="215" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1aa02e0b7ba3182ecea17911e5fdc631dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>object&amp; pybind11::object::operator=</definition>
        <argsstring>(const object &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="221" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a1f45b12a97cf4b93915fd9145747cd9b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;</type>
        <definition>object&amp; pybind11::object::operator=</definition>
        <argsstring>(object &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="228" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="228" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::object::cast</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="239" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a1d5a34290705e5124f352346563bf83d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::object::cast</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="241" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1af43aa8511d39ad9fa3aae093962ca471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::object</definition>
        <argsstring>(handle h, borrowed_t)</argsstring>
        <name>object</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="253" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a03cf406a7bee2cde9264d89f5c321e95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::object::object</definition>
        <argsstring>(handle h, stolen_t)</argsstring>
        <name>object</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="254" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::object::cast</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1617" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1617" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a1d5a34290705e5124f352346563bf83d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::object::cast</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1618" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1618" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a764785e72f3f451c198c9d09c9ff0fe2" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::object::cast</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1619" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1619" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1object_1a8bc02531431d381c27343568a60d641e" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::object::cast</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1620" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1620" bodyend="1620"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classpybind11_1_1object_1ac1ea1a4cbcf197d7c8096037633720d7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T reinterpret_borrow</definition>
        <argsstring>(handle)</argsstring>
        <name>reinterpret_borrow</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <defname>h</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Declare that a <computeroutput>handle</computeroutput> or <computeroutput>PyObject *</computeroutput> is a certain type and borrow the reference. The target type <computeroutput>T</computeroutput> must be <computeroutput>object</computeroutput> or one of its derived classes. The function doesn&apos;t do any conversions or checks. It&apos;s up to the user to make sure that the target type is correct.</para>
<para>.. code-block:: cpp <verbatim>PyObject *p = PyList_GetItem(obj, index);
py::object o = reinterpret_borrow&lt;py::object&gt;(p);
</verbatim> or py::tuple t = reinterpret_borrow&lt;py::tuple&gt;(p); // &lt;<ndash/> <computeroutput>p</computeroutput> must be already be a <computeroutput>tuple</computeroutput> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="248" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="friend" id="classpybind11_1_1object_1ae1de2ab5a755c10582ac1e46071de5c5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T reinterpret_steal</definition>
        <argsstring>(handle)</argsstring>
        <name>reinterpret_steal</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <defname>h</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Like <computeroutput>reinterpret_borrow</computeroutput>, but steals the reference.</para>
<para>.. code-block:: cpp</para>
<para>PyObject *p = PyObject_Str(obj); py::str s = reinterpret_steal&lt;py::str&gt;(p); // &lt;<ndash/> <computeroutput>p</computeroutput> must be already be a <computeroutput>str</computeroutput> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="249" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="280" bodyend="280"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>\rst Holds a reference to a Python object (with reference counting)</para>
<para>Like <computeroutput>handle</computeroutput>, the <computeroutput>object</computeroutput> class is a thin wrapper around an arbitrary Python object (i.e. a <computeroutput>PyObject *</computeroutput> in Python&apos;s C API). In contrast to <computeroutput>handle</computeroutput>, it optionally increases the object&apos;s reference count upon construction, and it always* decreases the reference count when the <computeroutput>object</computeroutput> instance goes out of scope and is destructed. When using <computeroutput>object</computeroutput> instances consistently, it is much easier to get reference counting right at the first attempt. \endrst </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="29">
        <label>pybind11::none</label>
        <link refid="classpybind11_1_1none"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>pybind11::detail::object_api&lt; handle &gt;</label>
        <link refid="classpybind11_1_1detail_1_1object__api"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>pybind11::dict</label>
        <link refid="classpybind11_1_1dict"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>pybind11::buffer</label>
        <link refid="classpybind11_1_1buffer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>pybind11::float_</label>
        <link refid="classpybind11_1_1float__"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>pybind11::detail::generic_type</label>
        <link refid="classpybind11_1_1detail_1_1generic__type"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>pybind11::args</label>
        <link refid="classpybind11_1_1args"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>pybind11::weakref</label>
        <link refid="classpybind11_1_1weakref"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>pybind11::array_t&lt; Scalar, array::forcecast|((props::row_major ? props::inner_stride :props::outer_stride)==1 ? array::c_style :(props::row_major ? props::outer_stride :props::inner_stride)==1 ? array::f_style :0)&gt;</label>
        <link refid="classpybind11_1_1array__t"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>pybind11::set</label>
        <link refid="classpybind11_1_1set"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>pybind11::function</label>
        <link refid="classpybind11_1_1function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>pybind11::sequence</label>
        <link refid="classpybind11_1_1sequence"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>pybind11::bool_</label>
        <link refid="classpybind11_1_1bool__"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>pybind11::int_</label>
        <link refid="classpybind11_1_1int__"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>pybind11::bytes</label>
        <link refid="classpybind11_1_1bytes"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>pybind11::slice</label>
        <link refid="classpybind11_1_1slice"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>pybind11::iterable</label>
        <link refid="classpybind11_1_1iterable"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>pybind11::array</label>
        <link refid="classpybind11_1_1array"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>pybind11::enum_&lt; Type &gt;</label>
        <link refid="classpybind11_1_1enum__"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>pybind11::array_t&lt; T, ExtraFlags &gt;</label>
        <link refid="classpybind11_1_1array__t"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>pybind11::str</label>
        <link refid="classpybind11_1_1str"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>pybind11::exception&lt; type &gt;</label>
        <link refid="classpybind11_1_1exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>pybind11::detail::pyobject_tag</label>
        <link refid="classpybind11_1_1detail_1_1pyobject__tag"/>
      </node>
      <node id="34">
        <label>pybind11::tuple</label>
        <link refid="classpybind11_1_1tuple"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>pybind11::iterator</label>
        <link refid="classpybind11_1_1iterator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>pybind11::object</label>
        <link refid="classpybind11_1_1object"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>pybind11::dtype</label>
        <link refid="classpybind11_1_1dtype"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>pybind11::class_&lt; type_, options &gt;</label>
        <link refid="classpybind11_1_1class__"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>pybind11::memoryview</label>
        <link refid="classpybind11_1_1memoryview"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>pybind11::kwargs</label>
        <link refid="classpybind11_1_1kwargs"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>pybind11::capsule</label>
        <link refid="classpybind11_1_1capsule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>pybind11::list</label>
        <link refid="classpybind11_1_1list"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>pybind11::handle</label>
        <link refid="classpybind11_1_1handle"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>pybind11::cpp_function</label>
        <link refid="classpybind11_1_1cpp__function"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>pybind11::module</label>
        <link refid="classpybind11_1_1module"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>pybind11::class_&lt; Type &gt;</label>
        <link refid="classpybind11_1_1class__"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>pybind11::detail::object_api&lt; handle &gt;</label>
        <link refid="classpybind11_1_1detail_1_1object__api"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>pybind11::detail::pyobject_tag</label>
        <link refid="classpybind11_1_1detail_1_1pyobject__tag"/>
      </node>
      <node id="1">
        <label>pybind11::object</label>
        <link refid="classpybind11_1_1object"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>pybind11::handle</label>
        <link refid="classpybind11_1_1handle"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="198" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="198" bodyend="255"/>
    <listofallmembers>
      <member refid="classpybind11_1_1object_1af0de297f50a8c4db0b6712f4b990f8aa" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>__attribute__</name></member>
      <member refid="classpybind11_1_1handle_1aae1e3eb62dbe66c97c161da1dc408abd" prot="public" virt="non-virtual" ambiguityscope="pybind11::handle::"><scope>pybind11::object</scope><name>__attribute__</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a9e40315e3b89ae491c4ff308048550ba" prot="public" virt="non-virtual" ambiguityscope="object_api&lt; handle &gt;::"><scope>pybind11::object</scope><name>__attribute__</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>attr</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a1ed2f42e544637c80b31c05c88cb916e" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>attr</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a186bda3e95a07f59f9449ce0d050ae5e" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>begin</name></member>
      <member refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1object_1a1d5a34290705e5124f352346563bf83d" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1object_1a1d5a34290705e5124f352346563bf83d" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1object_1a764785e72f3f451c198c9d09c9ff0fe2" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1object_1a8bc02531431d381c27343568a60d641e" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1handle_1a010389458d06cdacb08f1e0e62f66dfc" prot="public" virt="non-virtual" ambiguityscope="pybind11::handle::"><scope>pybind11::object</scope><name>cast</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>contains</name></member>
      <member refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>dec_ref</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a011483f62a9bd3c0fb60bfc7749fc28f" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>end</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>get_type</name></member>
      <member refid="classpybind11_1_1handle_1a4ba87579a3fba33e8e35e7a7884fe998" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>handle</name></member>
      <member refid="classpybind11_1_1handle_1aa8016278dbe2e4534cfa09f688ea17ee" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>handle</name></member>
      <member refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>inc_ref</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a5107835e7630a10868373383c003100b" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>is</name></member>
      <member refid="classpybind11_1_1object_1a2cf33587d993fb836e9fcc7a9f3e5dcb" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>is_borrowed</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>is_none</name></member>
      <member refid="classpybind11_1_1object_1a05110f45918e73ad56f66cc713fd1d21" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>object</name></member>
      <member refid="classpybind11_1_1object_1acd1e392727b7870b82404c6077fd7da3" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>object</name></member>
      <member refid="classpybind11_1_1object_1a8b3e38884a2467c88b61ad8b0f7b0469" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>object</name></member>
      <member refid="classpybind11_1_1object_1af43aa8511d39ad9fa3aae093962ca471" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>object</name></member>
      <member refid="classpybind11_1_1object_1a03cf406a7bee2cde9264d89f5c321e95" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>object</name></member>
      <member refid="classpybind11_1_1handle_1ac487a4afc7fb27d01ce4216813c7a91c" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator bool</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator()</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a5babe5939b794c3408711be7fde14ee0" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator*</name></member>
      <member refid="classpybind11_1_1object_1aa02e0b7ba3182ecea17911e5fdc631dd" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator=</name></member>
      <member refid="classpybind11_1_1object_1a1f45b12a97cf4b93915fd9145747cd9b" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator=</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1ae10abab736d193f170eaa6cfbdab6d01" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator[]</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a579d2eeebff07ddab98814ccbfbe2728" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>operator[]</name></member>
      <member refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>ptr</name></member>
      <member refid="classpybind11_1_1handle_1ae837f0f5edde0818cd37e92f5664ebf2" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>ptr</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1aa1e808c7d0773561b3c552cf93d13368" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>ref_count</name></member>
      <member refid="classpybind11_1_1object_1ac1ea1a4cbcf197d7c8096037633720d7" prot="protected" virt="non-virtual"><scope>pybind11::object</scope><name>reinterpret_borrow</name></member>
      <member refid="classpybind11_1_1object_1ae1de2ab5a755c10582ac1e46071de5c5" prot="protected" virt="non-virtual"><scope>pybind11::object</scope><name>reinterpret_steal</name></member>
      <member refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>release</name></member>
      <member refid="classpybind11_1_1object_1a18a870a490c34d5a7775e90dc799d2f4" prot="public" virt="non-virtual"><scope>pybind11::object</scope><name>~object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
