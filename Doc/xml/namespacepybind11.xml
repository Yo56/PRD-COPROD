<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="namespacepybind11" kind="namespace" language="C++">
    <compoundname>pybind11</compoundname>
    <innerclass refid="structpybind11_1_1is__method" prot="public">pybind11::is_method</innerclass>
    <innerclass refid="structpybind11_1_1is__operator" prot="public">pybind11::is_operator</innerclass>
    <innerclass refid="structpybind11_1_1scope" prot="public">pybind11::scope</innerclass>
    <innerclass refid="structpybind11_1_1doc" prot="public">pybind11::doc</innerclass>
    <innerclass refid="structpybind11_1_1name" prot="public">pybind11::name</innerclass>
    <innerclass refid="structpybind11_1_1sibling" prot="public">pybind11::sibling</innerclass>
    <innerclass refid="structpybind11_1_1base" prot="public">pybind11::base</innerclass>
    <innerclass refid="structpybind11_1_1keep__alive" prot="public">pybind11::keep_alive</innerclass>
    <innerclass refid="structpybind11_1_1multiple__inheritance" prot="public">pybind11::multiple_inheritance</innerclass>
    <innerclass refid="structpybind11_1_1dynamic__attr" prot="public">pybind11::dynamic_attr</innerclass>
    <innerclass refid="structpybind11_1_1buffer__protocol" prot="public">pybind11::buffer_protocol</innerclass>
    <innerclass refid="structpybind11_1_1metaclass" prot="public">pybind11::metaclass</innerclass>
    <innerclass refid="structpybind11_1_1arithmetic" prot="public">pybind11::arithmetic</innerclass>
    <innerclass refid="structpybind11_1_1call__guard" prot="public">pybind11::call_guard</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_4" prot="public">pybind11::call_guard&lt;&gt;</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_01_t_01_4" prot="public">pybind11::call_guard&lt; T &gt;</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4" prot="public">pybind11::call_guard&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1buffer__info" prot="public">pybind11::buffer_info</innerclass>
    <innerclass refid="structpybind11_1_1arg" prot="public">pybind11::arg</innerclass>
    <innerclass refid="structpybind11_1_1arg__v" prot="public">pybind11::arg_v</innerclass>
    <innerclass refid="classpybind11_1_1error__already__set" prot="public">pybind11::error_already_set</innerclass>
    <innerclass refid="classpybind11_1_1builtin__exception" prot="public">pybind11::builtin_exception</innerclass>
    <innerclass refid="classpybind11_1_1stop__iteration" prot="public">pybind11::stop_iteration</innerclass>
    <innerclass refid="classpybind11_1_1index__error" prot="public">pybind11::index_error</innerclass>
    <innerclass refid="classpybind11_1_1key__error" prot="public">pybind11::key_error</innerclass>
    <innerclass refid="classpybind11_1_1value__error" prot="public">pybind11::value_error</innerclass>
    <innerclass refid="classpybind11_1_1type__error" prot="public">pybind11::type_error</innerclass>
    <innerclass refid="classpybind11_1_1cast__error" prot="public">pybind11::cast_error</innerclass>
    <innerclass refid="classpybind11_1_1reference__cast__error" prot="public">pybind11::reference_cast_error</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor" prot="public">pybind11::format_descriptor</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1error__scope" prot="public">pybind11::error_scope</innerclass>
    <innerclass refid="structpybind11_1_1nodelete" prot="public">pybind11::nodelete</innerclass>
    <innerclass refid="structpybind11_1_1overload__cast" prot="public">pybind11::overload_cast</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4" prot="public">pybind11::format_descriptor&lt; std::complex&lt; T &gt;, detail::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1scoped__interpreter" prot="public">pybind11::scoped_interpreter</innerclass>
    <innerclass refid="classpybind11_1_1dtype" prot="public">pybind11::dtype</innerclass>
    <innerclass refid="classpybind11_1_1array" prot="public">pybind11::array</innerclass>
    <innerclass refid="classpybind11_1_1array__t" prot="public">pybind11::array_t</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1is__pod__2541c7600b5fc9094049e2495342ba9e" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; detail::is_pod_struct&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01char_0f_n_0e_4" prot="public">pybind11::format_descriptor&lt; char[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" prot="public">pybind11::format_descriptor&lt; std::array&lt; char, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1array__indf15e44072e0df87924bd69ebdc6a173" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; detail::array_info&lt; T &gt;::is_array &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1options" prot="public">pybind11::options</innerclass>
    <innerclass refid="classpybind11_1_1cpp__function" prot="public">pybind11::cpp_function</innerclass>
    <innerclass refid="classpybind11_1_1module" prot="public">pybind11::module</innerclass>
    <innerclass refid="classpybind11_1_1class__" prot="public">pybind11::class_</innerclass>
    <innerclass refid="classpybind11_1_1enum__" prot="public">pybind11::enum_</innerclass>
    <innerclass refid="classpybind11_1_1exception" prot="public">pybind11::exception</innerclass>
    <innerclass refid="classpybind11_1_1gil__scoped__acquire" prot="public">pybind11::gil_scoped_acquire</innerclass>
    <innerclass refid="classpybind11_1_1gil__scoped__release" prot="public">pybind11::gil_scoped_release</innerclass>
    <innerclass refid="classpybind11_1_1handle" prot="public">pybind11::handle</innerclass>
    <innerclass refid="classpybind11_1_1object" prot="public">pybind11::object</innerclass>
    <innerclass refid="classpybind11_1_1iterator" prot="public">pybind11::iterator</innerclass>
    <innerclass refid="classpybind11_1_1iterable" prot="public">pybind11::iterable</innerclass>
    <innerclass refid="classpybind11_1_1str" prot="public">pybind11::str</innerclass>
    <innerclass refid="classpybind11_1_1bytes" prot="public">pybind11::bytes</innerclass>
    <innerclass refid="classpybind11_1_1none" prot="public">pybind11::none</innerclass>
    <innerclass refid="classpybind11_1_1bool__" prot="public">pybind11::bool_</innerclass>
    <innerclass refid="classpybind11_1_1int__" prot="public">pybind11::int_</innerclass>
    <innerclass refid="classpybind11_1_1float__" prot="public">pybind11::float_</innerclass>
    <innerclass refid="classpybind11_1_1weakref" prot="public">pybind11::weakref</innerclass>
    <innerclass refid="classpybind11_1_1slice" prot="public">pybind11::slice</innerclass>
    <innerclass refid="classpybind11_1_1capsule" prot="public">pybind11::capsule</innerclass>
    <innerclass refid="classpybind11_1_1tuple" prot="public">pybind11::tuple</innerclass>
    <innerclass refid="classpybind11_1_1dict" prot="public">pybind11::dict</innerclass>
    <innerclass refid="classpybind11_1_1sequence" prot="public">pybind11::sequence</innerclass>
    <innerclass refid="classpybind11_1_1list" prot="public">pybind11::list</innerclass>
    <innerclass refid="classpybind11_1_1args" prot="public">pybind11::args</innerclass>
    <innerclass refid="classpybind11_1_1kwargs" prot="public">pybind11::kwargs</innerclass>
    <innerclass refid="classpybind11_1_1set" prot="public">pybind11::set</innerclass>
    <innerclass refid="classpybind11_1_1function" prot="public">pybind11::function</innerclass>
    <innerclass refid="classpybind11_1_1buffer" prot="public">pybind11::buffer</innerclass>
    <innerclass refid="classpybind11_1_1memoryview" prot="public">pybind11::memoryview</innerclass>
    <innernamespace refid="namespacepybind11_1_1____main____">pybind11::__main__</innernamespace>
    <innernamespace refid="namespacepybind11_1_1__version">pybind11::_version</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <innernamespace refid="namespacepybind11_1_1literals" inline="yes">pybind11::literals</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>return_value_policy</name>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca2bd9c0ed00116be1258e0cc66617d7c8" prot="public">
          <name>automatic</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the default return value policy, which falls back to the policy <ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca5dc4bb19391b04351f49572019c628c0" kindref="member">return_value_policy::take_ownership</ref> when the return value is a pointer. Otherwise, it uses return_value::move or return_value::copy for rvalue and lvalue references, respectively. See below for a description of what all of these different policies do. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca1c1628c22d69b3b9bac4b5c3674852e3" prot="public">
          <name>automatic_reference</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>As above, but use policy <ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69cab8af13ea9c8fe890c9979a1fa8dbde22" kindref="member">return_value_policy::reference</ref> when the return value is a pointer. This is the default conversion policy for function arguments when calling Python functions manually from C++ code (i.e. via handle::operator()). You probably won&apos;t need to use this. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca5dc4bb19391b04351f49572019c628c0" prot="public">
          <name>take_ownership</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reference an existing object (i.e. do not create a new copy) and take ownership. Python will call the destructor and delete operator when the object’s reference count reaches zero. Undefined behavior ensues when the C++ side does the same.. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" prot="public">
          <name>copy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Create a new copy of the returned object, which will be owned by Python. This policy is comparably safe because the lifetimes of the two instances are decoupled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca3734a903022249b3010be1897042568e" prot="public">
          <name>move</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use std::move to move the return value contents into a new instance that will be owned by Python. This policy is comparably safe because the lifetimes of the two instances (move source and destination) are decoupled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69cab8af13ea9c8fe890c9979a1fa8dbde22" prot="public">
          <name>reference</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reference an existing object, but do not take ownership. The C++ side is responsible for managing the object’s lifetime and deallocating it when it is no longer used. Warning: undefined behavior will ensue when the C++ side deletes an object that is still referenced and used by Python. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69caa39bc0596cb125c1605a78fbd287df7f" prot="public">
          <name>reference_internal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This policy only applies to methods and properties. It references the object without taking ownership similar to the above <ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69cab8af13ea9c8fe890c9979a1fa8dbde22" kindref="member">return_value_policy::reference</ref> policy. In contrast to that policy, the function or property’s implicit this argument (called the parent) is considered to be the the owner of the return value (the child). <ref refid="namespacepybind11" kindref="compound">pybind11</ref> then couples the lifetime of the parent to the child via a reference relationship that ensures that the parent cannot be garbage collected while Python is still using the child. More advanced variations of this scheme are also possible using combinations of <ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69cab8af13ea9c8fe890c9979a1fa8dbde22" kindref="member">return_value_policy::reference</ref> and the <ref refid="structpybind11_1_1keep__alive" kindref="compound">keep_alive</ref> call policy </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Approach used to cast a previously unknown C++ instance into a Python object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="293" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="293" bodyend="342"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepybind11_1a08a5898f9a083026531bc5d435f715ea" prot="public" static="no" strong="no">
        <type></type>
        <name>eval_mode</name>
        <enumvalue id="namespacepybind11_1a08a5898f9a083026531bc5d435f715eaa86e05cca1e5516b3ff4014f9af34aaff" prot="public">
          <name>eval_expr</name>
          <briefdescription>
<para>Evaluate a string containing an isolated expression. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a08a5898f9a083026531bc5d435f715eaa9cf39a293befe652b5046b1e7cf9fe58" prot="public">
          <name>eval_single_statement</name>
          <briefdescription>
<para>Evaluate a string containing a single statement. Returns <computeroutput>none</computeroutput>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1a08a5898f9a083026531bc5d435f715eaa22b140993f208620cf25bba6e0d5590b" prot="public">
          <name>eval_statements</name>
          <briefdescription>
<para>Evaluate a string containing a sequence of statement. Returns <computeroutput>none</computeroutput>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" line="18" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" bodystart="18" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacepybind11_1aa14f653ec1b63f58b3013ef9d6ac9422" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref></type>
        <definition>using pybind11::arg_t = typedef arg_v</definition>
        <argsstring></argsstring>
        <name>arg_t</name>
        <briefdescription>
<para>Alias for backward compatibility <ndash/> to be removed in version 2.0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1740" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" prot="public" static="no">
        <type>Py_ssize_t</type>
        <definition>using pybind11::ssize_t = typedef Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="289" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using pybind11::size_t = typedef std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="290" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" prot="public" static="no">
        <type>Eigen::Stride&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using pybind11::EigenDStride = typedef Eigen::Stride&lt;Eigen::Dynamic, Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>EigenDStride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="41" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1a23484f7bb5fa23363d338c66c71dc6a8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Ref&lt; MatrixType, 0, <ref refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" kindref="member">EigenDStride</ref> &gt;</type>
        <definition>using pybind11::EigenDRef = typedef Eigen::Ref&lt;MatrixType, 0, EigenDStride&gt;</definition>
        <argsstring></argsstring>
        <name>EigenDRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="42" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1a6f353deb5dca5ef06dd63358f9a9bb20" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; MatrixType, 0, <ref refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" kindref="member">EigenDStride</ref> &gt;</type>
        <definition>using pybind11::EigenDMap = typedef Eigen::Map&lt;MatrixType, 0, EigenDStride&gt;</definition>
        <argsstring></argsstring>
        <name>EigenDMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="43" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt;!detail::is_pyobject&lt; T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::cast</definition>
        <argsstring>(const handle &amp;handle)</argsstring>
        <name>cast</name>
        <param>
          <type>const <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> &amp;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1558" column="3" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1558" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a87f21f6281dddbba982c721e93d1f60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt;!detail::is_pyobject&lt; T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::cast</definition>
        <argsstring>(const T &amp;value, return_value_policy policy=return_value_policy::automatic_reference, handle parent=handle())</argsstring>
        <name>cast</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref></type>
          <declname>policy</declname>
          <defval><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca1c1628c22d69b3b9bac4b5c3674852e3" kindref="member">return_value_policy::automatic_reference</ref></defval>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>parent</declname>
          <defval><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1571" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1571" bodyend="1578"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t</ref>&lt;!<ref refid="namespacepybind11_1_1detail_1a9b95d0bea18a9cb7599182d1f32a7f6a" kindref="member">detail::move_never</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>detail::enable_if_t&lt;!detail::move_never&lt;T&gt;::value, T&gt; pybind11::move</definition>
        <argsstring>(object &amp;&amp;obj)</argsstring>
        <name>move</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1584" column="22" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1584" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1adb9d391ba89e4dbc85bc088c637a454b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structpybind11_1_1detail_1_1move__always" kindref="compound">detail::move_always</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>detail::enable_if_t&lt;detail::move_always&lt;T&gt;::value, T&gt; pybind11::cast</definition>
        <argsstring>(object &amp;&amp;object)</argsstring>
        <name>cast</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1604" column="34" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1604" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a37c29751349cfc3a1b5e8b4765c23e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structpybind11_1_1detail_1_1move__if__unreferenced" kindref="compound">detail::move_if_unreferenced</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>detail::enable_if_t&lt;detail::move_if_unreferenced&lt;T&gt;::value, T&gt; pybind11::cast</definition>
        <argsstring>(object &amp;&amp;object)</argsstring>
        <name>cast</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1607" column="34" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1607" bodyend="1612"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a9b95d0bea18a9cb7599182d1f32a7f6a" kindref="member">detail::move_never</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>detail::enable_if_t&lt;detail::move_never&lt;T&gt;::value, T&gt; pybind11::cast</definition>
        <argsstring>(object &amp;&amp;object)</argsstring>
        <name>cast</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1613" column="34" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1613" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>policy</declname>
            <defname>policy</defname>
            <defval>return_value_policy::automatic_reference</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref></type>
        <definition>tuple pybind11::make_tuple</definition>
        <argsstring>(Args &amp;&amp;... args_)</argsstring>
        <name>make_tuple</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1652" column="19" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1652" bodyend="1674"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1literals_1ad46240bdb807f80caa6e104591878d5c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structpybind11_1_1arg" kindref="compound">arg</ref></type>
        <definition>constexpr arg pybind11::literals::operator&quot;&quot;_a</definition>
        <argsstring>(const char *name, size_t)</argsstring>
        <name>operator&quot;&quot;_a</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst String literal version of <computeroutput>arg</computeroutput> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1746" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1746" bodyend="1746"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a43f875b57085d18e33b68e3c666facf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::__attribute__</definition>
        <argsstring>((noinline)) void *set_shared_data(const std</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noinline)</type>
        </param>
        <briefdescription>
<para>Set the shared data that can be later recovered by <computeroutput>get_shared_data()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Used internally.</para>
<para>Returns a named pointer that is shared among all extension modules (using the same <ref refid="namespacepybind11" kindref="compound">pybind11</ref> version) running in the current interpreter. Names starting with underscores are reserved for internal usage. Returns <computeroutput>nullptr</computeroutput> if no matching entry was found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="675" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="675" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1aa297ec4bf4b85dc134d56708fbfcc850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; pybind11::get_or_create_shared_data</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>get_or_create_shared_data</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a typed reference to a shared data entry (by using <computeroutput>get_shared_data()</computeroutput>) if such entry exists. Otherwise, a new object of default-constructible type <computeroutput>T</computeroutput> is added to the shared data under the given name and a reference to it is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="690" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="690" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a4a37202a545a53e60d9722b5712b9171" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::initialize_interpreter</definition>
        <argsstring>(bool init_signal_handlers=true)</argsstring>
        <name>initialize_interpreter</name>
        <param>
          <type>bool</type>
          <declname>init_signal_handlers</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Initialize the Python interpreter. No other <ref refid="namespacepybind11" kindref="compound">pybind11</ref> or CPython API functions can be called before this is done; with the exception of <computeroutput>PYBIND11_EMBEDDED_MODULE</computeroutput>. The optional parameter can be used to skip the registration of signal handlers (see the Python documentation for details). Calling this function again after the interpreter has already been initialized is a fatal error. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" line="96" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a2f49a19c03be57ee8ff8427a5f30dc20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::finalize_interpreter</definition>
        <argsstring>()</argsstring>
        <name>finalize_interpreter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Shut down the Python interpreter. No <ref refid="namespacepybind11" kindref="compound">pybind11</ref> or CPython API functions can be called after this. In addition, <ref refid="namespacepybind11" kindref="compound">pybind11</ref> objects must not outlive the interpreter:</para>
<para>.. code-block:: cpp <verbatim>{ // BAD
    py::initialize_interpreter();
    auto hello = py::str(&quot;Hello, World!&quot;);
    py::finalize_interpreter();
} // &lt;-- BOOM, hello&apos;s destructor is called after interpreter shutdown

{ // GOOD
    py::initialize_interpreter();
    { // scoped
        auto hello = py::str(&quot;Hello, World!&quot;);
    } // &lt;-- OK, hello is cleaned up properly
    py::finalize_interpreter();
}

{ // BETTER
    py::scoped_interpreter guard{};
    auto hello = py::str(&quot;Hello, World!&quot;);
}
</verbatim> .. warning:: <verbatim>The interpreter can be restarted by calling `initialize_interpreter` again.
Modules created using pybind11 can be safely re-initialized. However, Python
itself cannot completely unload binary extension modules and there are several
caveats with regard to interpreter restarting. All the details can be found
in the CPython documentation. In short, not all interpreter memory may be
freed, either due to reference cycles or user-created global data.
</verbatim> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" line="142" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" bodystart="142" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1ae26f489829ee95049a3cbf473d3c50bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>eval_mode</type>
            <declname>mode</declname>
            <defname>mode</defname>
            <defval>eval_expr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::eval</definition>
        <argsstring>(str expr, object global=globals(), object local=object())</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="classpybind11_1_1str" kindref="compound">str</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>global</declname>
          <defval><ref refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" kindref="member">globals</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>local</declname>
          <defval><ref refid="classpybind11_1_1object" kindref="compound">object</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" line="30" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" bodystart="30" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a56b1a96dad971e6c0edd9b796cc57880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>eval_mode</type>
            <declname>mode</declname>
            <defname>mode</defname>
            <defval>eval_expr</defval>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::eval</definition>
        <argsstring>(const char(&amp;s)[N], object global=globals(), object local=object())</argsstring>
        <name>eval</name>
        <param>
          <type>const char(&amp;)</type>
          <declname>s</declname>
          <array>[N]</array>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>global</declname>
          <defval><ref refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" kindref="member">globals</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>local</declname>
          <defval><ref refid="classpybind11_1_1object" kindref="compound">object</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" line="53" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1ad3ca1928aef1b51fa07d8720ce75fdf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::exec</definition>
        <argsstring>(str expr, object global=globals(), object local=object())</argsstring>
        <name>exec</name>
        <param>
          <type><ref refid="classpybind11_1_1str" kindref="compound">str</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>global</declname>
          <defval><ref refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" kindref="member">globals</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>local</declname>
          <defval><ref refid="classpybind11_1_1object" kindref="compound">object</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" line="60" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1ae38838be20e46edfdb3dbc03f176d7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::exec</definition>
        <argsstring>(const char(&amp;s)[N], object global=globals(), object local=object())</argsstring>
        <name>exec</name>
        <param>
          <type>const char(&amp;)</type>
          <declname>s</declname>
          <array>[N]</array>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>global</declname>
          <defval><ref refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" kindref="member">globals</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>local</declname>
          <defval><ref refid="classpybind11_1_1object" kindref="compound">object</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" line="65" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1ab3958ed51fe6e4bf962b04e32d01c242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>eval_mode</type>
            <declname>mode</declname>
            <defname>mode</defname>
            <defval>eval_statements</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::eval_file</definition>
        <argsstring>(str fname, object global=globals(), object local=object())</argsstring>
        <name>eval_file</name>
        <param>
          <type><ref refid="classpybind11_1_1str" kindref="compound">str</ref></type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>global</declname>
          <defval><ref refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" kindref="member">globals</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
          <declname>local</declname>
          <defval><ref refid="classpybind11_1_1object" kindref="compound">object</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" line="70" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h" bodystart="70" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a4ccb3d918a6c83f0ed93b7aae5e3dd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Return</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1vectorize__helper" kindref="compound">detail::vectorize_helper</ref>&lt; Return(*)(Args...), Return, Args... &gt;</type>
        <definition>detail::vectorize_helper&lt;Return (*)(Args...), Return, Args...&gt; pybind11::vectorize</definition>
        <argsstring>(Return(*f)(Args ...))</argsstring>
        <name>vectorize</name>
        <param>
          <type>Return(*)(Args ...)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1569" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1569" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a5a9b99aeffa23dc8596bc5ab46bdec99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
          <param>
            <type>typename FuncType</type>
            <defval>typename detail::remove_class&lt;decltype(&amp;detail::remove_reference_t&lt;Func&gt;::operator())&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pybind11::vectorize</definition>
        <argsstring>(Func &amp;&amp;f) -&gt; decltype(detail::vectorize_extractor(std::forward&lt; Func &gt;(f),(FuncType *) nullptr))</argsstring>
        <name>vectorize</name>
        <param>
          <type>Func &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1575" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1575" bodyend="1578"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Return</type>
          </param>
          <param>
            <type>typename Class</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Helper</type>
            <defval>detail::vectorize_helper&lt;decltype(std::mem_fn(std::declval&lt;Return (Class::*)(Args...)&gt;())), Return, Class *, Args...&gt;</defval>
          </param>
        </templateparamlist>
        <type>Helper</type>
        <definition>Helper pybind11::vectorize</definition>
        <argsstring>(Return(Class::*f)(Args...))</argsstring>
        <name>vectorize</name>
        <param>
          <type>Return(Class::*)(Args...)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1583" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1583" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref></type>
        <definition>dict pybind11::globals</definition>
        <argsstring>()</argsstring>
        <name>globals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a dictionary representing the global variables in the current execution frame, or <computeroutput>__main__.__dict__</computeroutput> if there is no frame (usually when the interpreter is embedded). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="808" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="808" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a80923cbfeaa7668191f479b40a94957e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pybind11::method_adaptor</definition>
        <argsstring>(F &amp;&amp;f) -&gt; decltype(std::forward&lt; F &gt;(f))</argsstring>
        <name>method_adaptor</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a pointer to a member function, cast it to its <computeroutput>Derived</computeroutput> version. Forward everything else unchanged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="920" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="920" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1aeb36fd4bbf6d949769e083dc9bdf7426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Return</type>
          </param>
          <param>
            <type>typename Class</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pybind11::method_adaptor</definition>
        <argsstring>(Return(Class::*pmf)(Args...)) -&gt; Return(Derived::*)(Args...)</argsstring>
        <name>method_adaptor</name>
        <param>
          <type>Return(Class::*)(Args...)</type>
          <declname>pmf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="923" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="923" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">detail::init</ref>&lt; Args... &gt;</type>
        <definition>detail::init&lt;Args...&gt; pybind11::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1417" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1417" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a92d1d3fd106f97b8e8fbc0047c8b924f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">detail::init_alias</ref>&lt; Args... &gt;</type>
        <definition>detail::init_alias&lt;Args...&gt; pybind11::init_alias</definition>
        <argsstring>()</argsstring>
        <name>init_alias</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1418" column="32" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1418" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1ac97330a2a87d0653768770751b057c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>Policy</declname>
            <defname>Policy</defname>
            <defval>return_value_policy::reference_internal</defval>
          </param>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Sentinel</type>
          </param>
          <param>
            <type>typename ValueType</type>
            <defval>decltype(*std::declval&lt;Iterator&gt;())</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator pybind11::make_iterator</definition>
        <argsstring>(Iterator first, Sentinel last, Extra &amp;&amp;... extra)</argsstring>
        <name>make_iterator</name>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Extra &amp;&amp;...</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
<para>Makes a python iterator from a first and past-the-end C++ InputIterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1426" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1426" bodyend="1446"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a9720b33862b4fbd9345c2bf2a0e407f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>Policy</declname>
            <defname>Policy</defname>
            <defval>return_value_policy::reference_internal</defval>
          </param>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Sentinel</type>
          </param>
          <param>
            <type>typename KeyType</type>
            <defval>decltype((*std::declval&lt;Iterator&gt;()).first)</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator pybind11::make_key_iterator</definition>
        <argsstring>(Iterator first, Sentinel last, Extra &amp;&amp;... extra)</argsstring>
        <name>make_key_iterator</name>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Extra &amp;&amp;...</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes an python iterator over the keys (<computeroutput>.first</computeroutput>) of a iterator over pairs from a first and past-the-end InputIterator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1455" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1455" bodyend="1475"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1abc7e251f8927c3f839ec9beff8662a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>Policy</declname>
            <defname>Policy</defname>
            <defval>return_value_policy::reference_internal</defval>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator pybind11::make_iterator</definition>
        <argsstring>(Type &amp;value, Extra &amp;&amp;... extra)</argsstring>
        <name>make_iterator</name>
        <param>
          <type>Type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Extra &amp;&amp;...</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes an iterator over values of an stl container or other container supporting <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1480" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1480" bodyend="1482"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a451a8f82d09d763f5400dead333116ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>Policy</declname>
            <defname>Policy</defname>
            <defval>return_value_policy::reference_internal</defval>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator pybind11::make_key_iterator</definition>
        <argsstring>(Type &amp;value, Extra &amp;&amp;... extra)</argsstring>
        <name>make_key_iterator</name>
        <param>
          <type>Type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Extra &amp;&amp;...</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes an iterator over the keys (<computeroutput>.first</computeroutput>) of a stl map-like container supporting <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1487" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1487" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1aa3d4074b855542774c3fbdd75697d48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
          <param>
            <type>typename OutputType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::implicitly_convertible</definition>
        <argsstring>()</argsstring>
        <name>implicitly_convertible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1491" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1491" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a4353c0dbefd359b04ebef9e47a0eb359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ExceptionTranslator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::register_exception_translator</definition>
        <argsstring>(ExceptionTranslator &amp;&amp;translator)</argsstring>
        <name>register_exception_translator</name>
        <param>
          <type>ExceptionTranslator &amp;&amp;</type>
          <declname>translator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1510" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1510" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1aa580e4fbed60a69cda35ea099a04e1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CppException</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1exception" kindref="compound">exception</ref>&lt; CppException &gt; &amp;</type>
        <definition>exception&lt;CppException&gt;&amp; pybind11::register_exception</definition>
        <argsstring>(handle scope, const char *name, PyObject *base=PyExc_Exception)</argsstring>
        <name>register_exception</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>base</declname>
          <defval>PyExc_Exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a Python exception in <computeroutput>m</computeroutput> of the given <computeroutput>name</computeroutput> and installs an exception translator to translate the C++ exception to the created Python exception using the exceptions what() method. This is intended for simple exception translations; for more complex translation, register the exception object and translator directly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1548" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1548" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a913a30079a57934b1bfda83ba4080da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>policy</declname>
            <defname>policy</defname>
            <defval>return_value_policy::automatic_reference</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::print</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>print</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1597" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1597" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a2bd4a52df3fbac712407b5cad8449865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1function" kindref="compound">function</ref></type>
        <definition>function pybind11::get_type_overload</definition>
        <argsstring>(const void *this_ptr, const detail::type_info *this_type, const char *name)</argsstring>
        <name>get_type_overload</name>
        <param>
          <type>const void *</type>
          <declname>this_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref> *</type>
          <declname>this_type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1755" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1755" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a1bf1986e4cc6b7770ee71b3ce88a1a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1function" kindref="compound">function</ref></type>
        <definition>function pybind11::get_overload</definition>
        <argsstring>(const T *this_ptr, const char *name)</argsstring>
        <name>get_overload</name>
        <param>
          <type>const T *</type>
          <declname>this_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1812" column="22" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1812" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1acad75b61738e777489ed1f4a30776268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::reinterpret_borrow</definition>
        <argsstring>(handle h)</argsstring>
        <name>reinterpret_borrow</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Declare that a <computeroutput>handle</computeroutput> or <computeroutput>PyObject *</computeroutput> is a certain type and borrow the reference. The target type <computeroutput>T</computeroutput> must be <computeroutput>object</computeroutput> or one of its derived classes. The function doesn&apos;t do any conversions or checks. It&apos;s up to the user to make sure that the target type is correct.</para>
<para>.. code-block:: cpp <verbatim>PyObject *p = PyList_GetItem(obj, index);
py::object o = reinterpret_borrow&lt;py::object&gt;(p);
</verbatim> or py::tuple t = reinterpret_borrow&lt;py::tuple&gt;(p); // &lt;<ndash/> <computeroutput>p</computeroutput> must be already be a <computeroutput>tuple</computeroutput> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="270" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a4b8f2939859acb062ae3c38c8b82b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::reinterpret_steal</definition>
        <argsstring>(handle h)</argsstring>
        <name>reinterpret_steal</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Like <computeroutput>reinterpret_borrow</computeroutput>, but steals the reference.</para>
<para>.. code-block:: cpp</para>
<para>PyObject *p = PyObject_Str(obj); py::str s = reinterpret_steal&lt;py::str&gt;(p); // &lt;<ndash/> <computeroutput>p</computeroutput> must be already be a <computeroutput>str</computeroutput> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="280" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga2de041115880fe435885b9a9d7c2c276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_base_of&lt; object, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool pybind11::isinstance</definition>
        <argsstring>(handle obj)</argsstring>
        <name>isinstance</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Return true if <computeroutput>obj</computeroutput> is an instance of <computeroutput>T</computeroutput>. Type <computeroutput>T</computeroutput> must be a subclass of <computeroutput>object</computeroutput> or a class which was exposed to Python as <computeroutput>py::class_&lt;T&gt;</computeroutput>. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="293" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a7beb48e900be6e4e45b90482defde822" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool pybind11::isinstance&lt; handle &gt;</definition>
        <argsstring>(handle obj)=delete</argsstring>
        <name>isinstance&lt; handle &gt;</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="298" column="19" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" declline="298" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1adc42dbf138ab0de23a58c7952cb8ba9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool pybind11::isinstance&lt; object &gt;</definition>
        <argsstring>(handle obj)</argsstring>
        <name>isinstance&lt; object &gt;</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="299" column="19" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga514d6552530d0b02362a2045f43fcdba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::isinstance</definition>
        <argsstring>(handle obj, handle type)</argsstring>
        <name>isinstance</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if <computeroutput>obj</computeroutput> is an instance of the <computeroutput>type</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="303" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="303" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::hasattr</definition>
        <argsstring>(handle obj, handle name)</argsstring>
        <name>hasattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="312" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gaef7ee96307a4732fad5df956b387f8a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::hasattr</definition>
        <argsstring>(handle obj, const char *name)</argsstring>
        <name>hasattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="316" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga0854324102907dc2d82ac413b6e6b66e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::getattr</definition>
        <argsstring>(handle obj, handle name)</argsstring>
        <name>getattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="320" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="320" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gac80ddad26eb3426c93277ce8d7c0f982" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::getattr</definition>
        <argsstring>(handle obj, const char *name)</argsstring>
        <name>getattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="326" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga715c20d77757165563f28474dc39e80c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::getattr</definition>
        <argsstring>(handle obj, handle name, handle default_)</argsstring>
        <name>getattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>default_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="332" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="332" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::getattr</definition>
        <argsstring>(handle obj, const char *name, handle default_)</argsstring>
        <name>getattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>default_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="341" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="341" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gad3d54ac3f3614c110d2ffa5c061ee905" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::setattr</definition>
        <argsstring>(handle obj, handle name, handle value)</argsstring>
        <name>setattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="350" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gac63dcad9209e4abd96a430bef04414ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::setattr</definition>
        <argsstring>(handle obj, const char *name, handle value)</argsstring>
        <name>setattr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="354" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1literals_1ac64ce16d2a0ab3f9e80fdde0e0857224" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1str" kindref="compound">str</ref></type>
        <definition>str pybind11::literals::operator&quot;&quot;_s</definition>
        <argsstring>(const char *s, size_t size)</argsstring>
        <name>operator&quot;&quot;_s</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst String literal version of <computeroutput>str</computeroutput> \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="849" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="849" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        <definition>size_t pybind11::len</definition>
        <argsstring>(handle h)</argsstring>
        <name>len</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="1224" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="1224" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gad03802ec7d35cdd35a26c59cd53db480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1str" kindref="compound">str</ref></type>
        <definition>str pybind11::repr</definition>
        <argsstring>(handle h)</argsstring>
        <name>repr</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="1231" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="1231" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator pybind11::iter</definition>
        <argsstring>(handle obj)</argsstring>
        <name>iter</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="1242" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="1242" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a3375b1b2135f6344f5550b7869c5fa64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; pybind11::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const handle &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h" line="358" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a104810fb64b2c424c5fb70d6c64f503f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename holder_type</type>
            <defval>std::unique_ptr&lt;Vector&gt;</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>&lt; Vector, holder_type &gt;</type>
        <definition>class_&lt;Vector, holder_type&gt; pybind11::bind_vector</definition>
        <argsstring>(module &amp;m, std::string const &amp;name, Args &amp;&amp;... args)</argsstring>
        <name>bind_vector</name>
        <param>
          <type><ref refid="classpybind11_1_1module" kindref="compound">module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="379" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="379" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a3b0dfb2c0a7f951897b6d1ff9992f34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename holder_type</type>
            <defval>std::unique_ptr&lt;Map&gt;</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>&lt; Map, holder_type &gt;</type>
        <definition>class_&lt;Map, holder_type&gt; pybind11::bind_map</definition>
        <argsstring>(module &amp;m, const std::string &amp;name, Args &amp;&amp;... args)</argsstring>
        <name>bind_map</name>
        <param>
          <type><ref refid="classpybind11_1_1module" kindref="compound">module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="534" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="534" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1a659dbbd826463f080f2ce7119986711a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def pybind11.get_include</definition>
        <argsstring>(*args, **kwargs)</argsstring>
        <name>get_include</name>
        <param>
          <type>*</type>
          <declname>args</declname>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/pybind11/__init__.py" line="4" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/pybind11/__init__.py" bodystart="4" bodyend="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>glibc defines I as a macro which breaks things, e.g., boost template names </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" line="15" column="1"/>
  </compounddef>
</doxygen>
