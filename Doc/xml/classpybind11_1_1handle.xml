<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="classpybind11_1_1handle" kind="class" language="C++" prot="public">
    <compoundname>pybind11::handle</compoundname>
    <basecompoundref refid="classpybind11_1_1detail_1_1object__api" prot="public" virt="non-virtual">pybind11::detail::object_api&lt; handle &gt;</basecompoundref>
    <derivedcompoundref refid="classpybind11_1_1detail_1_1args__proxy" prot="public" virt="non-virtual">pybind11::detail::args_proxy</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1detail_1_1kwargs__proxy" prot="public" virt="non-virtual">pybind11::detail::kwargs_proxy</derivedcompoundref>
    <derivedcompoundref refid="classpybind11_1_1object" prot="public" virt="non-virtual">pybind11::object</derivedcompoundref>
    <includes refid="pytypes_8h" local="no">pytypes.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpybind11_1_1handle_1a4ba87579a3fba33e8e35e7a7884fe998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::handle::handle</definition>
        <argsstring>()=default</argsstring>
        <name>handle</name>
        <briefdescription>
<para>The default constructor creates a handle with a <computeroutput>nullptr</computeroutput>-valued pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="145" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1aa8016278dbe2e4534cfa09f688ea17ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::handle::handle</definition>
        <argsstring>(PyObject *ptr)</argsstring>
        <name>handle</name>
        <param>
          <type>PyObject *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput>handle</computeroutput> from the given raw Python object pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="147" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* pybind11::handle::ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Return the underlying <computeroutput>PyObject *</computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="150" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1ae837f0f5edde0818cd37e92f5664ebf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *&amp;</type>
        <definition>PyObject*&amp; pybind11::handle::ptr</definition>
        <argsstring>()</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="151" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> &amp;</type>
        <definition>const handle&amp; pybind11::handle::inc_ref</definition>
        <argsstring>() const &amp;</argsstring>
        <name>inc_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Manually increase the reference count of the Python object. Usually, it is preferable to use the <computeroutput>object</computeroutput> class which derives from <computeroutput>handle</computeroutput> and calls this function automatically. Returns a reference to itself. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="158" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> &amp;</type>
        <definition>const handle&amp; pybind11::handle::dec_ref</definition>
        <argsstring>() const &amp;</argsstring>
        <name>dec_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Manually decrease the reference count of the Python object. Usually, it is preferable to use the <computeroutput>object</computeroutput> class which derives from <computeroutput>handle</computeroutput> and calls this function automatically. Returns a reference to itself. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="165" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1a010389458d06cdacb08f1e0e62f66dfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T pybind11::handle::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Attempt to cast the Python object into the given C++ type. A <computeroutput><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref></computeroutput> will be throw upon failure. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="171" column="19" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1580" bodyend="1580"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1ac487a4afc7fb27d01ce4216813c7a91c" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::handle::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Return <computeroutput>true</computeroutput> when the <computeroutput>handle</computeroutput> wraps a valid Python object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="173" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1aae1e3eb62dbe66c97c161da1dc408abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::handle::__attribute__</definition>
        <argsstring>((deprecated(&quot;Use obj1.is(obj2) instead&quot;))) bool operator</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(deprecated(&quot;Use obj1.is(obj2) instead&quot;))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Deprecated: Check that the underlying pointers are the same. Equivalent to <computeroutput>obj1 is obj2</computeroutput> in Python. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="178" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classpybind11_1_1handle_1a7c91127cb935750e0870e674f5f07249" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::handle::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1581" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1581" bodyend="1581"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>\rst Holds a reference to a Python object (no reference counting)</para>
<para>The <computeroutput>handle</computeroutput> class is a thin wrapper around an arbitrary Python object (i.e. a <computeroutput>PyObject *</computeroutput> in Python&apos;s C API). It does not perform any automatic reference counting and merely provides a basic C++ interface to various Python API functions.</para>
<para>.. seealso:: The <computeroutput>object</computeroutput> class inherits from <computeroutput>handle</computeroutput> and adds automatic reference counting features. \endrst </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="31">
        <label>pybind11::none</label>
        <link refid="classpybind11_1_1none"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>pybind11::detail::kwargs_proxy</label>
        <link refid="classpybind11_1_1detail_1_1kwargs__proxy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>pybind11::detail::object_api&lt; handle &gt;</label>
        <link refid="classpybind11_1_1detail_1_1object__api"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>pybind11::dict</label>
        <link refid="classpybind11_1_1dict"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>pybind11::buffer</label>
        <link refid="classpybind11_1_1buffer"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>pybind11::float_</label>
        <link refid="classpybind11_1_1float__"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>pybind11::detail::generic_type</label>
        <link refid="classpybind11_1_1detail_1_1generic__type"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>pybind11::args</label>
        <link refid="classpybind11_1_1args"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>pybind11::weakref</label>
        <link refid="classpybind11_1_1weakref"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>pybind11::array_t&lt; Scalar, array::forcecast|((props::row_major ? props::inner_stride :props::outer_stride)==1 ? array::c_style :(props::row_major ? props::outer_stride :props::inner_stride)==1 ? array::f_style :0)&gt;</label>
        <link refid="classpybind11_1_1array__t"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>pybind11::set</label>
        <link refid="classpybind11_1_1set"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>pybind11::function</label>
        <link refid="classpybind11_1_1function"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>pybind11::sequence</label>
        <link refid="classpybind11_1_1sequence"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>pybind11::bool_</label>
        <link refid="classpybind11_1_1bool__"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>pybind11::int_</label>
        <link refid="classpybind11_1_1int__"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>pybind11::bytes</label>
        <link refid="classpybind11_1_1bytes"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>pybind11::slice</label>
        <link refid="classpybind11_1_1slice"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>pybind11::iterable</label>
        <link refid="classpybind11_1_1iterable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>pybind11::array</label>
        <link refid="classpybind11_1_1array"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>pybind11::enum_&lt; Type &gt;</label>
        <link refid="classpybind11_1_1enum__"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>pybind11::array_t&lt; T, ExtraFlags &gt;</label>
        <link refid="classpybind11_1_1array__t"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>pybind11::str</label>
        <link refid="classpybind11_1_1str"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>pybind11::exception&lt; type &gt;</label>
        <link refid="classpybind11_1_1exception"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>pybind11::detail::pyobject_tag</label>
        <link refid="classpybind11_1_1detail_1_1pyobject__tag"/>
      </node>
      <node id="36">
        <label>pybind11::tuple</label>
        <link refid="classpybind11_1_1tuple"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>pybind11::iterator</label>
        <link refid="classpybind11_1_1iterator"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>pybind11::detail::args_proxy</label>
        <link refid="classpybind11_1_1detail_1_1args__proxy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>pybind11::object</label>
        <link refid="classpybind11_1_1object"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>pybind11::dtype</label>
        <link refid="classpybind11_1_1dtype"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>pybind11::class_&lt; type_, options &gt;</label>
        <link refid="classpybind11_1_1class__"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>pybind11::memoryview</label>
        <link refid="classpybind11_1_1memoryview"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>pybind11::kwargs</label>
        <link refid="classpybind11_1_1kwargs"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>pybind11::capsule</label>
        <link refid="classpybind11_1_1capsule"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>pybind11::list</label>
        <link refid="classpybind11_1_1list"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>pybind11::handle</label>
        <link refid="classpybind11_1_1handle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>pybind11::cpp_function</label>
        <link refid="classpybind11_1_1cpp__function"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>pybind11::module</label>
        <link refid="classpybind11_1_1module"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>pybind11::class_&lt; Type &gt;</label>
        <link refid="classpybind11_1_1class__"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>pybind11::detail::object_api&lt; handle &gt;</label>
        <link refid="classpybind11_1_1detail_1_1object__api"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>pybind11::detail::pyobject_tag</label>
        <link refid="classpybind11_1_1detail_1_1pyobject__tag"/>
      </node>
      <node id="1">
        <label>pybind11::handle</label>
        <link refid="classpybind11_1_1handle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="142" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="142" bodyend="186"/>
    <listofallmembers>
      <member refid="classpybind11_1_1handle_1aae1e3eb62dbe66c97c161da1dc408abd" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>__attribute__</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a9e40315e3b89ae491c4ff308048550ba" prot="public" virt="non-virtual" ambiguityscope="object_api&lt; handle &gt;::"><scope>pybind11::handle</scope><name>__attribute__</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>attr</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a1ed2f42e544637c80b31c05c88cb916e" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>attr</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a186bda3e95a07f59f9449ce0d050ae5e" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>begin</name></member>
      <member refid="classpybind11_1_1handle_1a010389458d06cdacb08f1e0e62f66dfc" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>cast</name></member>
      <member refid="classpybind11_1_1handle_1a7c91127cb935750e0870e674f5f07249" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>cast</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>contains</name></member>
      <member refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>dec_ref</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a011483f62a9bd3c0fb60bfc7749fc28f" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>end</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>get_type</name></member>
      <member refid="classpybind11_1_1handle_1a4ba87579a3fba33e8e35e7a7884fe998" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>handle</name></member>
      <member refid="classpybind11_1_1handle_1aa8016278dbe2e4534cfa09f688ea17ee" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>handle</name></member>
      <member refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>inc_ref</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a5107835e7630a10868373383c003100b" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>is</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>is_none</name></member>
      <member refid="classpybind11_1_1handle_1ac487a4afc7fb27d01ce4216813c7a91c" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>operator bool</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>operator()</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a5babe5939b794c3408711be7fde14ee0" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>operator*</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1ae10abab736d193f170eaa6cfbdab6d01" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>operator[]</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1a579d2eeebff07ddab98814ccbfbe2728" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>operator[]</name></member>
      <member refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>ptr</name></member>
      <member refid="classpybind11_1_1handle_1ae837f0f5edde0818cd37e92f5664ebf2" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>ptr</name></member>
      <member refid="classpybind11_1_1detail_1_1object__api_1aa1e808c7d0773561b3c552cf93d13368" prot="public" virt="non-virtual"><scope>pybind11::handle</scope><name>ref_count</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
