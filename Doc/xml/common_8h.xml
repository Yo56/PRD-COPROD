<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="common_8h" kind="file" language="C++">
    <compoundname>common.h</compoundname>
    <includes local="no">Python.h</includes>
    <includes local="no">frameobject.h</includes>
    <includes local="no">pythread.h</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstring</includes>
    <includes local="no">forward_list</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">memory</includes>
    <includes local="no">typeindex</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="buffer__info_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/buffer_info.h</includedby>
    <includedby refid="descr_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h</includedby>
    <includedby refid="options_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/options.h</includedby>
    <includedby refid="pytypes_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h</includedby>
    <includedby refid="stl__bind_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>stdexcept</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="11">
        <label>unordered_set</label>
      </node>
      <node id="3">
        <label>frameobject.h</label>
      </node>
      <node id="2">
        <label>Python.h</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="4">
        <label>pythread.h</label>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>forward_list</label>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="14">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="14">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/options.h</label>
        <link refid="options_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="18">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1instance" prot="public">pybind11::detail::instance</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1overload__hash" prot="public">pybind11::detail::overload_hash</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__hash" prot="public">pybind11::detail::type_hash</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__equal__to" prot="public">pybind11::detail::type_equal_to</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1internals" prot="public">pybind11::detail::internals</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1index__sequence" prot="public">pybind11::detail::index_sequence</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1make__index__sequence__impl" prot="public">pybind11::detail::make_index_sequence_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1make__index__sequence__impl_3_010_00_01_s_8_8_8_01_4" prot="public">pybind11::detail::make_index_sequence_impl&lt; 0, S... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1select__indices__impl" prot="public">pybind11::detail::select_indices_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1select__indices__impl_3_01index__sequence_3_01_i_prev_8_8_8_01_4_00_4c67076def0e786cc150ce0346198e52" prot="public">pybind11::detail::select_indices_impl&lt; index_sequence&lt; IPrev... &gt;, I, B, Bs... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1negation" prot="public">pybind11::detail::negation</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1void__t__impl" prot="public">pybind11::detail::void_t_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1bools" prot="public">pybind11::detail::bools</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1remove__class" prot="public">pybind11::detail::remove_class</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_4" prot="public">pybind11::detail::remove_class&lt; R(C::*)(A...)&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_01const_01_4" prot="public">pybind11::detail::remove_class&lt; R(C::*)(A...) const &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type" prot="public">pybind11::detail::intrinsic_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_01_4" prot="public">pybind11::detail::intrinsic_type&lt; const T &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_5_01_4" prot="public">pybind11::detail::intrinsic_type&lt; T * &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_01_4" prot="public">pybind11::detail::intrinsic_type&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_6_01_4" prot="public">pybind11::detail::intrinsic_type&lt; T &amp;&amp; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_0f_n_0e_4" prot="public">pybind11::detail::intrinsic_type&lt; const T[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_0f_n_0e_4" prot="public">pybind11::detail::intrinsic_type&lt; T[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1void__type" prot="public">pybind11::detail::void_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__list" prot="public">pybind11::detail::type_list</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pack__element" prot="public">pybind11::detail::pack_element</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pack__element_3_010_00_01_t_00_01_ts_8_8_8_01_4" prot="public">pybind11::detail::pack_element&lt; 0, T, Ts... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1exactly__one" prot="public">pybind11::detail::exactly_one</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1exactly__one_3_01_p_00_01_default_01_4" prot="public">pybind11::detail::exactly_one&lt; P, Default &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1deferred__type" prot="public">pybind11::detail::deferred_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__template__base__of__impl" prot="public">pybind11::detail::is_template_base_of_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__instantiation" prot="public">pybind11::detail::is_instantiation</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__instantiation_3_01_class_00_01_class_3_01_us_8_8_8_01_4_01_4" prot="public">pybind11::detail::is_instantiation&lt; Class, Class&lt; Us... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__input__iterator" prot="public">pybind11::detail::is_input_iterator</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__input__iterator_3_01_t_00_01void__t_3_01decltype_07_5std_1_1decled93b527fca1d36ccfdf39dbfce936b4" prot="public">pybind11::detail::is_input_iterator&lt; T, void_t&lt; decltype(*std::declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T &amp; &gt;())&gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1error__already__set" prot="public">pybind11::error_already_set</innerclass>
    <innerclass refid="classpybind11_1_1builtin__exception" prot="public">pybind11::builtin_exception</innerclass>
    <innerclass refid="classpybind11_1_1stop__iteration" prot="public">pybind11::stop_iteration</innerclass>
    <innerclass refid="classpybind11_1_1index__error" prot="public">pybind11::index_error</innerclass>
    <innerclass refid="classpybind11_1_1key__error" prot="public">pybind11::key_error</innerclass>
    <innerclass refid="classpybind11_1_1value__error" prot="public">pybind11::value_error</innerclass>
    <innerclass refid="classpybind11_1_1type__error" prot="public">pybind11::type_error</innerclass>
    <innerclass refid="classpybind11_1_1cast__error" prot="public">pybind11::cast_error</innerclass>
    <innerclass refid="classpybind11_1_1reference__cast__error" prot="public">pybind11::reference_cast_error</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor" prot="public">pybind11::format_descriptor</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__fmt__numeric" prot="public">pybind11::detail::is_fmt_numeric</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::is_fmt_numeric&lt; T, enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1error__scope" prot="public">pybind11::error_scope</innerclass>
    <innerclass refid="structpybind11_1_1nodelete" prot="public">pybind11::nodelete</innerclass>
    <innerclass refid="structpybind11_1_1overload__cast" prot="public">pybind11::overload_cast</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1any__container" prot="public">pybind11::detail::any_container</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail_1_1constexpr__impl">pybind11::detail::constexpr_impl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="common_8h_1a577cd817cb71b655998cad4387cdaeba" prot="public" static="no">
        <name>NAMESPACE_BEGIN</name>
        <param><defname>name</defname></param>
        <initializer>namespace name {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="13" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" prot="public" static="no">
        <name>NAMESPACE_END</name>
        <param><defname>name</defname></param>
        <initializer>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="16" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a497637b03f0a9f5ca7c96874074b620d" prot="public" static="no">
        <name>PYBIND11_EXPORT</name>
        <initializer>__attribute__ ((visibility(&quot;default&quot;)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="67" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" prot="public" static="no">
        <name>PYBIND11_NOINLINE</name>
        <initializer>__attribute__ ((noinline))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="74" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1ae4ba3bb24593b13133ae78407f466353" prot="public" static="no">
        <name>PYBIND11_DEPRECATED</name>
        <param><defname>reason</defname></param>
        <initializer>__attribute__((deprecated(reason)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="80" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1aab643d3fb98c698092d9d85f0d8a1fd2" prot="public" static="no">
        <name>PYBIND11_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="83" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a3ba8ec79d5d1b0ee1ffe85199784193f" prot="public" static="no">
        <name>PYBIND11_VERSION_MINOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="84" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1ac7b28852ceb96ca754d8f0468529324c" prot="public" static="no">
        <name>PYBIND11_VERSION_PATCH</name>
        <initializer>dev0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="85" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a05eadd9c179a396aaf7924f04d694f11" prot="public" static="no">
        <name>PYBIND11_INSTANCE_METHOD_NEW</name>
        <param><defname>ptr</defname></param>
        <param><defname>class_</defname></param>
        <initializer>PyMethod_New(ptr, nullptr, class_)</initializer>
        <briefdescription>
<para>Include Python header, disable linking to pythonX_d.lib on Windows in debug mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Compatibility macros for various Python versions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="158" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1ac2aa5f531d7405461119b256eaf0141a" prot="public" static="no">
        <name>PYBIND11_INSTANCE_METHOD_CHECK</name>
        <initializer>PyMethod_Check</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="159" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a8d797ff274d1aab907997d9be7e944c1" prot="public" static="no">
        <name>PYBIND11_INSTANCE_METHOD_GET_FUNCTION</name>
        <initializer>PyMethod_GET_FUNCTION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="160" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a88e12d91c83488db6594602d276f6ebb" prot="public" static="no">
        <name>PYBIND11_BYTES_CHECK</name>
        <initializer>PyString_Check</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="161" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a77c80e7232ce873995a75ad22a6f876c" prot="public" static="no">
        <name>PYBIND11_BYTES_FROM_STRING</name>
        <initializer>PyString_FromString</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="162" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a2035228df69404443c62a841a7932fee" prot="public" static="no">
        <name>PYBIND11_BYTES_FROM_STRING_AND_SIZE</name>
        <initializer>PyString_FromStringAndSize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="163" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a639f3ae94f69a47c9e269495e0da807c" prot="public" static="no">
        <name>PYBIND11_BYTES_AS_STRING_AND_SIZE</name>
        <initializer>PyString_AsStringAndSize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="164" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1aafa0134475230ea63e9d8e5562642049" prot="public" static="no">
        <name>PYBIND11_BYTES_AS_STRING</name>
        <initializer>PyString_AsString</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="165" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a7f493411293fa55624010c31455d30ab" prot="public" static="no">
        <name>PYBIND11_BYTES_SIZE</name>
        <initializer>PyString_Size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="166" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a8b4988058713dfd2429d330586a9f334" prot="public" static="no">
        <name>PYBIND11_LONG_CHECK</name>
        <param><defname>o</defname></param>
        <initializer>(PyInt_Check(o) || PyLong_Check(o))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="167" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a1875e825dd4cdcb110d87a5ad227f8d6" prot="public" static="no">
        <name>PYBIND11_LONG_AS_LONGLONG</name>
        <param><defname>o</defname></param>
        <initializer>(PyInt_Check(o) ? (long long) PyLong_AsLong(o) : PyLong_AsLongLong(o))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="168" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1aa4f09eb05629a1d670f0347e6fdf3f29" prot="public" static="no">
        <name>PYBIND11_BYTES_NAME</name>
        <initializer>&quot;str&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="169" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a4490c1733364f04fcea017da2eb38d38" prot="public" static="no">
        <name>PYBIND11_STRING_NAME</name>
        <initializer>&quot;unicode&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="170" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1af86a8b4554e6b97571555ea879ce7620" prot="public" static="no">
        <name>PYBIND11_SLICE_OBJECT</name>
        <initializer>PySliceObject</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="171" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a38198f69a81b096248132d08229921dc" prot="public" static="no">
        <name>PYBIND11_FROM_STRING</name>
        <initializer>PyString_FromString</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="172" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a2b41a4f15526b8c6346dc68f9998d0e7" prot="public" static="no">
        <name>PYBIND11_STR_TYPE</name>
        <initializer>::<ref refid="classpybind11_1_1bytes" kindref="compound">pybind11::bytes</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="173" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a06340dacf62267ef071869964438877f" prot="public" static="no">
        <name>PYBIND11_PLUGIN_IMPL</name>
        <param><defname>name</defname></param>
        <initializer>    static PyObject *pybind11_init_wrapper();               \
    extern &quot;C&quot; PYBIND11_EXPORT void init##name() {          \
        (void)pybind11_init_wrapper();                      \
    }                                                       \
    PyObject *pybind11_init_wrapper()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="174" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" prot="public" static="no">
        <name>PYBIND11_TRY_NEXT_OVERLOAD</name>
        <initializer>((PyObject *) 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="189" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1ab822e781bd1668e8bd7bd3de1b610978" prot="public" static="no">
        <name>PYBIND11_STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="190" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a596d1fb2b5443455998398dbf44b35da" prot="public" static="no">
        <name>PYBIND11_TOSTRING</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="common_8h_1ab822e781bd1668e8bd7bd3de1b610978" kindref="member">PYBIND11_STRINGIFY</ref>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="191" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1ad4044f737821eb5e0398e5f0139d621e" prot="public" static="no">
        <name>PYBIND11_INTERNALS_ID</name>
        <initializer>    &quot;__pybind11_&quot; \
    PYBIND11_TOSTRING(<ref refid="common_8h_1aab643d3fb98c698092d9d85f0d8a1fd2" kindref="member">PYBIND11_VERSION_MAJOR</ref>) &quot;_&quot; PYBIND11_TOSTRING(<ref refid="common_8h_1a3ba8ec79d5d1b0ee1ffe85199784193f" kindref="member">PYBIND11_VERSION_MINOR</ref>) &quot;__&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="192" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a5753c23bc318219589feebc68c847cec" prot="public" static="no">
        <name>PYBIND11_PLUGIN</name>
        <param><defname>name</defname></param>
        <initializer>    <ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(&quot;PYBIND11_PLUGIN is deprecated, use <ref refid="xlntpyarrow_8lib_8cpp_1aaeb203fa26ba42647b94c211a2bac9fd" kindref="member">PYBIND11_MODULE</ref>&quot;)  \
    static PyObject *pybind11_init();                                          \
    <ref refid="common_8h_1a06340dacf62267ef071869964438877f" kindref="member">PYBIND11_PLUGIN_IMPL</ref>(name) {                                               \
        int major, minor;                                                      \
        if (sscanf(Py_GetVersion(), &quot;%i.%i&quot;, &amp;major, &amp;minor) != 2) {           \
            PyErr_SetString(PyExc_ImportError, &quot;Can&apos;t parse Python version.&quot;); \
            return nullptr;                                                    \
        } else if (major != PY_MAJOR_VERSION || minor != PY_MINOR_VERSION) {   \
            PyErr_Format(PyExc_ImportError,                                    \
                         &quot;Python version mismatch: module was compiled for &quot;   \
                         &quot;version %i.%i, <ref refid="string__to__double_8cpp_1a99f0ea2bf528324076935572afedd82a" kindref="member">while</ref> the interpreter is running &quot;    \
                         &quot;version %i.%i.&quot;, PY_MAJOR_VERSION, PY_MINOR_VERSION, \
                         major, minor);                                        \
            return nullptr;                                                    \
        }                                                                      \
        try {                                                                  \
            return pybind11_init();                                            \
        } catch (<ref refid="classpybind11_1_1error__already__set" kindref="compound">pybind11::error_already_set</ref> &amp;e) {                             \
            e.clear();                                                         \
            PyErr_SetString(PyExc_ImportError, e.what());                      \
            return nullptr;                                                    \
        } catch (const std::exception &amp;e) {                                    \
            PyErr_SetString(PyExc_ImportError, e.what());                      \
            return nullptr;                                                    \
        }                                                                      \
    }                                                                          \
    PyObject *pybind11_init()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Deprecated in favor of PYBIND11_MODULE***</para>
<para>This macro creates the entry point that will be invoked when the Python interpreter imports a plugin library. Please create a <computeroutput>module</computeroutput> in the function body and return the pointer to its underlying Python object at the end.</para>
<para>.. code-block:: cpp <verbatim>PYBIND11_PLUGIN(example) {
    pybind11::module m(&quot;example&quot;, &quot;pybind11 example plugin&quot;);
</verbatim> / Set up bindings here return m.ptr(); } \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="210" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a991baae3535d684a3df1a116d479c33f" prot="public" static="no">
        <name>PYBIND11_MODULE</name>
        <param><defname>name</defname></param>
        <param><defname>variable</defname></param>
        <initializer>    static void pybind11_init_##name(<ref refid="classpybind11_1_1module" kindref="compound">pybind11::module</ref> &amp;);                      \
    <ref refid="common_8h_1a06340dacf62267ef071869964438877f" kindref="member">PYBIND11_PLUGIN_IMPL</ref>(name) {                                               \
        int major, minor;                                                      \
        if (sscanf(Py_GetVersion(), &quot;%i.%i&quot;, &amp;major, &amp;minor) != 2) {           \
            PyErr_SetString(PyExc_ImportError, &quot;Can&apos;t parse Python version.&quot;); \
            return nullptr;                                                    \
        } else if (major != PY_MAJOR_VERSION || minor != PY_MINOR_VERSION) {   \
            PyErr_Format(PyExc_ImportError,                                    \
                         &quot;Python version mismatch: module was compiled for &quot;   \
                         &quot;version %i.%i, <ref refid="string__to__double_8cpp_1a99f0ea2bf528324076935572afedd82a" kindref="member">while</ref> the interpreter is running &quot;    \
                         &quot;version %i.%i.&quot;, PY_MAJOR_VERSION, PY_MINOR_VERSION, \
                         major, minor);                                        \
            return nullptr;                                                    \
        }                                                                      \
        auto m = <ref refid="classpybind11_1_1module" kindref="compound">pybind11::module</ref>(#name);                                      \
        try {                                                                  \
            pybind11_init_##name(m);                                           \
            return m.ptr();                                                    \
        } catch (<ref refid="classpybind11_1_1error__already__set" kindref="compound">pybind11::error_already_set</ref> &amp;e) {                             \
            e.clear();                                                         \
            PyErr_SetString(PyExc_ImportError, e.what());                      \
            return nullptr;                                                    \
        } catch (const std::exception &amp;e) {                                    \
            PyErr_SetString(PyExc_ImportError, e.what());                      \
            return nullptr;                                                    \
        }                                                                      \
    }                                                                          \
    void pybind11_init_##name(<ref refid="classpybind11_1_1module" kindref="compound">pybind11::module</ref> &amp;variable)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst This macro creates the entry point that will be invoked when the Python interpreter imports an extension module. The module name is given as the fist argument and it should not be in quotes. The second macro argument defines a variable of type <computeroutput>py::module</computeroutput> which can be used to initialize the module.</para>
<para>.. code-block:: cpp <verbatim>PYBIND11_MODULE(example, m) {
    m.doc() = &quot;pybind11 example module&quot;;
</verbatim> Add bindings here m.def(&quot;foo&quot;, []() { return &quot;Hello, World!&quot;; }); } \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="256" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a3d7c7853f6ac53a5a12c09c57dbf9ce4" prot="public" static="no">
        <name>PYBIND11_EXPAND_SIDE_EFFECTS</name>
        <param><defname>PATTERN</defname></param>
        <initializer><ref refid="namespacepybind11_1_1detail_1a372a80fcaa3d983e7765574d31538859" kindref="member">pybind11::detail::expand_side_effects</ref>{ ((PATTERN), void(), false)..., false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="667" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a905970a65fc4f349773eff84c9980e3a" prot="public" static="no">
        <name>PYBIND11_RUNTIME_EXCEPTION</name>
        <param><defname>name</defname></param>
        <param><defname>type</defname></param>
        <initializer>    class name : public builtin_exception { public: \
        using builtin_exception::builtin_exception; \
        name() : name(&quot;&quot;) { } \
        void set_error() const override { PyErr_SetString(type, what()); } \
    };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="739" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/common.h<sp/>--<sp/>Basic<sp/>macros</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NAMESPACE_BEGIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NAMESPACE_BEGIN(name)<sp/>namespace<sp/>name<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NAMESPACE_END)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NAMESPACE_END(name)<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__cplusplus<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PYBIND11_CPP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>__cplusplus<sp/>&gt;<sp/>201402L<sp/></highlight><highlight class="comment">/*<sp/>Temporary:<sp/>should<sp/>be<sp/>updated<sp/>to<sp/>&gt;=<sp/>the<sp/>final<sp/>C++17<sp/>value<sp/>once<sp/>known<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PYBIND11_CPP17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>sets<sp/>_MSVC_LANG<sp/>rather<sp/>than<sp/>__cplusplus<sp/>(supposedly<sp/>until<sp/>the<sp/>standard<sp/>is<sp/>fully<sp/>implemented)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>_MSVC_LANG<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PYBIND11_CPP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>_MSVC_LANG<sp/>&gt;<sp/>201402L<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1910</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PYBIND11_CPP17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiler<sp/>version<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__INTEL_COMPILER<sp/>&lt;<sp/>1500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>pybind11<sp/>requires<sp/>Intel<sp/>C++<sp/>compiler<sp/>v15<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(__apple_build_version__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__clang_major__<sp/>&lt;<sp/>3<sp/>||<sp/>(__clang_major__<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>__clang_minor__<sp/>&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>pybind11<sp/>requires<sp/>clang<sp/>3.3<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apple<sp/>changes<sp/>clang<sp/>version<sp/>macros<sp/>to<sp/>its<sp/>Xcode<sp/>version;<sp/>the<sp/>first<sp/>Xcode<sp/>release<sp/>based<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(upstream)<sp/>clang<sp/>3.3<sp/>was<sp/>Xcode<sp/>5:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__clang_major__<sp/>&lt;<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>pybind11<sp/>requires<sp/>Xcode/clang<sp/>5.0<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUG__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__GNUC__<sp/>&lt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&lt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>pybind11<sp/>requires<sp/>gcc<sp/>4.8<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pybind<sp/>hits<sp/>various<sp/>compiler<sp/>bugs<sp/>in<sp/>2015u2<sp/>and<sp/>earlier,<sp/>and<sp/>also<sp/>makes<sp/>use<sp/>of<sp/>some<sp/>stl<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>std::negation)<sp/>added<sp/>in<sp/>2015u3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>_MSC_FULL_VER<sp/>&lt;<sp/>190024210</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/>pybind11<sp/>requires<sp/>MSVC<sp/>2015<sp/>update<sp/>3<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(PYBIND11_EXPORT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PYBIND11_EXPORT<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="common_8h_1a497637b03f0a9f5ca7c96874074b620d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PYBIND11_EXPORT<sp/>__attribute__<sp/>((visibility(&quot;default&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PYBIND11_NOINLINE<sp/>__declspec(noinline)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PYBIND11_NOINLINE<sp/>__attribute__<sp/>((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYBIND11_CPP14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PYBIND11_DEPRECATED(reason)<sp/>[[deprecated(reason)]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PYBIND11_DEPRECATED(reason)<sp/>__attribute__((deprecated(reason)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="common_8h_1aab643d3fb98c698092d9d85f0d8a1fd2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="common_8h_1a3ba8ec79d5d1b0ee1ffe85199784193f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_VERSION_MINOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="common_8h_1ac7b28852ceb96ca754d8f0468529324c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_VERSION_PATCH<sp/>dev0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(PY_MAJOR_VERSION<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>PY_MINOR_VERSION<sp/>&lt;<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>HAVE_ROUND<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4510<sp/>4610<sp/>4512<sp/>4005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PYBIND11_DEBUG_MARKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Python.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;frameobject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pythread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>(defined(min)<sp/>||<sp/>defined(max))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>Macro<sp/>clash<sp/>with<sp/>min<sp/>and<sp/>max<sp/>--<sp/>define<sp/>NOMINMAX<sp/>when<sp/>compiling<sp/>your<sp/>program<sp/>on<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(isalnum)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>isalnum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>isalpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>islower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>isspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>isupper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>tolower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>toupper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(PYBIND11_DEBUG_MARKER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>PYBIND11_DEBUG_MARKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;forward_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INSTANCE_METHOD_NEW(ptr,<sp/>class_)<sp/>PyInstanceMethod_New(ptr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INSTANCE_METHOD_CHECK<sp/>PyInstanceMethod_Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INSTANCE_METHOD_GET_FUNCTION<sp/>PyInstanceMethod_GET_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_CHECK<sp/>PyBytes_Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_FROM_STRING<sp/>PyBytes_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_FROM_STRING_AND_SIZE<sp/>PyBytes_FromStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_AS_STRING_AND_SIZE<sp/>PyBytes_AsStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_AS_STRING<sp/>PyBytes_AsString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_SIZE<sp/>PyBytes_Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_LONG_CHECK(o)<sp/>PyLong_Check(o)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_LONG_AS_LONGLONG(o)<sp/>PyLong_AsLongLong(o)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_NAME<sp/>&quot;bytes&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_STRING_NAME<sp/>&quot;str&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_SLICE_OBJECT<sp/>PyObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_FROM_STRING<sp/>PyUnicode_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_STR_TYPE<sp/>::pybind11::str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_PLUGIN_IMPL(name)<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>PYBIND11_EXPORT<sp/>PyObject<sp/>*PyInit_##name()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="common_8h_1a05eadd9c179a396aaf7924f04d694f11" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INSTANCE_METHOD_NEW(ptr,<sp/>class_)<sp/>PyMethod_New(ptr,<sp/>nullptr,<sp/>class_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="common_8h_1ac2aa5f531d7405461119b256eaf0141a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INSTANCE_METHOD_CHECK<sp/>PyMethod_Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="common_8h_1a8d797ff274d1aab907997d9be7e944c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INSTANCE_METHOD_GET_FUNCTION<sp/>PyMethod_GET_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="common_8h_1a88e12d91c83488db6594602d276f6ebb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_CHECK<sp/>PyString_Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="common_8h_1a77c80e7232ce873995a75ad22a6f876c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_FROM_STRING<sp/>PyString_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="common_8h_1a2035228df69404443c62a841a7932fee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_FROM_STRING_AND_SIZE<sp/>PyString_FromStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="common_8h_1a639f3ae94f69a47c9e269495e0da807c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_AS_STRING_AND_SIZE<sp/>PyString_AsStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="common_8h_1aafa0134475230ea63e9d8e5562642049" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_AS_STRING<sp/>PyString_AsString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="common_8h_1a7f493411293fa55624010c31455d30ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_SIZE<sp/>PyString_Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="common_8h_1a8b4988058713dfd2429d330586a9f334" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_LONG_CHECK(o)<sp/>(PyInt_Check(o)<sp/>||<sp/>PyLong_Check(o))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="common_8h_1a1875e825dd4cdcb110d87a5ad227f8d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_LONG_AS_LONGLONG(o)<sp/>(PyInt_Check(o)<sp/>?<sp/>(long<sp/>long)<sp/>PyLong_AsLong(o)<sp/>:<sp/>PyLong_AsLongLong(o))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="common_8h_1aa4f09eb05629a1d670f0347e6fdf3f29" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BYTES_NAME<sp/>&quot;str&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="common_8h_1a4490c1733364f04fcea017da2eb38d38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_STRING_NAME<sp/>&quot;unicode&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="common_8h_1af86a8b4554e6b97571555ea879ce7620" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_SLICE_OBJECT<sp/>PySliceObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="common_8h_1a38198f69a81b096248132d08229921dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_FROM_STRING<sp/>PyString_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="common_8h_1a2b41a4f15526b8c6346dc68f9998d0e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_STR_TYPE<sp/>::pybind11::bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="common_8h_1a06340dacf62267ef071869964438877f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_PLUGIN_IMPL(name)<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PyObject<sp/>*pybind11_init_wrapper();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>PYBIND11_EXPORT<sp/>void<sp/>init##name()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)pybind11_init_wrapper();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*pybind11_init_wrapper()</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x03050000<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03050200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Py_atomic_address<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value;<sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_DATA(_Py_atomic_address)<sp/>_PyThreadState_Current;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_TRY_NEXT_OVERLOAD<sp/>((PyObject<sp/>*)<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>special<sp/>failure<sp/>return<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="common_8h_1ab822e781bd1668e8bd7bd3de1b610978" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_STRINGIFY(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="common_8h_1a596d1fb2b5443455998398dbf44b35da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_TOSTRING(x)<sp/>PYBIND11_STRINGIFY(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="common_8h_1ad4044f737821eb5e0398e5f0139d621e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INTERNALS_ID<sp/>&quot;__pybind11_&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>PYBIND11_TOSTRING(PYBIND11_VERSION_MAJOR)<sp/>&quot;_&quot;<sp/>PYBIND11_TOSTRING(PYBIND11_VERSION_MINOR)<sp/>&quot;__&quot;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="common_8h_1a5753c23bc318219589feebc68c847cec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_PLUGIN(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_DEPRECATED(&quot;PYBIND11_PLUGIN<sp/>is<sp/>deprecated,<sp/>use<sp/>PYBIND11_MODULE&quot;</highlight><highlight class="normal">)<sp/><sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>PyObject<sp/>*pybind11_init();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>PYBIND11_PLUGIN_IMPL(name)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>major,<sp/>minor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sscanf(Py_GetVersion(),<sp/>&quot;%i.%i&quot;,<sp/>&amp;major,<sp/>&amp;minor)<sp/>!=<sp/>2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>&quot;Can&apos;t<sp/>parse<sp/>Python<sp/>version.&quot;);<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(major<sp/>!=<sp/>PY_MAJOR_VERSION<sp/>||<sp/>minor<sp/>!=<sp/>PY_MINOR_VERSION)<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ImportError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Python<sp/>version<sp/>mismatch:<sp/>module<sp/>was<sp/>compiled<sp/>for<sp/>&quot;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;version<sp/>%i.%i,<sp/>while<sp/>the<sp/>interpreter<sp/>is<sp/>running<sp/>&quot;<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;version<sp/>%i.%i.&quot;,<sp/>PY_MAJOR_VERSION,<sp/>PY_MINOR_VERSION,<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>major,<sp/>minor);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pybind11_init();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(pybind11::error_already_set<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.clear();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>e.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>std::exception<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>e.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*pybind11_init()</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="common_8h_1a991baae3535d684a3df1a116d479c33f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MODULE(name,<sp/>variable)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>pybind11_init_##name(pybind11::module<sp/>&amp;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_PLUGIN_IMPL(name)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>major,<sp/>minor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sscanf(Py_GetVersion(),<sp/>&quot;%i.%i&quot;</highlight><highlight class="normal">,<sp/>&amp;major,<sp/>&amp;minor)<sp/>!=<sp/>2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>&quot;Can&apos;t<sp/>parse<sp/>Python<sp/>version.&quot;);<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(major<sp/>!=<sp/>PY_MAJOR_VERSION<sp/>||<sp/>minor<sp/>!=<sp/>PY_MINOR_VERSION)<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ImportError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Python<sp/>version<sp/>mismatch:<sp/>module<sp/>was<sp/>compiled<sp/>for<sp/>&quot;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;version<sp/>%i.%i,<sp/>while<sp/>the<sp/>interpreter<sp/>is<sp/>running<sp/>&quot;<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;version<sp/>%i.%i.&quot;,<sp/>PY_MAJOR_VERSION,<sp/>PY_MINOR_VERSION,<sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>major,<sp/>minor);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>m<sp/>=<sp/>pybind11::module(#name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_init_##name(m);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m.ptr();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(pybind11::error_already_set<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.clear();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>e.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>std::exception<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>e.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>pybind11_init_##name(pybind11::module<sp/>&amp;variable)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" refkind="member"><highlight class="normal">using<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>=<sp/>Py_ssize_t;</highlight></codeline>
<codeline lineno="290" refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" refkind="member"><highlight class="normal">using<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>=<sp/><ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" refkind="member"><highlight class="normal">enum<sp/>class<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>:<sp/><ref refid="namespaceutf8_1abe793b552fabe390d134b97ab81d2c7f" kindref="member">uint8_t</ref><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca2bd9c0ed00116be1258e0cc66617d7c8" kindref="member">automatic</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca1c1628c22d69b3b9bac4b5c3674852e3" kindref="member">automatic_reference</ref>,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca5dc4bb19391b04351f49572019c628c0" kindref="member">take_ownership</ref>,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref>,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69cab8af13ea9c8fe890c9979a1fa8dbde22" kindref="member">reference</ref>,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69caa39bc0596cb125c1605a78fbd287df7f" kindref="member">reference_internal</ref></highlight></codeline>
<codeline lineno="342"><highlight class="normal">};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>1)<sp/>?<sp/>k<sp/>:<sp/>log2(n<sp/>&gt;&gt;<sp/>1,<sp/>k<sp/>+<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>size<sp/>as<sp/>a<sp/>multiple<sp/>of<sp/>sizeof(void<sp/>*),<sp/>rounded<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_in_ptrs(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>((s<sp/>-<sp/>1)<sp/>&gt;&gt;<sp/>log2(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)));<sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="namespacepybind11_1_1detail_1af3a790a9d6af602df7dad7c64d9c539b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacepybind11_1_1detail_1af3a790a9d6af602df7dad7c64d9c539b" kindref="member">error_string</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="namespacepybind11_1_1detail_1a4917e6f04e358a58f42892a941be3ce3" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a4917e6f04e358a58f42892a941be3ce3" kindref="member">instance_simple_holder_in_ptrs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::shared_ptr&lt;int&gt;)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::unique_ptr&lt;int&gt;),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pybind<sp/>assumes<sp/>std::shared_ptrs<sp/>are<sp/>at<sp/>least<sp/>as<sp/>big<sp/>as<sp/>std::unique_ptrs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_in_ptrs(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::shared_ptr&lt;int&gt;));</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_info;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">value_and_holder;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="structpybind11_1_1detail_1_1instance" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374" refid="structpybind11_1_1detail_1_1instance_1acacd8310d732420ce47f63faafc580c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*simple_value_holder[1<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a4917e6f04e358a58f42892a941be3ce3" kindref="member">instance_simple_holder_in_ptrs</ref>()];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="376" refid="structpybind11_1_1detail_1_1instance_1adcbbf0bcd5cdf7797eff237fdac072fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="structpybind11_1_1detail_1_1instance_1adcbbf0bcd5cdf7797eff237fdac072fe" kindref="member">values_and_holders</ref>;</highlight></codeline>
<codeline lineno="377" refid="structpybind11_1_1detail_1_1instance_1a42aa25094b97dbba7d0913c5f5a1edf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1instance_1a42aa25094b97dbba7d0913c5f5a1edf4" kindref="member">holder_constructed</ref>;</highlight></codeline>
<codeline lineno="378" refid="structpybind11_1_1detail_1_1instance_1a6f2189faa41ccf0bb0a88d89b431cb50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>nonsimple;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="381" refid="structpybind11_1_1detail_1_1instance_1a3ad16c93d8c6a53b14f269ab4745c2c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1instance_1a3ad16c93d8c6a53b14f269ab4745c2c4" kindref="member">weakrefs</ref>;</highlight></codeline>
<codeline lineno="383" refid="structpybind11_1_1detail_1_1instance_1a8a2005f2b03490c24273ac666219fe90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1instance_1a8a2005f2b03490c24273ac666219fe90" kindref="member">owned</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="403" refid="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" kindref="member">simple_layout</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="405" refid="structpybind11_1_1detail_1_1instance_1acad9708259eee278d8f2743794acd71e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1instance_1acad9708259eee278d8f2743794acd71e" kindref="member">simple_holder_constructed</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="407" refid="structpybind11_1_1detail_1_1instance_1a63d97cb91e33886f8220c690f02ac760" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1instance_1a63d97cb91e33886f8220c690f02ac760" kindref="member">has_patients</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="structpybind11_1_1detail_1_1instance_1a4e87038aac7ab30d4fe6d55eeecdb28e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1instance_1a4e87038aac7ab30d4fe6d55eeecdb28e" kindref="member">allocate_layout</ref>();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="structpybind11_1_1detail_1_1instance_1ad702c1154fc949ef835ad01d8431b0f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1instance_1ad702c1154fc949ef835ad01d8431b0f1" kindref="member">deallocate_layout</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="structpybind11_1_1detail_1_1instance_1af4572097604480baa6e50178ff138193" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/><ref refid="structpybind11_1_1detail_1_1instance_1af4572097604480baa6e50178ff138193" kindref="member">get_value_and_holder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref><sp/>*find_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">static_assert(std::is_standard_layout&lt;instance&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>`pybind11::detail::instance`<sp/>is<sp/>not<sp/>standard<sp/>layout!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="structpybind11_1_1detail_1_1overload__hash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1overload__hash" kindref="compound">overload_hash</ref><sp/>{</highlight></codeline>
<codeline lineno="423" refid="structpybind11_1_1detail_1_1overload__hash_1a35fee45ba96472f1709fc15ca9e0b4c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1overload__hash_1a35fee45ba96472f1709fc15ca9e0b4c2" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>PyObject<sp/>*,<sp/>const<sp/>char<sp/>*&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>std::hash&lt;const<sp/>void<sp/>*&gt;()(v.first);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>^=<sp/>std::hash&lt;const<sp/>void<sp/>*&gt;()(v.second)<sp/><sp/>+<sp/>0x9e3779b9<sp/>+<sp/>(value&lt;&lt;6)<sp/>+<sp/>(value&gt;&gt;2);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Python<sp/>loads<sp/>modules<sp/>by<sp/>default<sp/>with<sp/>dlopen<sp/>with<sp/>the<sp/>RTLD_LOCAL<sp/>flag;<sp/>under<sp/>libc++<sp/>and<sp/>possibly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>stls,<sp/>this<sp/>means<sp/>`typeid(A)`<sp/>from<sp/>one<sp/>module<sp/>won&apos;t<sp/>equal<sp/>`typeid(A)`<sp/>from<sp/>another<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>when<sp/>`A`<sp/>is<sp/>the<sp/>same,<sp/>non-hidden-visibility<sp/>type<sp/>(e.g.<sp/>from<sp/>a<sp/>common<sp/>include).<sp/><sp/>Under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stdlibc++,<sp/>this<sp/>doesn&apos;t<sp/>happen:<sp/>equality<sp/>and<sp/>the<sp/>type_index<sp/>hash<sp/>are<sp/>based<sp/>on<sp/>the<sp/>type<sp/>name,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>works.<sp/><sp/>If<sp/>not<sp/>under<sp/>a<sp/>known-good<sp/>stl,<sp/>provide<sp/>our<sp/>own<sp/>name-based<sp/>hasher<sp/>and<sp/>equality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>that<sp/>use<sp/>the<sp/>type<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GLIBCXX__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3379c11ceb77989070a4613ddad7da06" kindref="member">same_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type_hash<sp/>=<sp/>std::hash&lt;std::type_index&gt;;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type_equal_to<sp/>=<sp/>std::equal_to&lt;std::type_index&gt;;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="namespacepybind11_1_1detail_1a3379c11ceb77989070a4613ddad7da06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3379c11ceb77989070a4613ddad7da06" kindref="member">same_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.name()<sp/>==<sp/>rhs.name()<sp/>||</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strcmp(lhs.name(),<sp/>rhs.name())<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445" refid="structpybind11_1_1detail_1_1type__hash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__hash" kindref="compound">type_hash</ref><sp/>{</highlight></codeline>
<codeline lineno="446" refid="structpybind11_1_1detail_1_1type__hash_1ac74f104309db90a5ed8e9b1752b9d7be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__hash_1ac74f104309db90a5ed8e9b1752b9d7be" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_index<sp/>&amp;t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref><sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>t.name();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*ptr++))</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref><sp/>=<sp/>(<ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref><sp/>*<sp/>33)<sp/>^<sp/>c;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal">};</highlight></codeline>
<codeline lineno="454" refid="structpybind11_1_1detail_1_1type__equal__to" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__equal__to" kindref="compound">type_equal_to</ref><sp/>{</highlight></codeline>
<codeline lineno="455" refid="structpybind11_1_1detail_1_1type__equal__to_1a7f9573a142432ad6210d861ed743a642" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__equal__to_1a7f9573a142432ad6210d861ed743a642" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_index<sp/>&amp;lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_index<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.name()<sp/>==<sp/>rhs.name()<sp/>||</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strcmp(lhs.name(),<sp/>rhs.name())<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal">};</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>value_type&gt;</highlight></codeline>
<codeline lineno="463" refid="namespacepybind11_1_1detail_1ab290ef99c5e3c87236b1fec3c277c6e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ab290ef99c5e3c87236b1fec3c277c6e4" kindref="member">type_map</ref><sp/>=<sp/>std::unordered_map&lt;std::type_index,<sp/>value_type,<sp/>type_hash,<sp/>type_equal_to&gt;;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="structpybind11_1_1detail_1_1internals" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>{</highlight></codeline>
<codeline lineno="467" refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ab290ef99c5e3c87236b1fec3c277c6e4" kindref="member">type_map&lt;void *&gt;</ref><sp/><ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>;<sp/></highlight><highlight class="comment">//<sp/>std::type_index<sp/>-&gt;<sp/>type_info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;PyTypeObject<sp/>*,<sp/>std::vector&lt;type_info<sp/>*&gt;&gt;<sp/><ref refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" kindref="member">registered_types_py</ref>;<sp/></highlight><highlight class="comment">//<sp/>PyTypeObject*<sp/>-&gt;<sp/>base<sp/>type_info(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="structpybind11_1_1detail_1_1internals_1a52c01de2ba25ab667539a9fb01e7defe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_multimap&lt;const<sp/>void<sp/>*,<sp/>instance*&gt;<sp/><ref refid="structpybind11_1_1detail_1_1internals_1a52c01de2ba25ab667539a9fb01e7defe" kindref="member">registered_instances</ref>;<sp/></highlight><highlight class="comment">//<sp/>void<sp/>*<sp/>-&gt;<sp/>instance*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="structpybind11_1_1detail_1_1internals_1afa24a87f87aee7bd7666fa31dac5e529" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_set&lt;std::pair&lt;const<sp/>PyObject<sp/>*,<sp/>const<sp/>char<sp/>*&gt;,<sp/><ref refid="structpybind11_1_1detail_1_1overload__hash" kindref="compound">overload_hash</ref>&gt;<sp/><ref refid="structpybind11_1_1detail_1_1internals_1afa24a87f87aee7bd7666fa31dac5e529" kindref="member">inactive_overload_cache</ref>;</highlight></codeline>
<codeline lineno="471" refid="structpybind11_1_1detail_1_1internals_1aff8f17a57c8c8bc398a7bc14e0c1199d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ab290ef99c5e3c87236b1fec3c277c6e4" kindref="member">type_map</ref>&lt;std::vector&lt;bool<sp/>(*)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;)&gt;&gt;<sp/>direct_conversions;</highlight></codeline>
<codeline lineno="472" refid="structpybind11_1_1detail_1_1internals_1a20763dcb7302528068f8289edd4ea9d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>PyObject<sp/>*,<sp/>std::vector&lt;PyObject<sp/>*&gt;&gt;<sp/><ref refid="structpybind11_1_1detail_1_1internals_1a20763dcb7302528068f8289edd4ea9d7" kindref="member">patients</ref>;</highlight></codeline>
<codeline lineno="473" refid="structpybind11_1_1detail_1_1internals_1a3d4d8868728159a959ad949e276df796" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::forward_list&lt;void<sp/>(*)<sp/>(std::exception_ptr)&gt;<sp/>registered_exception_translators;</highlight></codeline>
<codeline lineno="474" refid="structpybind11_1_1detail_1_1internals_1a6a543db2d1d11952560031723aa542e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>void<sp/>*&gt;<sp/><ref refid="structpybind11_1_1detail_1_1internals_1a6a543db2d1d11952560031723aa542e2" kindref="member">shared_data</ref>;<sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>data<sp/>to<sp/>be<sp/>shared<sp/>across<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="structpybind11_1_1detail_1_1internals_1abd1e008d90435e3f43622d78751a9dda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PyObject<sp/>*&gt;<sp/><ref refid="structpybind11_1_1detail_1_1internals_1abd1e008d90435e3f43622d78751a9dda" kindref="member">loader_patient_stack</ref>;<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>`loader_life_support`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="structpybind11_1_1detail_1_1internals_1a3fb3b0e6b890c1f11b3e85b061a0023a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*<ref refid="structpybind11_1_1detail_1_1internals_1a3fb3b0e6b890c1f11b3e85b061a0023a" kindref="member">static_property_type</ref>;</highlight></codeline>
<codeline lineno="477" refid="structpybind11_1_1detail_1_1internals_1a19dc621a948379dcd41195d906211de4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*<ref refid="structpybind11_1_1detail_1_1internals_1a19dc621a948379dcd41195d906211de4" kindref="member">default_metaclass</ref>;</highlight></codeline>
<codeline lineno="478" refid="structpybind11_1_1detail_1_1internals_1ab8f874364d8be98700e06109e38542d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1internals_1ab8f874364d8be98700e06109e38542d5" kindref="member">instance_base</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WITH_THREAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(PyThread_create_key())<sp/>tstate<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Usually<sp/>an<sp/>int<sp/>but<sp/>a<sp/>long<sp/>on<sp/>Cygwin64<sp/>with<sp/>Python<sp/>3.x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>PyInterpreterState<sp/>*istate<sp/>=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor">#if<sp/>defined(PYBIND11_CPP14)<sp/>&amp;&amp;<sp/>(!defined(_MSC_VER)<sp/>||<sp/>_MSC_VER<sp/>&gt;=<sp/>1910)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">std::enable_if_t</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">std::conditional_t</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ada18e66a8c736bd49e83f6dad6b39af5" kindref="member">std::remove_cv_t</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">std::remove_reference_t</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::enable_if&lt;B, T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="496" refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::conditional&lt;B, T, F&gt;::type</ref>;</highlight></codeline>
<codeline lineno="497" refid="namespacepybind11_1_1detail_1ada18e66a8c736bd49e83f6dad6b39af5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ada18e66a8c736bd49e83f6dad6b39af5" kindref="member">remove_cv_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::remove_cv&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="498" refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::remove_reference&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor">#if<sp/>defined(PYBIND11_CPP14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::index_sequence;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">std::make_index_sequence</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="structpybind11_1_1detail_1_1index__sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref><sp/><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="507" refid="structpybind11_1_1detail_1_1make__index__sequence__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>...S&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1make__index__sequence__impl" kindref="compound">make_index_sequence_impl</ref><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1make__index__sequence__impl" kindref="compound">make_index_sequence_impl</ref><sp/>&lt;N<sp/>-<sp/>1,<sp/>N<sp/>-<sp/>1,<sp/>S...&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="508" refid="structpybind11_1_1detail_1_1make__index__sequence__impl_3_010_00_01_s_8_8_8_01_4_1ae71932f37f95b2adf9063fb7ee8bb96e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>...S&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1make__index__sequence__impl" kindref="compound">make_index_sequence_impl</ref><sp/>&lt;0,<sp/>S...&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt;S...&gt;<sp/><ref refid="structpybind11_1_1detail_1_1make__index__sequence__impl_3_010_00_01_s_8_8_8_01_4_1ae71932f37f95b2adf9063fb7ee8bb96e" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="509" refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1make__index__sequence__impl" kindref="compound">make_index_sequence_impl&lt;N&gt;::type</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="structpybind11_1_1detail_1_1select__indices__impl_1a5fd721337c183fa6da82870e84153ed8" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ISeq,<sp/><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1select__indices__impl" kindref="compound">select_indices_impl</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1select__indices__impl_1a5fd721337c183fa6da82870e84153ed8" kindref="member">type</ref><sp/>=<sp/>ISeq;<sp/>};</highlight></codeline>
<codeline lineno="514" refid="structpybind11_1_1detail_1_1select__indices__impl_3_01index__sequence_3_01_i_prev_8_8_8_01_4_00_4c67076def0e786cc150ce0346198e52" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>IPrev,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">...<sp/>Bs&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1select__indices__impl" kindref="compound">select_indices_impl</ref>&lt;<ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt;IPrev...&gt;,<sp/>I,<sp/>B,<sp/>Bs...&gt;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1select__indices__impl" kindref="compound">select_indices_impl</ref>&lt;conditional_t&lt;B,<sp/>index_sequence&lt;IPrev...,<sp/>I&gt;,<sp/>index_sequence&lt;IPrev...&gt;&gt;,<sp/>I<sp/>+<sp/>1,<sp/>Bs...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="516" refid="namespacepybind11_1_1detail_1a87ae472e87544b8da6c2bf99a90387db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">...<sp/>Bs&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a87ae472e87544b8da6c2bf99a90387db" kindref="member">select_indices</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1select__indices__impl" kindref="compound">select_indices_impl&lt;index_sequence&lt;&gt;</ref>,<sp/>0,<sp/>Bs...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref><sp/>=<sp/>std::integral_constant&lt;bool,<sp/>B&gt;;</highlight></codeline>
<codeline lineno="520" refid="structpybind11_1_1detail_1_1negation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref><sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;!T::value&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="structpybind11_1_1detail_1_1void__t__impl_1a4ad2130a871efbe00e89f559c1bedd9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1void__t__impl" kindref="compound">void_t_impl</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__t__impl_1a4ad2130a871efbe00e89f559c1bedd9f" kindref="member">type</ref><sp/>=<sp/>void;<sp/>};</highlight></codeline>
<codeline lineno="523" refid="namespacepybind11_1_1detail_1ad40a4dd56dd69385cf586cb8176eccf5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ad40a4dd56dd69385cf586cb8176eccf5" kindref="member">void_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__t__impl" kindref="compound">void_t_impl</ref>&lt;Ts...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor">#ifdef<sp/>__cpp_fold_expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;(Ts::value<sp/>&amp;&amp;<sp/>...)&gt;;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">any_of</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;(Ts::value<sp/>||<sp/>...)&gt;;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="structpybind11_1_1detail_1_1bools" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1bools" kindref="compound">bools</ref><sp/>{};</highlight></codeline>
<codeline lineno="531" refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref><sp/>=<sp/>std::is_same&lt;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1bools" kindref="compound">bools</ref>&lt;Ts::value...,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1bools" kindref="compound">bools</ref>&lt;</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Ts::value...&gt;&gt;;</highlight></codeline>
<codeline lineno="534" refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">any_of</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation&lt;all_of&lt;negation&lt;Ts&gt;</ref>...&gt;&gt;;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>has<sp/>trouble<sp/>with<sp/>the<sp/>above,<sp/>but<sp/>supports<sp/>std::conjunction,<sp/>which<sp/>we<sp/>can<sp/>use<sp/>instead<sp/>(albeit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>a<sp/>slight<sp/>loss<sp/>of<sp/>compilation<sp/>efficiency).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref><sp/>=<sp/>std::conjunction&lt;Ts...&gt;;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">any_of</ref><sp/>=<sp/>std::disjunction&lt;Ts...&gt;;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="namespacepybind11_1_1detail_1a41bed277fb6af2155857a186b18c428e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">none_of</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt;<ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">any_of</ref>&lt;Ts...&gt;&gt;;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="namespacepybind11_1_1detail_1ac2cb0c7cc36792e33ee90c23f8ed0a15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Predicates&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ac2cb0c7cc36792e33ee90c23f8ed0a15" kindref="member">satisfies_all_of</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of&lt;Predicates&lt;T&gt;</ref>...&gt;;</highlight></codeline>
<codeline lineno="544" refid="namespacepybind11_1_1detail_1ad8177bd79cbc1e71965deb6716eb209a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Predicates&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_any_of</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">any_of&lt;Predicates&lt;T&gt;</ref>...&gt;;</highlight></codeline>
<codeline lineno="545" refid="namespacepybind11_1_1detail_1ad2bf911ee252ecbcf52d2ddec897ed0a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Predicates&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_none_of</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">none_of&lt;Predicates&lt;T&gt;</ref>...&gt;;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="structpybind11_1_1detail_1_1remove__class" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1remove__class" kindref="compound">remove_class</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="549" refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_4_1aec50b257cb3a25ac432b39023f432bd0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1remove__class" kindref="compound">remove_class</ref>&lt;R<sp/>(C::*)(A...)&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>R<sp/><ref refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_4_1aec50b257cb3a25ac432b39023f432bd0" kindref="member">type</ref>(A...);<sp/>};</highlight></codeline>
<codeline lineno="550" refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_01const_01_4_1a0c5e8ce4f2357ca23dc0c60537c2d636" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1remove__class" kindref="compound">remove_class</ref>&lt;R<sp/>(C::*)(A...)<sp/>const&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>R<sp/><ref refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_01const_01_4_1a0c5e8ce4f2357ca23dc0c60537c2d636" kindref="member">type</ref>(A...);<sp/>};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="554" refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_01_4_1a681caf2c59666cf172170aed9d2e671a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt;const<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_01_4_1a681caf2c59666cf172170aed9d2e671a" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="555" refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_5_01_4_1a1f9e135653a2655185c33fb456ae8aa7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt;T*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_5_01_4_1a1f9e135653a2655185c33fb456ae8aa7" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="556" refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_01_4_1a9563baefded53370e6686a1632f44495" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt;T&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_01_4_1a9563baefded53370e6686a1632f44495" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="557" refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_6_01_4_1a8b0df3be9b3b751965e8f41cac1ce355" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt;T&amp;&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_6_01_4_1a8b0df3be9b3b751965e8f41cac1ce355" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="558" refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_0f_n_0e_4_1a3a0926c2513f5c75f32fcb9e3e4f2e70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt;const<sp/>T[N]&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_0f_n_0e_4_1a3a0926c2513f5c75f32fcb9e3e4f2e70" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="559" refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_0f_n_0e_4_1a6818a81ab315e11aef2e26f7c75bbf17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt;T[N]&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_0f_n_0e_4_1a6818a81ab315e11aef2e26f7c75bbf17" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="560" refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1intrinsic__type_1a5f6ad8e33995d74f3e7fd4f13b41b2db" kindref="member">intrinsic_type&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="structpybind11_1_1detail_1_1void__type" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">void_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="structpybind11_1_1detail_1_1type__list" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__list" kindref="compound">type_list</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor">#ifdef<sp/>__cpp_fold_expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" kindref="member">constexpr_sum</ref>(Ts...<sp/><ref refid="xmlparse_8c_1ab269c6a72273579c35715ec77b41b634" kindref="member">ns</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0<sp/>+<sp/>...<sp/>+<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{<ref refid="xmlparse_8c_1ab269c6a72273579c35715ec77b41b634" kindref="member">ns</ref>});<sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" kindref="member">constexpr_sum</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="574" refid="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" kindref="member">constexpr_sum</ref>(T<sp/>n,<sp/>Ts...<sp/><ref refid="xmlparse_8c_1ab269c6a72273579c35715ec77b41b634" kindref="member">ns</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{n}<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" kindref="member">constexpr_sum</ref>(<ref refid="xmlparse_8c_1ab269c6a72273579c35715ec77b41b634" kindref="member">ns</ref>...);<sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="namespacepybind11_1_1detail_1_1constexpr__impl" refkind="compound"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(constexpr_impl)</highlight></codeline>
<codeline lineno="579" refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" kindref="member">first</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="581" refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" kindref="member">first</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>T<sp/>v,<sp/>Ts...<sp/>vs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>?<sp/>i<sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" kindref="member">first</ref>(i<sp/>+<sp/>1,<sp/>vs...);<sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a70df48d572a9cc1f241cca6d69511b9d" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" kindref="member">last</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*i*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="585" refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" kindref="member">last</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result,<sp/>T<sp/>v,<sp/>Ts...<sp/>vs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" kindref="member">last</ref>(i<sp/>+<sp/>1,<sp/>v<sp/>?<sp/>i<sp/>:<sp/>result,<sp/>vs...);<sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(constexpr_impl)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="591" refid="namespacepybind11_1_1detail_1ac0dec32f83b00d849883c195ba9a0a01" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ac0dec32f83b00d849883c195ba9a0a01" kindref="member">constexpr_first</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" kindref="member">constexpr_impl::first</ref>(0,<sp/>Predicate&lt;Ts&gt;::value...);<sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="595" refid="namespacepybind11_1_1detail_1acd9c4bb50b7c05c2d04476c10a4271ff" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1acd9c4bb50b7c05c2d04476c10a4271ff" kindref="member">constexpr_last</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" kindref="member">constexpr_impl::last</ref>(0,<sp/>-1,<sp/>Predicate&lt;Ts&gt;::value...);<sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="599" refid="structpybind11_1_1detail_1_1pack__element_1ae48c8c1f51838097a0fe25959e0eb421" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1pack__element" kindref="compound">pack_element</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pack__element_1ae48c8c1f51838097a0fe25959e0eb421" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pack__element" kindref="compound">pack_element</ref>&lt;N<sp/>-<sp/>1,<sp/>Ts...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="601" refid="structpybind11_1_1detail_1_1pack__element_3_010_00_01_t_00_01_ts_8_8_8_01_4_1a538dd71bc29c39192ca1a762622b4d40" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1pack__element" kindref="compound">pack_element</ref>&lt;0,<sp/>T,<sp/>Ts...&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pack__element_3_010_00_01_t_00_01_ts_8_8_8_01_4_1a538dd71bc29c39192ca1a762622b4d40" kindref="member">type</ref><sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Default,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="606" refid="structpybind11_1_1detail_1_1exactly__one" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1exactly__one" kindref="compound">exactly_one</ref><sp/>{</highlight></codeline>
<codeline lineno="607" refid="structpybind11_1_1detail_1_1exactly__one_1a6abde70907ca71038e3c23f4e3b54eae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" kindref="member">constexpr_sum</ref>(Predicate&lt;Ts&gt;::value...);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(found<sp/>&lt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>more<sp/>than<sp/>one<sp/>type<sp/>matching<sp/>the<sp/>predicate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610" refid="structpybind11_1_1detail_1_1exactly__one_1a0dab487c0e9954d33320e06d006e87c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>found<sp/>?<sp/><ref refid="namespacepybind11_1_1detail_1ac0dec32f83b00d849883c195ba9a0a01" kindref="member">constexpr_first</ref>&lt;Predicate,<sp/>Ts...&gt;()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="611" refid="structpybind11_1_1detail_1_1exactly__one_1a5602313589245f668b588ee8fb100127" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1exactly__one_1a5602313589245f668b588ee8fb100127" kindref="member">type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt;found,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pack__element" kindref="compound">pack_element</ref>&lt;index,<sp/>Ts...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>,<sp/>Default&gt;;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">P,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Default&gt;</highlight></codeline>
<codeline lineno="614" refid="structpybind11_1_1detail_1_1exactly__one_3_01_p_00_01_default_01_4_1ab453f894f8e1bbbd6d3696f51ea868e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1exactly__one" kindref="compound">exactly_one</ref>&lt;P,<sp/>Default&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1exactly__one_3_01_p_00_01_default_01_4_1ab453f894f8e1bbbd6d3696f51ea868e3" kindref="member">type</ref><sp/>=<sp/>Default;<sp/>};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Default,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="617" refid="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" kindref="member">exactly_one_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1exactly__one" kindref="compound">exactly_one</ref>&lt;Predicate,<sp/>Default,<sp/>Ts...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="structpybind11_1_1detail_1_1deferred__type_1a944b5be6388a61181775ed4c4e7ebcc1" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/></highlight><highlight class="comment">/*Us*/</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1deferred__type" kindref="compound">deferred_type</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1deferred__type_1a944b5be6388a61181775ed4c4e7ebcc1" kindref="member">type</ref><sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="621" refid="namespacepybind11_1_1detail_1a1fffccaed4292498c73fe2f97a229d6c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Us&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a1fffccaed4292498c73fe2f97a229d6c" kindref="member">deferred_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1deferred__type" kindref="compound">deferred_type</ref>&lt;T,<sp/>Us...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="namespacepybind11_1_1detail_1a5a4e15f62190f6790515a3c95146740d" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a5a4e15f62190f6790515a3c95146740d" kindref="member">is_strict_base_of</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_base_of&lt;Base,<sp/>Derived&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;Base,<sp/>Derived&gt;::value&gt;;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Base&gt;</highlight></codeline>
<codeline lineno="629" refid="structpybind11_1_1detail_1_1is__template__base__of__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__template__base__of__impl" kindref="compound">is_template_base_of_impl</ref><sp/>{</highlight></codeline>
<codeline lineno="630" refid="structpybind11_1_1detail_1_1is__template__base__of__impl_1a74f93f13c026ac4f04cfa323bd624474" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Us&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><ref refid="structpybind11_1_1detail_1_1is__template__base__of__impl_1a74f93f13c026ac4f04cfa323bd624474" kindref="member">check</ref>(Base&lt;Us...&gt;<sp/>*);</highlight></codeline>
<codeline lineno="631" refid="structpybind11_1_1detail_1_1is__template__base__of__impl_1ad37ce164b9a99f6b5e9dad5d7c1cdb98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structpybind11_1_1detail_1_1is__template__base__of__impl_1ad37ce164b9a99f6b5e9dad5d7c1cdb98" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Base,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of</ref><sp/>=<sp/>decltype(<ref refid="structpybind11_1_1detail_1_1is__template__base__of__impl" kindref="compound">is_template_base_of_impl&lt;Base&gt;::check</ref>((<ref refid="namespacepybind11_1_1detail_1ada18e66a8c736bd49e83f6dad6b39af5" kindref="member">remove_cv_t&lt;T&gt;</ref>*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>MSVC2015<sp/>has<sp/>trouble<sp/>with<sp/>decltype<sp/>in<sp/>template<sp/>aliases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of</ref><sp/>:<sp/>decltype(is_template_base_of_impl&lt;Base&gt;::check((remove_cv_t&lt;T&gt;*)nullptr))<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="646" refid="structpybind11_1_1detail_1_1is__instantiation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_instantiation</ref><sp/>:<sp/>std::false_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Us&gt;</highlight></codeline>
<codeline lineno="648" refid="structpybind11_1_1detail_1_1is__instantiation_3_01_class_00_01_class_3_01_us_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_instantiation</ref>&lt;Class,<sp/>Class&lt;Us...&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="namespacepybind11_1_1detail_1a17748d0eac8453878973d58f2947e6d0" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_shared_ptr</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_instantiation&lt;std::shared_ptr, T&gt;</ref>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="structpybind11_1_1detail_1_1is__input__iterator" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__input__iterator" kindref="compound">is_input_iterator</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="656" refid="structpybind11_1_1detail_1_1is__input__iterator_3_01_t_00_01void__t_3_01decltype_07_5std_1_1decled93b527fca1d36ccfdf39dbfce936b4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__input__iterator" kindref="compound">is_input_iterator</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1ad40a4dd56dd69385cf586cb8176eccf5" kindref="member">void_t</ref>&lt;decltype(*std::declval&lt;T<sp/>&amp;&gt;()),<sp/>decltype(++std::declval&lt;T<sp/>&amp;&gt;())&gt;&gt;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="660" refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" kindref="member">ignore_unused</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor">#ifdef<sp/>__cpp_fold_expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EXPAND_SIDE_EFFECTS(PATTERN)<sp/>(((PATTERN),<sp/>void()),<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="namespacepybind11_1_1detail_1a372a80fcaa3d983e7765574d31538859" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a372a80fcaa3d983e7765574d31538859" kindref="member">expand_side_effects</ref><sp/>=<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[];</highlight></codeline>
<codeline lineno="667" refid="common_8h_1a3d7c7853f6ac53a5a12c09c57dbf9ce4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EXPAND_SIDE_EFFECTS(PATTERN)<sp/>pybind11::detail::expand_side_effects{<sp/>((PATTERN),<sp/>void(),<sp/>false)...,<sp/>false<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>get_shared_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>internals<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>internals.shared_data.find(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>internals.shared_data.end()<sp/>?<sp/>it-&gt;second<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*set_shared_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1a6a543db2d1d11952560031723aa542e2" kindref="member">shared_data</ref>[<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="690" refid="namespacepybind11_1aa297ec4bf4b85dc134d56708fbfcc850" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T&amp;<sp/><ref refid="namespacepybind11_1aa297ec4bf4b85dc134d56708fbfcc850" kindref="member">get_or_create_shared_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>internals<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>internals.shared_data.find(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>ptr<sp/>=<sp/>(T*)<sp/>(it<sp/>!=<sp/>internals.shared_data.end()<sp/>?<sp/>it-&gt;second<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals.shared_data[<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>]<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="classpybind11_1_1error__already__set" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="704" refid="classpybind11_1_1error__already__set_1a1acfe9ccd94ca09628a9ba6b7c52b9d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1error__already__set_1a1acfe9ccd94ca09628a9ba6b7c52b9d3" kindref="member">error_already_set</ref>()<sp/>:<sp/><ref refid="namespacestd" kindref="compound">std</ref>::runtime_error(detail::<ref refid="namespacepybind11_1_1detail_1af3a790a9d6af602df7dad7c64d9c539b" kindref="member">error_string</ref>())<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Fetch(&amp;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>&amp;value,<sp/>&amp;trace);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708" refid="classpybind11_1_1error__already__set_1afce7c02ccb685d1be01e41b226beaaba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1error__already__set_1afce7c02ccb685d1be01e41b226beaaba" kindref="member">error_already_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="classpybind11_1_1error__already__set_1a81c446517a6175c093e206e61db979de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1error__already__set_1a81c446517a6175c093e206e61db979de" kindref="member">error_already_set</ref>(<ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>&amp;&amp;e)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespacestd" kindref="compound">std</ref>::runtime_error(e.what()),<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>(e.<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>),<sp/>value(e.value),</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace(e.trace)<sp/>{<sp/>e.<ref refid="structpybind11_1_1detail_1_1type__info_1a99cc6ada480e9088a9c9b1d1e5e98480" kindref="member">type</ref><sp/>=<sp/>e.value<sp/>=<sp/>e.trace<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>~<ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>in<sp/>pybind11.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716" refid="classpybind11_1_1error__already__set_1ad17e985b7640202b4d876963f73616e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>&amp;<sp/><ref refid="classpybind11_1_1error__already__set_1ad17e985b7640202b4d876963f73616e9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="classpybind11_1_1error__already__set_1aeb06507f47f77f7b3a196620ecf5b6fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set_1aeb06507f47f77f7b3a196620ecf5b6fa" kindref="member">restore</ref>()<sp/>{<sp/>PyErr_Restore(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>value,<sp/>trace);<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>=<sp/>value<sp/>=<sp/>trace<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="classpybind11_1_1error__already__set_1a716950272e33fd93621c74d7ed7b1623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set_1a716950272e33fd93621c74d7ed7b1623" kindref="member">clear</ref>()<sp/>{<sp/>restore();<sp/>PyErr_Clear();<sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="classpybind11_1_1error__already__set_1ac8b1e1d45f3a43fc0d513c3a3800bc8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set_1ac8b1e1d45f3a43fc0d513c3a3800bc8f" kindref="member">matches</ref>(PyObject<sp/>*ex)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyErr_GivenExceptionMatches(ex,<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);<sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>*value,<sp/>*trace;</highlight></codeline>
<codeline lineno="729"><highlight class="normal">};</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="classpybind11_1_1builtin__exception" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1builtin__exception" kindref="compound">builtin_exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::runtime_error::runtime_error;</highlight></codeline>
<codeline lineno="736" refid="classpybind11_1_1builtin__exception_1a6d752ae14042159c821fb362653ce5be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1builtin__exception_1a6d752ae14042159c821fb362653ce5be" kindref="member">set_error</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">};</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739" refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_RUNTIME_EXCEPTION(name,<sp/>type)<sp/>\</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>class<sp/>name<sp/>:<sp/>public<sp/>builtin_exception<sp/>{<sp/>public:<sp/>\</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>builtin_exception::builtin_exception;<sp/>\</highlight></codeline>
<codeline lineno="742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name()<sp/>:<sp/>name(&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>set_error()<sp/>const<sp/>override<sp/>{<sp/>PyErr_SetString(type,<sp/>what());<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="classpybind11_1_1stop__iteration_1a964fc357def1c565a3bdb67f52ab6e7e" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1stop__iteration" kindref="compound">stop_iteration</ref>,<sp/>PyExc_StopIteration)</highlight></codeline>
<codeline lineno="747" refid="classpybind11_1_1index__error_1a1a67247ff9445926f9e670f5e3317694" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1index__error" kindref="compound">index_error</ref>,<sp/>PyExc_IndexError)</highlight></codeline>
<codeline lineno="748" refid="classpybind11_1_1key__error_1ac2d3d7094c3435ee1836fd33b740080d" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1key__error" kindref="compound">key_error</ref>,<sp/>PyExc_KeyError)</highlight></codeline>
<codeline lineno="749" refid="classpybind11_1_1value__error_1ac38d0fc2fb3f7ff8423ab618eacb76bf" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1value__error" kindref="compound">value_error</ref>,<sp/>PyExc_ValueError)</highlight></codeline>
<codeline lineno="750" refid="classpybind11_1_1type__error_1ad958c7cb4e85c4a2e459386082553393" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1type__error" kindref="compound">type_error</ref>,<sp/>PyExc_TypeError)</highlight></codeline>
<codeline lineno="751" refid="classpybind11_1_1cast__error_1aba19982746dceddb3de40724229c0889" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>,<sp/>PyExc_RuntimeError)<sp/></highlight></codeline>
<codeline lineno="752" refid="classpybind11_1_1reference__cast__error_1aa5f3dcd53855b613f77f06dca84a1402" refkind="member"><highlight class="normal"><ref refid="common_8h_1a905970a65fc4f349773eff84c9980e3a" kindref="member">PYBIND11_RUNTIME_EXCEPTION</ref>(<ref refid="classpybind11_1_1reference__cast__error" kindref="compound">reference_cast_error</ref>,<sp/>PyExc_RuntimeError)<sp/></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">[[noreturn]]<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pybind11_fail(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(reason);<sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal">[[noreturn]]<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pybind11_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;reason)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(reason);<sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757" refid="structpybind11_1_1format__descriptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>given<sp/>type<sp/>in<sp/>the<sp/>type<sp/>char<sp/>array<sp/>below,<sp/>and<sp/>in<sp/>the<sp/>list<sp/>in<sp/>numpy.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>order<sp/>here<sp/>is:<sp/>bool;<sp/>8<sp/>ints<sp/>((signed,unsigned)x(8,16,32,64)bits);<sp/>float,double,long<sp/>double;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>complex<sp/>float,double,long<sp/>double.<sp/><sp/>Note<sp/>that<sp/>the<sp/>long<sp/>double<sp/>types<sp/>only<sp/>participate<sp/>when<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>is<sp/>actually<sp/>longer<sp/>than<sp/>double<sp/>(it<sp/>isn&apos;t<sp/>under<sp/>MSVC).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>not<sp/>only<sp/>the<sp/>string<sp/>below<sp/>but<sp/>also<sp/>complex.h<sp/>and<sp/>numpy.h<sp/>rely<sp/>on<sp/>this<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="structpybind11_1_1detail_1_1is__fmt__numeric_1a2618d405bcf5edce3c72152f079cf161" refkind="member"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/>struct<sp/><ref refid="structpybind11_1_1detail_1_1is__fmt__numeric" kindref="compound">is_fmt_numeric</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="766" refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__fmt__numeric" kindref="compound">is_fmt_numeric</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_arithmetic&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="767" refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4_1a82e4179da801ba561192a573349ef388" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768" refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4_1aed469c75ecd7cc49f8cff75edbc69289" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>std::is_same&lt;T,<sp/>bool&gt;::value<sp/>?<sp/>0<sp/>:<sp/>1<sp/>+<sp/>(</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_integral&lt;T&gt;::value<sp/>?<sp/>detail::log2(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))*2<sp/>+<sp/>std::is_unsigned&lt;T&gt;::value<sp/>:<sp/>8<sp/>+<sp/>(</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,<sp/>double&gt;::value<sp/>?<sp/>1<sp/>:<sp/>std::is_same&lt;T,<sp/>long<sp/>double&gt;::value<sp/>?<sp/>2<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="771"><highlight class="normal">};</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29" refkind="compound"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>struct<sp/><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;T,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_arithmetic&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="775" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29_1afbd6dfeb3017d3349294c0750aa0ee9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?bBhHiIqQfdg&quot;</highlight><highlight class="normal">[<ref refid="structpybind11_1_1detail_1_1is__fmt__numeric" kindref="compound">detail::is_fmt_numeric&lt;T&gt;::index</ref>];</highlight></codeline>
<codeline lineno="776" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29_1a9db61b42bf599918745125a3ee8c1043" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value[2]<sp/>=<sp/>{<sp/>c,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="777" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29_1a16b59b14768194a756ed838882012eee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__arithmet544813167d407bc8aa26457640f1dd29_1a16b59b14768194a756ed838882012eee" kindref="member">format</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,<sp/>c);<sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal">};</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>format_descriptor&lt;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>detail::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt;&gt;::value[2];</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="structpybind11_1_1error__scope" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1error__scope" kindref="compound">error_scope</ref><sp/>{</highlight></codeline>
<codeline lineno="785" refid="structpybind11_1_1error__scope_1ab29e79a1a54d870d8b28937710823f6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>*value,<sp/>*<ref refid="structpybind11_1_1error__scope_1ab29e79a1a54d870d8b28937710823f6f" kindref="member">trace</ref>;</highlight></codeline>
<codeline lineno="786" refid="structpybind11_1_1error__scope_1aff98905fda28e6e542b9726f9001491e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1error__scope_1aff98905fda28e6e542b9726f9001491e" kindref="member">error_scope</ref>()<sp/>{<sp/>PyErr_Fetch(&amp;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>&amp;value,<sp/>&amp;trace);<sp/>}</highlight></codeline>
<codeline lineno="787" refid="structpybind11_1_1error__scope_1aba8595d9ee7f0917fcde434029cc4dd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1error__scope_1aba8595d9ee7f0917fcde434029cc4dd0" kindref="member">~error_scope</ref>()<sp/>{<sp/>PyErr_Restore(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>value,<sp/>trace);<sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal">};</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="structpybind11_1_1nodelete_1a3eb44495e944447e62c7aec816c5e832" refkind="member"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1nodelete" kindref="compound">nodelete</ref><sp/>{<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1nodelete_1a3eb44495e944447e62c7aec816c5e832" kindref="member">operator()</ref>(T*)<sp/>{<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overload_cast<sp/>requires<sp/>variable<sp/>templates:<sp/>C++14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYBIND11_CPP14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OVERLOAD_CAST<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">overload_cast_impl<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return&gt;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(Return<sp/>(*pf)(Args...))<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(pf)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pf;<sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class&gt;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(Return<sp/>(Class::*pmf)(Args...),<sp/>std::false_type<sp/>=<sp/>{})<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(pmf)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmf;<sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class&gt;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(Return<sp/>(Class::*pmf)(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>std::true_type)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(pmf)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmf;<sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal">};</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>detail::overload_cast_impl&lt;Args...&gt;<sp/>overload_cast<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>2015<sp/>only<sp/>accepts<sp/>this<sp/>particular<sp/>initialization<sp/>syntax<sp/>for<sp/>this<sp/>variable<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>const_<sp/>=<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>no<sp/>overload_cast:<sp/>providing<sp/>something<sp/>that<sp/>static_assert-fails:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827" refid="structpybind11_1_1overload__cast" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1overload__cast" kindref="compound">overload_cast</ref><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(<ref refid="namespacepybind11_1_1detail_1a1fffccaed4292498c73fe2f97a229d6c" kindref="member">detail::deferred_t&lt;std::false_type, Args...&gt;::value</ref>,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pybind11::overload_cast&lt;...&gt;<sp/>requires<sp/>compiling<sp/>in<sp/>C++14<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal">};</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>overload_cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adaptor<sp/>for<sp/>converting<sp/>arbitrary<sp/>container<sp/>arguments<sp/>into<sp/>a<sp/>vector;<sp/>implicitly<sp/>convertible<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>standard<sp/>container<sp/>(or<sp/>C-style<sp/>array)<sp/>supporting<sp/>std::begin/std::end,<sp/>any<sp/>singleton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arithmetic<sp/>type<sp/>(if<sp/>T<sp/>is<sp/>arithmetic),<sp/>or<sp/>explicitly<sp/>constructible<sp/>from<sp/>an<sp/>iterator<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="839" refid="classpybind11_1_1detail_1_1any__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">any_container</ref><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>v;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="842" refid="classpybind11_1_1detail_1_1any__container_1a7edef2cb9c0f86561d6ce7b8d5ae7473" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1any__container_1a7edef2cb9c0f86561d6ce7b8d5ae7473" kindref="member">any_container</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>construct<sp/>from<sp/>a<sp/>pair<sp/>of<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>It,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_input_iterator&lt;It&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="846" refid="classpybind11_1_1detail_1_1any__container_1a66edb3adc9e1f368ae28bcc1c34ef8fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1any__container_1a66edb3adc9e1f368ae28bcc1c34ef8fe" kindref="member">any_container</ref>(It<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" kindref="member">first</ref>,<sp/>It<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" kindref="member">last</ref>)<sp/>:<sp/>v(<ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1aea97156fbe3d77e2c4e492135e23273f" kindref="member">first</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a26c91c7394be44205d2ec00919a33219" kindref="member">last</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implicit<sp/>conversion<sp/>constructor<sp/>from<sp/>any<sp/>arbitrary<sp/>container<sp/>type<sp/>with<sp/>values<sp/>convertible<sp/>to<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>Container,<sp/>typename<sp/>=<sp/>enable_if_t&lt;std::is_convertible&lt;decltype(*std::begin(std::declval&lt;const<sp/>Container<sp/>&amp;&gt;())),<sp/>T&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="850" refid="classpybind11_1_1detail_1_1any__container_1a141802ac44d2627011887f098fbd0990" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1any__container_1a141802ac44d2627011887f098fbd0990" kindref="member">any_container</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container<sp/>&amp;c)<sp/>:<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">any_container</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::begin(c),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>(c))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initializer_list&apos;s<sp/>aren&apos;t<sp/>deducible,<sp/>so<sp/>don&apos;t<sp/>get<sp/>matched<sp/>by<sp/>the<sp/>above<sp/>template;<sp/>we<sp/>need<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>explicitly<sp/>allow<sp/>implicit<sp/>conversion<sp/>from<sp/>one:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>TIn,<sp/>typename<sp/>=<sp/>enable_if_t&lt;std::is_convertible&lt;TIn,<sp/>T&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="855" refid="classpybind11_1_1detail_1_1any__container_1a754ab9cb93474d8b36da24354e3ef846" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1any__container_1a754ab9cb93474d8b36da24354e3ef846" kindref="member">any_container</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;TIn&gt;<sp/>&amp;c)<sp/>:<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">any_container</ref>(c.begin(),<sp/>c.<ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>copying<sp/>if<sp/>given<sp/>an<sp/>rvalue<sp/>vector<sp/>of<sp/>the<sp/>correct<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858" refid="classpybind11_1_1detail_1_1any__container_1ad2433fd6475025471770ea74315a38f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1any__container_1ad2433fd6475025471770ea74315a38f2" kindref="member">any_container</ref>(std::vector&lt;T&gt;<sp/>&amp;&amp;v)<sp/>:<sp/>v(<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(v))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Moves<sp/>the<sp/>vector<sp/>out<sp/>of<sp/>an<sp/>rvalue<sp/>any_container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="classpybind11_1_1detail_1_1any__container_1ad9befc060eec49733f8cfd76ca034f31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;&amp;()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v);<sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dereferencing<sp/>obtains<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>underlying<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864" refid="classpybind11_1_1detail_1_1any__container_1a14173666e96b65e8fd9f1404a44d7b12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>&amp;<ref refid="classpybind11_1_1detail_1_1any__container_1a14173666e96b65e8fd9f1404a44d7b12" kindref="member">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="865" refid="classpybind11_1_1detail_1_1any__container_1ad367e430f90f3669bfd9009b8761389e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;<ref refid="classpybind11_1_1detail_1_1any__container_1ad367e430f90f3669bfd9009b8761389e" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>lets<sp/>you<sp/>call<sp/>methods<sp/>on<sp/>the<sp/>underlying<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="classpybind11_1_1detail_1_1any__container_1a5bb6c5230264b1b876d840b6287d30fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>*<ref refid="classpybind11_1_1detail_1_1any__container_1a5bb6c5230264b1b876d840b6287d30fc" kindref="member">operator-&gt;</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;v;<sp/>}</highlight></codeline>
<codeline lineno="869" refid="classpybind11_1_1detail_1_1any__container_1a95cc4ad61182ebd8fab9401e5146c632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>*<ref refid="classpybind11_1_1detail_1_1any__container_1a95cc4ad61182ebd8fab9401e5146c632" kindref="member">operator-&gt;</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;v;<sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal">};</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h"/>
  </compounddef>
</doxygen>
