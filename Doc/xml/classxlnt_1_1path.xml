<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="classxlnt_1_1path" kind="class" language="C++" prot="public">
    <compoundname>xlnt::path</compoundname>
    <includes refid="path_8hpp" local="no">path.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classxlnt_1_1path_1a81456b956fd92cb40badfd3f8fde8313" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string xlnt::path::internal_</definition>
        <argsstring></argsstring>
        <name>internal_</name>
        <briefdescription>
<para>A string that represents this path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="198" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classxlnt_1_1path_1ae6d8164fb35821e8a203fa68567bbadf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char xlnt::path::system_separator</definition>
        <argsstring>()</argsstring>
        <name>system_separator</name>
        <briefdescription>
<para>The system-specific path separator character (e.g. &apos;/&apos; or &apos;\&apos;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="43" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="132" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classxlnt_1_1path_1a64cf753e1625e300a0b0330683f89d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::path::path</definition>
        <argsstring>()</argsstring>
        <name>path</name>
        <briefdescription>
<para>Construct an empty path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="48" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a20925ff54bc393302bf24557c99c75d2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::path::path</definition>
        <argsstring>(const std::string &amp;path_string)</argsstring>
        <name>path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path_string</declname>
        </param>
        <briefdescription>
<para>Counstruct a path from a string representing the path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="53" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1abd96393de519c2097ad5f3e175054847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::path::path</definition>
        <argsstring>(const std::string &amp;path_string, char sep)</argsstring>
        <name>path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path_string</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Construct a path from a string with an explicit directory seprator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="58" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="146" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a8200c5cdd52793ba6fc44ee797daf196" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::is_relative</definition>
        <argsstring>() const</argsstring>
        <name>is_relative</name>
        <briefdescription>
<para>Return true iff this path doesn&apos;t begin with / (or a drive letter on Windows). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="65" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a5c2c3287069e5e92b464cdbe95ae0d9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::is_absolute</definition>
        <argsstring>() const</argsstring>
        <name>is_absolute</name>
        <briefdescription>
<para>Return true iff <ref refid="classxlnt_1_1path_1a8200c5cdd52793ba6fc44ee797daf196" kindref="member">path::is_relative()</ref> is false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="70" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1aa18f0ce6afd269bf51a8d7718e980394" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::is_root</definition>
        <argsstring>() const</argsstring>
        <name>is_root</name>
        <briefdescription>
<para>Return true iff this path is the root directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="75" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1adc856880715f815935888653e7bb9e30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1path" kindref="compound">path</ref></type>
        <definition>path xlnt::path::parent</definition>
        <argsstring>() const</argsstring>
        <name>parent</name>
        <briefdescription>
<para>Return a new path that points to the directory containing the current path Return the path unchanged if this path is the absolute or relative root. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="81" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="179" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a717b25da7d89aaf0d293914f55eab512" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string xlnt::path::filename</definition>
        <argsstring>() const</argsstring>
        <name>filename</name>
        <briefdescription>
<para>Return the last component of this path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="86" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a9221ba95c176dfc9418bf9638d149577" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string xlnt::path::extension</definition>
        <argsstring>() const</argsstring>
        <name>extension</name>
        <briefdescription>
<para>Return the part of the path following the last dot in the filename. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="91" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="208" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a68dd4b24e749bb35d941ad10620519d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>std::pair&lt; std::string, std::string &gt; xlnt::path::split_extension</definition>
        <argsstring>() const</argsstring>
        <name>split_extension</name>
        <briefdescription>
<para>Return a pair of strings resulting from splitting the filename on the last dot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="96" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a2d1a3bbac43e268b22652201c2db09fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; xlnt::path::split</definition>
        <argsstring>() const</argsstring>
        <name>split</name>
        <briefdescription>
<para>Create a string representing this path separated by the provided separator or the system-default separator if not provided. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="104" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a20c2e81517781178a253ccc2f497b501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; xlnt::path::string</definition>
        <argsstring>() const</argsstring>
        <name>string</name>
        <briefdescription>
<para>Create a string representing this path separated by the provided separator or the system-default separator if not provided. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="110" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a382affc3ed31744ad56ab33c15e5f56d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1path" kindref="compound">path</ref></type>
        <definition>path xlnt::path::resolve</definition>
        <argsstring>(const path &amp;base_path) const</argsstring>
        <name>resolve</name>
        <param>
          <type>const <ref refid="classxlnt_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>base_path</declname>
        </param>
        <briefdescription>
<para>If this path is relative, append each component of this path to base_path and return the resulting absolute path. Otherwise, the the current path will be returned and base_path will be ignored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="125" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="244" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1abd1155098ed192c199039cd3aa3f1c69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1path" kindref="compound">path</ref></type>
        <definition>path xlnt::path::relative_to</definition>
        <argsstring>(const path &amp;base_path) const</argsstring>
        <name>relative_to</name>
        <param>
          <type>const <ref refid="classxlnt_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>base_path</declname>
        </param>
        <briefdescription>
<para>The inverse of <ref refid="classxlnt_1_1path_1a382affc3ed31744ad56ab33c15e5f56d" kindref="member">path::resolve</ref>. Creates a relative path from an absolute path by removing the common root between base_path and this path. If the current path is already relative, return it unchanged. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="132" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="330" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a549a7de20255288c0132d1fe3f58b145" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::exists</definition>
        <argsstring>() const</argsstring>
        <name>exists</name>
        <briefdescription>
<para>Return true iff the file or directory pointed to by this path exists on the filesystem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="140" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1af1a653c19685410b945be99a507256ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::is_directory</definition>
        <argsstring>() const</argsstring>
        <name>is_directory</name>
        <briefdescription>
<para>Return true if the file or directory pointed to by this path is a directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="146" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a8a2083cc4e9e0873acfa33ff1cd8202f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::is_file</definition>
        <argsstring>() const</argsstring>
        <name>is_file</name>
        <briefdescription>
<para>Return true if the file or directory pointed to by this path is a regular file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="152" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a6d2d885fa562361c11781d1a9abff19d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string xlnt::path::read_contents</definition>
        <argsstring>() const</argsstring>
        <name>read_contents</name>
        <briefdescription>
<para>Open the file pointed to by this path and return a string containing the files contents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="160" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="286" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1adfb1aac9ce279cf94e87233490da20e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1path" kindref="compound">path</ref></type>
        <definition>path xlnt::path::append</definition>
        <argsstring>(const std::string &amp;to_append) const</argsstring>
        <name>append</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>to_append</declname>
        </param>
        <briefdescription>
<para>Append the provided part to this path and return the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="167" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="297" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1ae22f50a08277330190d9ff01aace9997" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1path" kindref="compound">path</ref></type>
        <definition>path xlnt::path::append</definition>
        <argsstring>(const path &amp;to_append) const</argsstring>
        <name>append</name>
        <param>
          <type>const <ref refid="classxlnt_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>to_append</declname>
        </param>
        <briefdescription>
<para>Append the provided part to this path and return the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="172" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="311" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a03910f15f2df5e9830182ffd5d3da493" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::operator==</definition>
        <argsstring>(const path &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classxlnt_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if left path is equal to right path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="177" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1path_1a04de167a780893b012f9ea9543c3b152" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::path::operator!=</definition>
        <argsstring>(const path &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classxlnt_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if left path is equal to right path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="182" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="358" bodyend="361"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classxlnt_1_1path_1af495562525a66404c7606793dd96e198" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char xlnt::path::guess_separator</definition>
        <argsstring>() const</argsstring>
        <name>guess_separator</name>
        <briefdescription>
<para>Returns the character that separates directories in the path. On POSIX style filesystems, this is always &apos;/&apos;. On Windows, this is the character that separates the drive letter from the rest of the path for absolute paths with a drive letter, &apos;/&apos; if the path is absolute and starts with &apos;/&apos;, and &apos;/&apos; or &apos;\&apos; for relative paths depending on which splits the path into more directory components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="193" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/utils/path.cpp" bodystart="323" bodyend="328"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulates a path that points to location in a filesystem. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" line="37" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/path.hpp" bodystart="38" bodyend="199"/>
    <listofallmembers>
      <member refid="classxlnt_1_1path_1adfb1aac9ce279cf94e87233490da20e8" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>append</name></member>
      <member refid="classxlnt_1_1path_1ae22f50a08277330190d9ff01aace9997" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>append</name></member>
      <member refid="classxlnt_1_1path_1a549a7de20255288c0132d1fe3f58b145" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>exists</name></member>
      <member refid="classxlnt_1_1path_1a9221ba95c176dfc9418bf9638d149577" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>extension</name></member>
      <member refid="classxlnt_1_1path_1a717b25da7d89aaf0d293914f55eab512" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>filename</name></member>
      <member refid="classxlnt_1_1path_1af495562525a66404c7606793dd96e198" prot="private" virt="non-virtual"><scope>xlnt::path</scope><name>guess_separator</name></member>
      <member refid="classxlnt_1_1path_1a81456b956fd92cb40badfd3f8fde8313" prot="private" virt="non-virtual"><scope>xlnt::path</scope><name>internal_</name></member>
      <member refid="classxlnt_1_1path_1a5c2c3287069e5e92b464cdbe95ae0d9a" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>is_absolute</name></member>
      <member refid="classxlnt_1_1path_1af1a653c19685410b945be99a507256ab" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>is_directory</name></member>
      <member refid="classxlnt_1_1path_1a8a2083cc4e9e0873acfa33ff1cd8202f" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>is_file</name></member>
      <member refid="classxlnt_1_1path_1a8200c5cdd52793ba6fc44ee797daf196" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>is_relative</name></member>
      <member refid="classxlnt_1_1path_1aa18f0ce6afd269bf51a8d7718e980394" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>is_root</name></member>
      <member refid="classxlnt_1_1path_1a04de167a780893b012f9ea9543c3b152" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>operator!=</name></member>
      <member refid="classxlnt_1_1path_1a03910f15f2df5e9830182ffd5d3da493" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>operator==</name></member>
      <member refid="classxlnt_1_1path_1adc856880715f815935888653e7bb9e30" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>parent</name></member>
      <member refid="classxlnt_1_1path_1a64cf753e1625e300a0b0330683f89d04" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>path</name></member>
      <member refid="classxlnt_1_1path_1a20925ff54bc393302bf24557c99c75d2" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>path</name></member>
      <member refid="classxlnt_1_1path_1abd96393de519c2097ad5f3e175054847" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>path</name></member>
      <member refid="classxlnt_1_1path_1a6d2d885fa562361c11781d1a9abff19d" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>read_contents</name></member>
      <member refid="classxlnt_1_1path_1abd1155098ed192c199039cd3aa3f1c69" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>relative_to</name></member>
      <member refid="classxlnt_1_1path_1a382affc3ed31744ad56ab33c15e5f56d" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>resolve</name></member>
      <member refid="classxlnt_1_1path_1a2d1a3bbac43e268b22652201c2db09fb" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>split</name></member>
      <member refid="classxlnt_1_1path_1a68dd4b24e749bb35d941ad10620519d7" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>split_extension</name></member>
      <member refid="classxlnt_1_1path_1a20c2e81517781178a253ccc2f497b501" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>string</name></member>
      <member refid="classxlnt_1_1path_1ae6d8164fb35821e8a203fa68567bbadf" prot="public" virt="non-virtual"><scope>xlnt::path</scope><name>system_separator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
