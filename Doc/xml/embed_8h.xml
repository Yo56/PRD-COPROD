<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="embed_8h" kind="file" language="C++">
    <compoundname>embed.h</compoundname>
    <includes refid="pybind11_8h" local="yes">pybind11.h</includes>
    <includes refid="eval_8h" local="yes">eval.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>limits</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="21">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>frameobject.h</label>
      </node>
      <node id="24">
        <label>cstdio</label>
      </node>
      <node id="23">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>Python.h</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="9">
        <label>pythread.h</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="27">
        <label>array</label>
      </node>
      <node id="5">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="32">
        <label>eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>forward_list</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="19">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1embedded__module" prot="public">pybind11::detail::embedded_module</innerclass>
    <innerclass refid="classpybind11_1_1scoped__interpreter" prot="public">pybind11::scoped_interpreter</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="embed_8h_1aae815ca26ea2c075b0339ea1742e62b1" prot="public" static="no">
        <name>PYBIND11_EMBEDDED_MODULE_IMPL</name>
        <param><defname>name</defname></param>
        <initializer>      extern &quot;C&quot; void pybind11_init_impl_##name() {      \
          pybind11_init_wrapper_##name();                \
      }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" line="25" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="embed_8h_1a0cc46b0d63035aa7a7026c05ee9daa24" prot="public" static="no">
        <name>PYBIND11_EMBEDDED_MODULE</name>
        <param><defname>name</defname></param>
        <param><defname>variable</defname></param>
        <initializer>    static void pybind11_init_##name(<ref refid="classpybind11_1_1module" kindref="compound">pybind11::module</ref> &amp;);                     \
    static PyObject *pybind11_init_wrapper_##name() {                         \
        auto m = <ref refid="classpybind11_1_1module" kindref="compound">pybind11::module</ref>(#name);                                     \
        try {                                                                 \
            pybind11_init_##name(m);                                          \
            return m.ptr();                                                   \
        } catch (<ref refid="classpybind11_1_1error__already__set" kindref="compound">pybind11::error_already_set</ref> &amp;e) {                            \
            e.clear();                                                        \
            PyErr_SetString(PyExc_ImportError, e.what());                     \
            return nullptr;                                                   \
        } catch (const std::exception &amp;e) {                                   \
            PyErr_SetString(PyExc_ImportError, e.what());                     \
            return nullptr;                                                   \
        }                                                                     \
    }                                                                         \
    <ref refid="embed_8h_1aae815ca26ea2c075b0339ea1742e62b1" kindref="member">PYBIND11_EMBEDDED_MODULE_IMPL</ref>(name)                                       \
    <ref refid="structpybind11_1_1detail_1_1embedded__module" kindref="compound">pybind11::detail::embedded_module</ref> name(#name, pybind11_init_impl_##name); \
    void pybind11_init_##name(<ref refid="classpybind11_1_1module" kindref="compound">pybind11::module</ref> &amp;variable)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Add a new module to the table of builtins for the interpreter. Must be defined in global scope. The first macro parameter is the name of the module (without quotes). The second parameter is the variable which will be used as the interface to add functions and classes to the module.</para>
<para>.. code-block:: cpp <verbatim>PYBIND11_EMBEDDED_MODULE(example, m) {
</verbatim> ... initialize functions and classes here m.def(&quot;foo&quot;, []() { return &quot;Hello, World!&quot;; }); } \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" line="46" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/embed.h:<sp/>Support<sp/>for<sp/>embedding<sp/>the<sp/>interpreter</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2017<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pybind11_8h" kindref="compound">pybind11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="eval_8h" kindref="compound">eval.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>Embedding<sp/>the<sp/>interpreter<sp/>is<sp/>not<sp/>supported<sp/>with<sp/>PyPy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PYBIND11_EMBEDDED_MODULE_IMPL(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>PyObject<sp/>*pybind11_init_impl_##name()<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pybind11_init_wrapper_##name();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="embed_8h_1aae815ca26ea2c075b0339ea1742e62b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PYBIND11_EMBEDDED_MODULE_IMPL(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>void<sp/>pybind11_init_impl_##name()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_init_wrapper_##name();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="embed_8h_1a0cc46b0d63035aa7a7026c05ee9daa24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EMBEDDED_MODULE(name,<sp/>variable)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>pybind11_init_##name(pybind11::module<sp/>&amp;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PyObject<sp/>*pybind11_init_wrapper_##name()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>m<sp/>=<sp/>pybind11::module(#name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_init_##name(m);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m.ptr();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(pybind11::error_already_set<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.clear();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>e.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>std::exception<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/>e.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_EMBEDDED_MODULE_IMPL(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>pybind11::detail::embedded_module<sp/>name(#name,<sp/>pybind11_init_impl_##name);<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>pybind11_init_##name(pybind11::module<sp/>&amp;variable)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">embedded_module<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>init_t<sp/>=<sp/>PyObject<sp/>*(*)();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structpybind11_1_1detail_1_1embedded__module_1a072db89c4496fb2686dd6297e4b8eacf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1embedded__module_1a072db89c4496fb2686dd6297e4b8eacf" kindref="member">init_t</ref><sp/>=<sp/>void<sp/>(*)();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structpybind11_1_1detail_1_1embedded__module_1ad9c2a89251e06e78af425b0187e9c5c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1embedded__module_1ad9c2a89251e06e78af425b0187e9c5c3" kindref="member">embedded_module</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1embedded__module_1a072db89c4496fb2686dd6297e4b8eacf" kindref="member">init_t</ref><sp/><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">init</ref>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py_IsInitialized())</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>add<sp/>new<sp/>modules<sp/>after<sp/>the<sp/>interpreter<sp/>has<sp/>been<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>PyImport_AppendInittab(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">init</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Insufficient<sp/>memory<sp/>to<sp/>add<sp/>a<sp/>new<sp/>module&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="namespacepybind11_1a4a37202a545a53e60d9722b5712b9171" refkind="member"><highlight class="normal"><ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a4a37202a545a53e60d9722b5712b9171" kindref="member">initialize_interpreter</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_signal_handlers<sp/>=<sp/>true)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py_IsInitialized())</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;The<sp/>interpreter<sp/>is<sp/>already<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_InitializeEx(init_signal_handlers<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>.py<sp/>files<sp/>in<sp/>the<sp/>working<sp/>directory<sp/>available<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sys_path<sp/>=<sp/>reinterpret_borrow&lt;list&gt;(module::import(</highlight><highlight class="stringliteral">&quot;sys&quot;</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_path.append(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="namespacepybind11_1a2f49a19c03be57ee8ff8427a5f30dc20" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a2f49a19c03be57ee8ff8427a5f30dc20" kindref="member">finalize_interpreter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>builtins(PyEval_GetBuiltins());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="common_8h_1ad4044f737821eb5e0398e5f0139d621e" kindref="member">PYBIND11_INTERNALS_ID</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>internals<sp/>pointer<sp/>(without<sp/>creating<sp/>it<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist).<sp/><sp/>It&apos;s<sp/>possible<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>internals<sp/>to<sp/>be<sp/>created<sp/>during<sp/>Py_Finalize()<sp/>(e.g.<sp/>if<sp/>a<sp/>py::capsule<sp/>calls<sp/>`get_internals()`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>destruction),<sp/>so<sp/>we<sp/>get<sp/>the<sp/>pointer-pointer<sp/>here<sp/>and<sp/>check<sp/>it<sp/>after<sp/>Py_Finalize().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">detail::internals</ref><sp/>**internals_ptr_ptr<sp/>=<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a5e1f5d819b0c2dfe52442c919296a3e3" kindref="member">detail::get_internals_ptr</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>could<sp/>also<sp/>be<sp/>stashed<sp/>in<sp/>builtins,<sp/>so<sp/>look<sp/>there<sp/>too:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(builtins.<ref refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" kindref="member">contains</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>isinstance&lt;capsule&gt;(builtins[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]))</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr_ptr<sp/>=<sp/><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref>(builtins[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_Finalize();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internals_ptr_ptr)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*internals_ptr_ptr;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*internals_ptr_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classpybind11_1_1scoped__interpreter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="177" refid="classpybind11_1_1scoped__interpreter_1a4496116aa8412b3149d70ce8b17a1fbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1scoped__interpreter_1a4496116aa8412b3149d70ce8b17a1fbb" kindref="member">scoped_interpreter</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_signal_handlers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a4a37202a545a53e60d9722b5712b9171" kindref="member">initialize_interpreter</ref>(init_signal_handlers);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="classpybind11_1_1scoped__interpreter_1ae773d2848c54d0286954c7ecf882b773" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1scoped__interpreter_1ae773d2848c54d0286954c7ecf882b773" kindref="member">scoped_interpreter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182" refid="classpybind11_1_1scoped__interpreter_1aa275247191cf117e9f288b5b84b3d0e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1scoped__interpreter_1aa275247191cf117e9f288b5b84b3d0e9" kindref="member">scoped_interpreter</ref>(<ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>{<sp/>other.is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="183" refid="classpybind11_1_1scoped__interpreter_1a0c2894cfa3f579c61aecfdfa6946aa9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>&amp;<ref refid="classpybind11_1_1scoped__interpreter_1a0c2894cfa3f579c61aecfdfa6946aa9e" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184" refid="classpybind11_1_1scoped__interpreter_1a21e445c1acbe3857b7490e19252ecc31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>&amp;<ref refid="classpybind11_1_1scoped__interpreter_1a21e445c1acbe3857b7490e19252ecc31" kindref="member">operator=</ref>(<ref refid="classpybind11_1_1scoped__interpreter" kindref="compound">scoped_interpreter</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classpybind11_1_1scoped__interpreter_1a71ca6fd8fb779aca1cbcacb6d62ab003" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1scoped__interpreter_1a71ca6fd8fb779aca1cbcacb6d62ab003" kindref="member">~scoped_interpreter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceutf8_1add2dbec3d058aa66500ec4f97cc8174b" kindref="member">is_valid</ref>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a2f49a19c03be57ee8ff8427a5f30dc20" kindref="member">finalize_interpreter</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutf8_1add2dbec3d058aa66500ec4f97cc8174b" kindref="member">is_valid</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h"/>
  </compounddef>
</doxygen>
