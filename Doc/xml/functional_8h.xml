<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="functional_8h" kind="file" language="C++">
    <compoundname>functional.h</compoundname>
    <includes refid="pybind11_8h" local="yes">pybind11.h</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="2">
        <label>pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>functional</label>
      </node>
      <node id="28">
        <label>limits</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="21">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>frameobject.h</label>
      </node>
      <node id="24">
        <label>cstdio</label>
      </node>
      <node id="23">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>Python.h</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="9">
        <label>pythread.h</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="27">
        <label>array</label>
      </node>
      <node id="5">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="3">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>forward_list</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="19">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::function&lt; Return(Args...)&gt; &gt;</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/functional.h:<sp/>std::function&lt;&gt;<sp/>support</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pybind11_8h" kindref="compound">pybind11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="19" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1function" kindref="compound">function</ref>&lt;Return(Args...)&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="20" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1aae0ac4c47acc1fd77bc8f23283fd8dd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1aae0ac4c47acc1fd77bc8f23283fd8dd9" kindref="member">type</ref><sp/>=<sp/>std::function&lt;Return(Args...)&gt;;</highlight></codeline>
<codeline lineno="21" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1aadeba6f34170fe2957ceadd30a10cbd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1aadeba6f34170fe2957ceadd30a10cbd2" kindref="member">retval_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_same&lt;Return, void&gt;::value</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">void_type</ref>,<sp/>Return&gt;;</highlight></codeline>
<codeline lineno="22" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a1a82074a4a96a322c06ee8abf3aa164d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a1a82074a4a96a322c06ee8abf3aa164d" kindref="member">function_type</ref><sp/>=<sp/>Return<sp/>(*)<sp/>(Args...);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a77cec886e10e95a65bcb4b4a16d155ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a77cec886e10e95a65bcb4b4a16d155ad" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>())<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defer<sp/>accepting<sp/>None<sp/>to<sp/>other<sp/>overloads<sp/>(if<sp/>we<sp/>aren&apos;t<sp/>in<sp/>convert<sp/>mode):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isinstance&lt;function&gt;(src))</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>reinterpret_borrow&lt;function&gt;(src);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>passing<sp/>a<sp/>C++<sp/>function<sp/>as<sp/>an<sp/>argument<sp/>to<sp/>another<sp/>C++</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>via<sp/>Python,<sp/>every<sp/>function<sp/>call<sp/>would<sp/>normally<sp/>involve</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>full<sp/>C++<sp/>-&gt;<sp/>Python<sp/>-&gt;<sp/>C++<sp/>roundtrip,<sp/>which<sp/>can<sp/>be<sp/>prohibitive.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Here,<sp/>we<sp/>try<sp/>to<sp/>at<sp/>least<sp/>detect<sp/>the<sp/>case<sp/>where<sp/>the<sp/>function<sp/>is</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stateless<sp/>(i.e.<sp/>function<sp/>pointer<sp/>or<sp/>lambda<sp/>function<sp/>without</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>captured<sp/>variables),<sp/>in<sp/>which<sp/>case<sp/>the<sp/>roundtrip<sp/>can<sp/>be<sp/>avoided.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cfunc<sp/>=<sp/>func.cpp_function())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>reinterpret_borrow&lt;capsule&gt;(PyCFunction_GET_SELF(cfunc.ptr()));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rec<sp/>=<sp/>(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*)<sp/>c;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec<sp/>&amp;&amp;<sp/>rec-&gt;is_stateless<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a3379c11ceb77989070a4613ddad7da06" kindref="member">same_type</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a1a82074a4a96a322c06ee8abf3aa164d" kindref="member">function_type</ref>),<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">std::type_info<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rec-&gt;data[1])))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">capture<sp/>{<sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a1a82074a4a96a322c06ee8abf3aa164d" kindref="member">function_type</ref><sp/>f;<sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>((capture<sp/>*)<sp/>&amp;rec-&gt;data)-&gt;f;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>[func](Args...<sp/><ref refid="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" kindref="member">args</ref>)<sp/>-&gt;<sp/>Return<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1gil__scoped__acquire" kindref="compound">gil_scoped_acquire</ref><sp/>acq;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>retval(func(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Visual<sp/>studio<sp/>2015<sp/>parser<sp/>issue:<sp/>need<sp/>parentheses<sp/>around<sp/>this<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(retval.template<sp/>cast&lt;Return&gt;());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="67" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a6e982e3040df087969d5d675b06419d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a6e982e3040df087969d5d675b06419d5" kindref="member">cast</ref>(Func<sp/>&amp;&amp;f_,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f_)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>().inc_ref();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>f_.template<sp/>target&lt;function_type&gt;();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(*result,<sp/>policy).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(std::forward&lt;Func&gt;(f_),<sp/>policy).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Callable[[&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1argument__loader" kindref="compound">argument_loader&lt;Args...&gt;::arg_names</ref>()<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;],<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;retval_type&gt;::name</ref>()<sp/>+</highlight></codeline>
<codeline lineno="81" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4_1a714f889817a931e02335acea50b039a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h"/>
  </compounddef>
</doxygen>
