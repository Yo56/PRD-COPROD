<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="namespacepybind11_1_1detail" kind="namespace" language="C++">
    <compoundname>pybind11::detail</compoundname>
    <innerclass refid="structpybind11_1_1detail_1_1op__" prot="public">pybind11::detail::op_</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1init" prot="public">pybind11::detail::init</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1init__alias" prot="public">pybind11::detail::init_alias</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1argument__record" prot="public">pybind11::detail::argument_record</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1function__record" prot="public">pybind11::detail::function_record</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__record" prot="public">pybind11::detail::type_record</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute" prot="public">pybind11::detail::process_attribute</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute__default" prot="public">pybind11::detail::process_attribute_default</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01name_01_4" prot="public">pybind11::detail::process_attribute&lt; name &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01doc_01_4" prot="public">pybind11::detail::process_attribute&lt; doc &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4" prot="public">pybind11::detail::process_attribute&lt; const char * &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01char_01_5_01_4" prot="public">pybind11::detail::process_attribute&lt; char * &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01return__value__policy_01_4" prot="public">pybind11::detail::process_attribute&lt; return_value_policy &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01sibling_01_4" prot="public">pybind11::detail::process_attribute&lt; sibling &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01is__method_01_4" prot="public">pybind11::detail::process_attribute&lt; is_method &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01scope_01_4" prot="public">pybind11::detail::process_attribute&lt; scope &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01is__operator_01_4" prot="public">pybind11::detail::process_attribute&lt; is_operator &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01arg_01_4" prot="public">pybind11::detail::process_attribute&lt; arg &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01arg__v_01_4" prot="public">pybind11::detail::process_attribute&lt; arg_v &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; T, enable_if_t&lt; is_pyobject&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01base_3_01_t_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; base&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01multiple__inheritance_01_4" prot="public">pybind11::detail::process_attribute&lt; multiple_inheritance &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01dynamic__attr_01_4" prot="public">pybind11::detail::process_attribute&lt; dynamic_attr &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01buffer__protocol_01_4" prot="public">pybind11::detail::process_attribute&lt; buffer_protocol &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01metaclass_01_4" prot="public">pybind11::detail::process_attribute&lt; metaclass &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01arithmetic_01_4" prot="public">pybind11::detail::process_attribute&lt; arithmetic &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01call__guard_3_01_ts_8_8_8_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; call_guard&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; keep_alive&lt; Nurse, Patient &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attributes" prot="public">pybind11::detail::process_attributes</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1compare__buffer__info" prot="public">pybind11::detail::compare_buffer_info</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1compare__buffer__info_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_05cc5953ac48b25f185c5d5aabb43d85" prot="public">pybind11::detail::compare_buffer_info&lt; T, detail::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__info" prot="public">pybind11::detail::type_info</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1loader__life__support" prot="public">pybind11::detail::loader_life_support</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1value__and__holder" prot="public">pybind11::detail::value_and_holder</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1values__and__holders" prot="public">pybind11::detail::values_and_holders</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster__generic" prot="public">pybind11::detail::type_caster_generic</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__copy__constructible" prot="public">pybind11::detail::is_copy_constructible</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__copy__constructible_3_01_container_00_01enable__if__t_3_01std_1_9ff39b5048caffb73cf754c26d3885c0" prot="public">pybind11::detail::is_copy_constructible&lt; Container, enable_if_t&lt; std::is_copy_constructible&lt; Container &gt;::value &amp;&amp;std::is_same&lt; typename Container::value_type &amp;, typename Container::reference &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster__base" prot="public">pybind11::detail::type_caster_base</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster" prot="public">pybind11::detail::type_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::reference_wrapper&lt; type &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad" prot="public">pybind11::detail::type_caster&lt; T, enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &amp;&amp;!is_std_char_type&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1void__caster" prot="public">pybind11::detail::void_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01void__type_01_4" prot="public">pybind11::detail::type_caster&lt; void_type &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4" prot="public">pybind11::detail::type_caster&lt; void &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1nullptr__t_01_4" prot="public">pybind11::detail::type_caster&lt; std::nullptr_t &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4" prot="public">pybind11::detail::type_caster&lt; bool &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1string__caster" prot="public">pybind11::detail::string_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1basic__string_3_01_char_t_00_01_traits_00_0191d9cb07ed4985c792573463c150208f" prot="public">pybind11::detail::type_caster&lt; std::basic_string&lt; CharT, Traits, Allocator &gt;, enable_if_t&lt; is_std_char_type&lt; CharT &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33" prot="public">pybind11::detail::type_caster&lt; CharT, enable_if_t&lt; is_std_char_type&lt; CharT &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1tuple__caster" prot="public">pybind11::detail::tuple_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1holder__helper" prot="public">pybind11::detail::holder_helper</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1copyable__holder__caster" prot="public">pybind11::detail::copyable_holder_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__only__holder__caster" prot="public">pybind11::detail::move_only_holder_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1unique__ptr_3_01type_00_01deleter_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::unique_ptr&lt; type, deleter &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1always__construct__holder" prot="public">pybind11::detail::always_construct_holder</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__holder__type" prot="public">pybind11::detail::is_holder_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__holder__type_3_01base_00_01std_1_1unique__ptr_3_01base_00_01deleter_01_4_01_4" prot="public">pybind11::detail::is_holder_type&lt; base, std::unique_ptr&lt; base, deleter &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name" prot="public">pybind11::detail::handle_type_name</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01bytes_01_4" prot="public">pybind11::detail::handle_type_name&lt; bytes &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01args_01_4" prot="public">pybind11::detail::handle_type_name&lt; args &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01kwargs_01_4" prot="public">pybind11::detail::handle_type_name&lt; kwargs &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pyobject__caster" prot="public">pybind11::detail::pyobject_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; T, enable_if_t&lt; is_pyobject&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__always" prot="public">pybind11::detail::move_always</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__always_3_01_t_00_01enable__if__t_3_01all__of_3_01move__is__pla1a566c301e5c8e35e666d20f06691d43" prot="public">pybind11::detail::move_always&lt; T, enable_if_t&lt; all_of&lt; move_is_plain_type&lt; T &gt;, negation&lt; std::is_copy_constructible&lt; T &gt; &gt;, std::is_move_constructible&lt; T &gt;, std::is_same&lt; decltype(std::declval&lt; make_caster&lt; T &gt;&gt;().operator T&amp;()), T &amp; &gt;&gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__if__unreferenced" prot="public">pybind11::detail::move_if_unreferenced</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__if__unreferenced_3_01_t_00_01enable__if__t_3_01all__of_3_01movedeb75add531442492ce7b7efbb662fd" prot="public">pybind11::detail::move_if_unreferenced&lt; T, enable_if_t&lt; all_of&lt; move_is_plain_type&lt; T &gt;, negation&lt; move_always&lt; T &gt; &gt;, std::is_move_constructible&lt; T &gt;, std::is_same&lt; decltype(std::declval&lt; make_caster&lt; T &gt;&gt;().operator T&amp;()), T &amp; &gt;&gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1return__value__policy__override" prot="public">pybind11::detail::return_value_policy_override</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1overload__unused" prot="public">pybind11::detail::overload_unused</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1function__call" prot="public">pybind11::detail::function_call</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1argument__loader" prot="public">pybind11::detail::argument_loader</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1simple__collector" prot="public">pybind11::detail::simple_collector</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1unpacking__collector" prot="public">pybind11::detail::unpacking_collector</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1duration__caster" prot="public">pybind11::detail::duration_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1chrono_1_1time__point_3_01std_1_1chrono_1_1sy8e3883dc66f585232fa53b052905d637" prot="public">pybind11::detail::type_caster&lt; std::chrono::time_point&lt; std::chrono::system_clock, Duration &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1chrono_1_1time__point_3_01_clock_00_01_duration_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::chrono::time_point&lt; Clock, Duration &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1chrono_1_1duration_3_01_rep_00_01_period_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::chrono::duration&lt; Rep, Period &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1instance" prot="public">pybind11::detail::instance</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1overload__hash" prot="public">pybind11::detail::overload_hash</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__hash" prot="public">pybind11::detail::type_hash</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__equal__to" prot="public">pybind11::detail::type_equal_to</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1internals" prot="public">pybind11::detail::internals</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1index__sequence" prot="public">pybind11::detail::index_sequence</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1make__index__sequence__impl" prot="public">pybind11::detail::make_index_sequence_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1make__index__sequence__impl_3_010_00_01_s_8_8_8_01_4" prot="public">pybind11::detail::make_index_sequence_impl&lt; 0, S... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1select__indices__impl" prot="public">pybind11::detail::select_indices_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1select__indices__impl_3_01index__sequence_3_01_i_prev_8_8_8_01_4_00_4c67076def0e786cc150ce0346198e52" prot="public">pybind11::detail::select_indices_impl&lt; index_sequence&lt; IPrev... &gt;, I, B, Bs... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1negation" prot="public">pybind11::detail::negation</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1void__t__impl" prot="public">pybind11::detail::void_t_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1bools" prot="public">pybind11::detail::bools</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1remove__class" prot="public">pybind11::detail::remove_class</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_4" prot="public">pybind11::detail::remove_class&lt; R(C::*)(A...)&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1remove__class_3_01_r_07_c_1_1_5_08_07_a_8_8_8_08_01const_01_4" prot="public">pybind11::detail::remove_class&lt; R(C::*)(A...) const &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type" prot="public">pybind11::detail::intrinsic_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_01_4" prot="public">pybind11::detail::intrinsic_type&lt; const T &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_5_01_4" prot="public">pybind11::detail::intrinsic_type&lt; T * &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_01_4" prot="public">pybind11::detail::intrinsic_type&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_01_6_6_01_4" prot="public">pybind11::detail::intrinsic_type&lt; T &amp;&amp; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01const_01_t_0f_n_0e_4" prot="public">pybind11::detail::intrinsic_type&lt; const T[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1intrinsic__type_3_01_t_0f_n_0e_4" prot="public">pybind11::detail::intrinsic_type&lt; T[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1void__type" prot="public">pybind11::detail::void_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__list" prot="public">pybind11::detail::type_list</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pack__element" prot="public">pybind11::detail::pack_element</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pack__element_3_010_00_01_t_00_01_ts_8_8_8_01_4" prot="public">pybind11::detail::pack_element&lt; 0, T, Ts... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1exactly__one" prot="public">pybind11::detail::exactly_one</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1exactly__one_3_01_p_00_01_default_01_4" prot="public">pybind11::detail::exactly_one&lt; P, Default &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1deferred__type" prot="public">pybind11::detail::deferred_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__template__base__of__impl" prot="public">pybind11::detail::is_template_base_of_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__instantiation" prot="public">pybind11::detail::is_instantiation</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__instantiation_3_01_class_00_01_class_3_01_us_8_8_8_01_4_01_4" prot="public">pybind11::detail::is_instantiation&lt; Class, Class&lt; Us... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__input__iterator" prot="public">pybind11::detail::is_input_iterator</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__input__iterator_3_01_t_00_01void__t_3_01decltype_07_5std_1_1decled93b527fca1d36ccfdf39dbfce936b4" prot="public">pybind11::detail::is_input_iterator&lt; T, void_t&lt; decltype(*std::declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T &amp; &gt;())&gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__fmt__numeric" prot="public">pybind11::detail::is_fmt_numeric</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::is_fmt_numeric&lt; T, enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1any__container" prot="public">pybind11::detail::any_container</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enabl5283fd49fb33f5c71da04f2a2f74708c" prot="public">pybind11::detail::is_fmt_numeric&lt; std::complex&lt; T &gt;, detail::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1descr" prot="public">pybind11::detail::descr</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_eigen_conformable" prot="public">pybind11::detail::EigenConformable</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__extract__stride" prot="public">pybind11::detail::eigen_extract_stride</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_map_3_01_plain_object_type_00_aca7d353488c69b762feb9ff1da45e7c" prot="public">pybind11::detail::eigen_extract_stride&lt; Eigen::Map&lt; PlainObjectType, MapOptions, StrideType &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_ref_3_01_plain_object_type_00_2ece5a85c2ce8d0e734e1a3db6e91031" prot="public">pybind11::detail::eigen_extract_stride&lt; Eigen::Ref&lt; PlainObjectType, Options, StrideType &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_eigen_props" prot="public">pybind11::detail::EigenProps</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_dense_plain&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1return__value__policy__override_3_01_return_00_01enable__if__t_3_01i184da9ad43b0913cb59beaeb2cf4ac67" prot="public">pybind11::detail::return_value_policy_override&lt; Return, enable_if_t&lt; is_eigen_dense_map&lt; Return &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__map__caster" prot="public">pybind11::detail::eigen_map_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__map_596f24ff8ce0d5964c3d4c19429856d7" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_dense_map&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f" prot="public">pybind11::detail::type_caster&lt; Eigen::Ref&lt; PlainObjectType, 0, StrideType &gt;, enable_if_t&lt; is_eigen_dense_map&lt; Eigen::Ref&lt; PlainObjectType, 0, StrideType &gt; &gt;::value &gt;&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_other&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_sparse&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1embedded__module" prot="public">pybind11::detail::embedded_module</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1function_3_01_return_07_args_8_8_8_08_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::function&lt; Return(Args...)&gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor" prot="public">pybind11::detail::npy_format_descriptor</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" prot="public">pybind11::detail::PyArrayDescr_Proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_py_array___proxy" prot="public">pybind11::detail::PyArray_Proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy" prot="public">pybind11::detail::PyVoidScalarObject_Proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1numpy__type__info" prot="public">pybind11::detail::numpy_type_info</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1numpy__internals" prot="public">pybind11::detail::numpy_internals</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__api" prot="public">pybind11::detail::npy_api</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__std__array" prot="public">pybind11::detail::is_std_array</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__std__array_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">pybind11::detail::is_std_array&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__complex" prot="public">pybind11::detail::is_complex</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__complex_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">pybind11::detail::is_complex&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info__scalar" prot="public">pybind11::detail::array_info_scalar</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info" prot="public">pybind11::detail::array_info</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">pybind11::detail::array_info&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01char_0f_n_0e_4" prot="public">pybind11::detail::array_info&lt; char[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" prot="public">pybind11::detail::array_info&lt; std::array&lt; char, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01_t_0f_n_0e_4" prot="public">pybind11::detail::array_info&lt; T[N]&gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1unchecked__reference" prot="public">pybind11::detail::unchecked_reference</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" prot="public">pybind11::detail::unchecked_mutable_reference</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01unchecked__reference_3_01_t_00_01_dim_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; unchecked_reference&lt; T, Dim &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01unchecked__mutable__reference_3_01_t_00_01_dim_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; unchecked_mutable_reference&lt; T, Dim &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4" prot="public">pybind11::detail::pyobject_caster&lt; array_t&lt; T, ExtraFlags &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1compare__buffer__info_3_01_t_00_01detail_1_1enable__if__t_3_01detailc2a3113b5c72d60380b4bdbe72e7f95e" prot="public">pybind11::detail::compare_buffer_info&lt; T, detail::enable_if_t&lt; detail::is_pod_struct&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39" prot="public">pybind11::detail::npy_format_descriptor&lt; T, enable_if_t&lt; satisfies_any_of&lt; T, std::is_arithmetic, is_complex &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01char_0f_n_0e_4" prot="public">pybind11::detail::npy_format_descriptor&lt; char[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" prot="public">pybind11::detail::npy_format_descriptor&lt; std::array&lt; char, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e" prot="public">pybind11::detail::npy_format_descriptor&lt; T, enable_if_t&lt; array_info&lt; T &gt;::is_array &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0" prot="public">pybind11::detail::npy_format_descriptor&lt; T, enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1field__descriptor" prot="public">pybind11::detail::field_descriptor</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1common__iterator" prot="public">pybind11::detail::common_iterator</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1multi__array__iterator" prot="public">pybind11::detail::multi_array_iterator</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1vectorize__arg" prot="public">pybind11::detail::vectorize_arg</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1vectorize__helper" prot="public">pybind11::detail::vectorize_helper</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01array__t_3_01_t_00_01_flags_01_4_01_4" prot="public">pybind11::detail::handle_type_name&lt; array_t&lt; T, Flags &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1self__t" prot="public">pybind11::detail::self_t</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1undefined__t" prot="public">pybind11::detail::undefined_t</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl" prot="public">pybind11::detail::op_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__sub_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_sub, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__sub_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_sub, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__add_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_add, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__add_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_add, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mul_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mul, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mul_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mul, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__truediv_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_truediv, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__truediv_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_truediv, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mod_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mod, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mod_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mod, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lshift_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lshift, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__rshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_rshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__rshift_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_rshift, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__and_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_and, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__and_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_and, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__xor_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_xor, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__xor_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_xor, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__eq_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_eq, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__eq_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_eq, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ne_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ne, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ne_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ne, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__or_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_or, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__or_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_or, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__gt_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_gt, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__gt_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_gt, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ge_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ge, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ge_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ge, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lt_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lt, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lt_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lt, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__le_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_le, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__le_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_le, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__iadd_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_iadd, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__isub_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_isub, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__imul_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_imul, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__itruediv_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_itruediv, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__imod_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_imod, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ilshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ilshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__irshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_irshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__iand_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_iand, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ixor_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ixor, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ior_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ior, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__neg_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_neg, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__pos_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_pos, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__abs_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_abs, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__invert_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_invert, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__bool_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_bool, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__int_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_int, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__float_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_float, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1generic__type" prot="public">pybind11::detail::generic_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1iterator__state" prot="public">pybind11::detail::iterator_state</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1accessor" prot="public">pybind11::detail::accessor</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1pyobject__tag" prot="public">pybind11::detail::pyobject_tag</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1object__api" prot="public">pybind11::detail::object_api</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1generic__iterator" prot="public">pybind11::detail::generic_iterator</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1kwargs__proxy" prot="public">pybind11::detail::kwargs_proxy</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1args__proxy" prot="public">pybind11::detail::args_proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1set__caster" prot="public">pybind11::detail::set_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1map__caster" prot="public">pybind11::detail::map_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1list__caster" prot="public">pybind11::detail::list_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01_type_00_01_alloc_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::vector&lt; Type, Alloc &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1list_3_01_type_00_01_alloc_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::list&lt; Type, Alloc &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__caster" prot="public">pybind11::detail::array_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1array_3_01_type_00_01_size_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::array&lt; Type, Size &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1valarray_3_01_type_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::valarray&lt; Type &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1set_3_01_key_00_01_compare_00_01_alloc_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::set&lt; Key, Compare, Alloc &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1unordered__set_3_01_key_00_01_hash_00_01_equal_00_01_alloc_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::unordered_set&lt; Key, Hash, Equal, Alloc &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1map_3_01_key_00_01_value_00_01_compare_00_01_alloc_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::map&lt; Key, Value, Compare, Alloc &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1unordered__map_3_01_key_00_01_value_00_01_ha1d55fcf466927167b709c884c3d83709" prot="public">pybind11::detail::type_caster&lt; std::unordered_map&lt; Key, Value, Hash, Equal, Alloc &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1optional__caster" prot="public">pybind11::detail::optional_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1variant__caster__visitor" prot="public">pybind11::detail::variant_caster_visitor</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1visit__helper" prot="public">pybind11::detail::visit_helper</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1variant__caster" prot="public">pybind11::detail::variant_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1variant__caster_3_01_v_3_01_ts_8_8_8_01_4_01_4" prot="public">pybind11::detail::variant_caster&lt; V&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1container__traits" prot="public">pybind11::detail::container_traits</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__comparable" prot="public">pybind11::detail::is_comparable</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__comparable_3_01_t_00_01enable__if__t_3_01container__traits_3_01_bf95472b510c7ec98a2a9a3de137465d" prot="public">pybind11::detail::is_comparable&lt; T, enable_if_t&lt; container_traits&lt; T &gt;::is_element &amp;&amp;container_traits&lt; T &gt;::is_comparable &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__comparable_3_01_t_00_01enable__if__t_3_01container__traits_3_01_t_01_4_1_1is__vector_01_4_01_4" prot="public">pybind11::detail::is_comparable&lt; T, enable_if_t&lt; container_traits&lt; T &gt;::is_vector &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__comparable_3_01_t_00_01enable__if__t_3_01container__traits_3_01_t_01_4_1_1is__pair_01_4_01_4" prot="public">pybind11::detail::is_comparable&lt; T, enable_if_t&lt; container_traits&lt; T &gt;::is_pair &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1vector__has__data__and__format" prot="public">pybind11::detail::vector_has_data_and_format</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1vector__has__data__and__format_3_01_vector_00_01enable__if__t_3_01stae830e9f188c57e1f6e9c23a110296d3" prot="public">pybind11::detail::vector_has_data_and_format&lt; Vector, enable_if_t&lt; std::is_same&lt; decltype(format_descriptor&lt; typename Vector::value_type &gt;::format(), std::declval&lt; Vector &gt;().data()), typename Vector::value_type * &gt;::value &gt; &gt;</innerclass>
    <innernamespace refid="namespacepybind11_1_1detail_1_1accessor__policies">pybind11::detail::accessor_policies</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail_1_1constexpr__impl">pybind11::detail::constexpr_impl</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail_1_1iterator__policies">pybind11::detail::iterator_policies</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1b" prot="public" static="no" strong="yes">
        <type></type>
        <name>broadcast_trivial</name>
        <enumvalue id="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1bafdc3dd34f1eba5038fce1e7cd8ad2a50" prot="public">
          <name>non_trivial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1bafaf7a4de81cc9f66f70a7927181a705d" prot="public">
          <name>c_trivial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1baca83eef092559c5a8675600843fe62ae" prot="public">
          <name>f_trivial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1342" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1342" bodyend="1342"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111" prot="public" static="no" strong="no">
        <type>int</type>
        <name>op_id</name>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a470fe6220e876c4ebc2b64ccfefe272c" prot="public">
          <name>op_add</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aa35606ea5aa408d358b831c1166ee14d" prot="public">
          <name>op_sub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111adbb4297b7572bbc63c99b0931a1350f0" prot="public">
          <name>op_mul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111abe0c2dcac1f678d828f9c3c9ebd93082" prot="public">
          <name>op_div</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0bcbf062451914e9c3952acb18e9aa7b" prot="public">
          <name>op_mod</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8a6b2a03e3fd644cb238781f70db93f5" prot="public">
          <name>op_divmod</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ace62a8cabb08f4610ecea4776f8cf54a" prot="public">
          <name>op_pow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a5213265fd4e8341836af608cd582b7eb" prot="public">
          <name>op_lshift</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3c8a1fe4da217303a0da168ff30bb433" prot="public">
          <name>op_rshift</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8aaa389799047e1707f6baf12e5f5823" prot="public">
          <name>op_and</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aba57e871afbea7cb5c4c0e6c03664388" prot="public">
          <name>op_xor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4f91c9e7ccb3d5b1f33e64256223fd09" prot="public">
          <name>op_or</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a10967d02a21bc01dfcd86fb5637b074f" prot="public">
          <name>op_neg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111acf429cbb13fc03f3aefd8a1b91df15b0" prot="public">
          <name>op_pos</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2a6aef482b2afa4b6f2c0dfce5735016" prot="public">
          <name>op_abs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae9bf41774fcb09c29dac33815c462bd6" prot="public">
          <name>op_invert</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6916b0edb673290480067933104651a7" prot="public">
          <name>op_int</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a858ca6cbafee2ac3d460eadecabe1cd4" prot="public">
          <name>op_long</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a1868d4eac5f6a7410d991327ee9f72fd" prot="public">
          <name>op_float</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6621601bccd3103b31c5b91299c9d523" prot="public">
          <name>op_str</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111af5941c78ed8e958cdbbcf65959ef9679" prot="public">
          <name>op_cmp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab132f328158cd977facabb032216c0e5" prot="public">
          <name>op_gt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad96c9b793d3066ea0bfaa1c69ae7015d" prot="public">
          <name>op_ge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a840dff8f78c9a5d04e75f5081770466f" prot="public">
          <name>op_lt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61366ca80a86d929fe8cdc1aff462978" prot="public">
          <name>op_le</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a95b027089c3f903ebf6eff6f20f33857" prot="public">
          <name>op_eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a88c62cadf3a6b2a097509ab4da63f9cf" prot="public">
          <name>op_ne</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6c22240c620ae8ad7088b9433b47611e" prot="public">
          <name>op_iadd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4c366b40fdda341e398d774cf2da377c" prot="public">
          <name>op_isub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2817d127afaeefc19e621bd96fd45cda" prot="public">
          <name>op_imul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a378a817dee5261db865c292c359fc29a" prot="public">
          <name>op_idiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab408eb8a0b02d58a933a0241bdae1f26" prot="public">
          <name>op_imod</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a9c8c1321a0e321fe16f265012ca7c0e2" prot="public">
          <name>op_ilshift</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0e7857a94c8daedb1100dfee8696a250" prot="public">
          <name>op_irshift</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad609efc14d511ab47f7f6c28a097adc1" prot="public">
          <name>op_iand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ac00548bfe4254699a041b2a4eb9b3ace" prot="public">
          <name>op_ixor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab7560e54732a74de5be6f1718245c199" prot="public">
          <name>op_ior</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61fc59a9a4870673bc6a1b9e9e72a522" prot="public">
          <name>op_complex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae96c455d4d20836c2646cb5b9cef17b3" prot="public">
          <name>op_bool</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3e78b5e0ef453a67ebea8d3c84cfa74e" prot="public">
          <name>op_nonzero</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a47a5929acd6bd00206a871960366a4d8" prot="public">
          <name>op_repr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" prot="public">
          <name>op_truediv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" prot="public">
          <name>op_itruediv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration with all supported operator types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="25" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="25" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53" prot="public" static="no" strong="no">
        <type>int</type>
        <name>op_type</name>
        <enumvalue id="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" prot="public">
          <name>op_l</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" prot="public">
          <name>op_r</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" prot="public">
          <name>op_u</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="34" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="34" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ace0ce3f07537063fa8d44179815827ed" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_instantiation</ref>&lt; <ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>, T &gt;</type>
        <definition>using pybind11::detail::is_call_guard = typedef is_instantiation&lt;call_guard, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_call_guard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" line="456" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1aac066cf9ada7f5415c92192856e5a2d5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" kindref="member">exactly_one_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1ace0ce3f07537063fa8d44179815827ed" kindref="member">is_call_guard</ref>, <ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>&lt;&gt;, Extra... &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::extract_guard_t = typedef typename exactly_one_t&lt;is_call_guard, call_guard&lt;&gt;, Extra...&gt;::type</definition>
        <argsstring></argsstring>
        <name>extract_guard_t</name>
        <briefdescription>
<para>Extract the <computeroutput>type</computeroutput> from the first <computeroutput><ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref></computeroutput> in <computeroutput>Extras...</computeroutput> (or <computeroutput><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">void_type</ref></computeroutput> if none found) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" line="460" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt; std::is_pointer&lt; <ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t</ref>&lt; T &gt; &gt;::value, typename std::add_pointer&lt; <ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref>&lt; T &gt; &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>, typename std::add_lvalue_reference&lt; <ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref>&lt; T &gt; &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt;</type>
        <definition>using pybind11::detail::cast_op_type = typedef conditional_t&lt;std::is_pointer&lt;remove_reference_t&lt;T&gt; &gt;::value, typename std::add_pointer&lt;intrinsic_t&lt;T&gt; &gt;::type, typename std::add_lvalue_reference&lt;intrinsic_t&lt;T&gt; &gt;::type&gt;</definition>
        <argsstring></argsstring>
        <name>cast_op_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine suitable casting operator for pointer-or-lvalue-casting type casters. The type caster needs to provide <computeroutput>operator T*()</computeroutput> and <computeroutput>operator T&amp;()</computeroutput> operators.</para>
<para>If the type supports moving the value away via an <computeroutput>operator T&amp;&amp;() &amp;&amp;</computeroutput> method, it should use <computeroutput>movable_cast_op_type</computeroutput> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="734" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a3e4f52c827f0391c3ca8166590c559c9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt; std::is_pointer&lt; typename std::remove_reference&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt;::value, typename std::add_pointer&lt; <ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref>&lt; T &gt; &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>, <ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt; std::is_rvalue_reference&lt; T &gt;::value, typename std::add_rvalue_reference&lt; <ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref>&lt; T &gt; &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>, typename std::add_lvalue_reference&lt; <ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref>&lt; T &gt; &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt; &gt;</type>
        <definition>using pybind11::detail::movable_cast_op_type = typedef conditional_t&lt;std::is_pointer&lt;typename std::remove_reference&lt;T&gt;::type&gt;::value, typename std::add_pointer&lt;intrinsic_t&lt;T&gt; &gt;::type, conditional_t&lt;std::is_rvalue_reference&lt;T&gt;::value, typename std::add_rvalue_reference&lt;intrinsic_t&lt;T&gt; &gt;::type, typename std::add_lvalue_reference&lt;intrinsic_t&lt;T&gt; &gt;::type&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>movable_cast_op_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine suitable casting operator for a type caster with a movable value. Such a type caster needs to provide <computeroutput>operator T*()</computeroutput>, <computeroutput>operator T&amp;()</computeroutput>, and <computeroutput>operator T&amp;&amp;() &amp;&amp;</computeroutput>. The latter will be called in appropriate contexts where the value can be moved rather than copied.</para>
<para>These operator are automatically provided when using the PYBIND11_TYPE_CASTER macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="747" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt; <ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt; &gt;</type>
        <definition>using pybind11::detail::make_caster = typedef type_caster&lt;intrinsic_t&lt;type&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>make_caster</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="858" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1aaff3785d06624bbc661f3afaf92cff7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" kindref="member">any_of</ref>&lt; std::is_same&lt; CharT, char &gt;, std::is_same&lt; CharT, char16_t &gt;, std::is_same&lt; CharT, char32_t &gt;, std::is_same&lt; CharT, wchar_t &gt; &gt;</type>
        <definition>using pybind11::detail::is_std_char_type = typedef any_of&lt; std::is_same&lt;CharT, char&gt;, std::is_same&lt;CharT, char16_t&gt;, std::is_same&lt;CharT, char32_t&gt;, std::is_same&lt;CharT, wchar_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_std_char_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="910" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a8056f1ce70548f8a23d7557c95331ea4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
          <param>
            <type>typename holder_type</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt; std::is_copy_constructible&lt; holder_type &gt;::value, <ref refid="structpybind11_1_1detail_1_1copyable__holder__caster" kindref="compound">copyable_holder_caster</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>, holder_type &gt;, <ref refid="structpybind11_1_1detail_1_1move__only__holder__caster" kindref="compound">move_only_holder_caster</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>, holder_type &gt; &gt;</type>
        <definition>using pybind11::detail::type_caster_holder = typedef conditional_t&lt;std::is_copy_constructible&lt;holder_type&gt;::value, copyable_holder_caster&lt;type, holder_type&gt;, move_only_holder_caster&lt;type, holder_type&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>type_caster_holder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1437" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ab96eb0dc6544902fbae045953bd5075f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1ad2bf911ee252ecbcf52d2ddec897ed0a" kindref="member">satisfies_none_of</ref>&lt; T, std::is_void, std::is_pointer, std::is_reference, std::is_const &gt;</type>
        <definition>using pybind11::detail::move_is_plain_type = typedef satisfies_none_of&lt;T, std::is_void, std::is_pointer, std::is_reference, std::is_const &gt;</definition>
        <argsstring></argsstring>
        <name>move_is_plain_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1496" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a9b95d0bea18a9cb7599182d1f32a7f6a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a41bed277fb6af2155857a186b18c428e" kindref="member">none_of</ref>&lt; <ref refid="structpybind11_1_1detail_1_1move__always" kindref="compound">move_always</ref>&lt; T &gt;, <ref refid="structpybind11_1_1detail_1_1move__if__unreferenced" kindref="compound">move_if_unreferenced</ref>&lt; T &gt; &gt;</type>
        <definition>using pybind11::detail::move_never = typedef none_of&lt;move_always&lt;T&gt;, move_if_unreferenced&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>move_never</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1513" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;(std::is_reference&lt; <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt;::value||std::is_pointer&lt; <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt;::value) &amp;&amp;!std::is_base_of&lt; <ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref>, <ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt; &gt;::value &gt;</type>
        <definition>using pybind11::detail::cast_is_temporary_value_reference = typedef bool_constant&lt; (std::is_reference&lt;type&gt;::value || std::is_pointer&lt;type&gt;::value) &amp;&amp; !std::is_base_of&lt;type_caster_generic, make_caster&lt;type&gt; &gt;::value &gt;</definition>
        <argsstring></argsstring>
        <name>cast_is_temporary_value_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1519" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a98f587c0f16ab94b18720beb604fd6b6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ret_type</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference</ref>&lt; ret_type &gt;::value, <ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; ret_type &gt;, <ref refid="structpybind11_1_1detail_1_1overload__unused" kindref="compound">overload_unused</ref> &gt;</type>
        <definition>using pybind11::detail::overload_caster_t = typedef conditional_t&lt; cast_is_temporary_value_reference&lt;ret_type&gt;::value, make_caster&lt;ret_type&gt;, overload_unused&gt;</definition>
        <argsstring></argsstring>
        <name>overload_caster_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1629" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ab290ef99c5e3c87236b1fec3c277c6e4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename value_type</type>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; std::type_index, value_type, <ref refid="structpybind11_1_1detail_1_1type__hash" kindref="compound">type_hash</ref>, <ref refid="structpybind11_1_1detail_1_1type__equal__to" kindref="compound">type_equal_to</ref> &gt;</type>
        <definition>using pybind11::detail::type_map = typedef std::unordered_map&lt;std::type_index, value_type, type_hash, type_equal_to&gt;</definition>
        <argsstring></argsstring>
        <name>type_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="463" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::enable_if_t = typedef typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <briefdescription>
<para>from <bold>cpp_future</bold> import (convenient aliases from C++14/17) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="495" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; B, T, F &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::conditional_t = typedef typename std::conditional&lt;B, T, F&gt;::type</definition>
        <argsstring></argsstring>
        <name>conditional_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="496" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ada18e66a8c736bd49e83f6dad6b39af5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::remove_cv_t = typedef typename std::remove_cv&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cv_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="497" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_reference&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::remove_reference_t = typedef typename std::remove_reference&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_reference_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="498" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1make__index__sequence__impl" kindref="compound">make_index_sequence_impl</ref>&lt; N &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::make_index_sequence = typedef typename make_index_sequence_impl&lt;N&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_index_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="509" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a87ae472e87544b8da6c2bf99a90387db" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool...</type>
            <declname>Bs</declname>
            <defname>Bs</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1select__indices__impl" kindref="compound">select_indices_impl</ref>&lt; <ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt;&gt;, 0, Bs... &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::select_indices = typedef typename select_indices_impl&lt;index_sequence&lt;&gt;, 0, Bs...&gt;::type</definition>
        <argsstring></argsstring>
        <name>select_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="516" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, B &gt;</type>
        <definition>using pybind11::detail::bool_constant = typedef std::integral_constant&lt;bool, B&gt;</definition>
        <argsstring></argsstring>
        <name>bool_constant</name>
        <briefdescription>
<para>Backports of std::bool_constant and std::negation to accomodate older compilers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="519" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ad40a4dd56dd69385cf586cb8176eccf5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1void__t__impl" kindref="compound">void_t_impl</ref>&lt; Ts... &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::void_t = typedef typename void_t_impl&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="523" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; <ref refid="structpybind11_1_1detail_1_1bools" kindref="compound">bools</ref>&lt; Ts::value..., true &gt;, <ref refid="structpybind11_1_1detail_1_1bools" kindref="compound">bools</ref>&lt; true, Ts::value... &gt; &gt;</type>
        <definition>using pybind11::detail::all_of = typedef std::is_same&lt; bools&lt;Ts::value..., true&gt;, bools&lt;true, Ts::value...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>all_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="531" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt; <ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; Ts &gt;... &gt; &gt;</type>
        <definition>using pybind11::detail::any_of = typedef negation&lt;all_of&lt;negation&lt;Ts&gt;...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>any_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="534" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a41bed277fb6af2155857a186b18c428e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" kindref="member">any_of</ref>&lt; Ts... &gt; &gt;</type>
        <definition>using pybind11::detail::none_of = typedef negation&lt;any_of&lt;Ts...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>none_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="541" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ac2cb0c7cc36792e33ee90c23f8ed0a15" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class...</type>
            <declname>Predicates</declname>
            <defname>Predicates</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt; Predicates&lt; T &gt;... &gt;</type>
        <definition>using pybind11::detail::satisfies_all_of = typedef all_of&lt;Predicates&lt;T&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>satisfies_all_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="543" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ad8177bd79cbc1e71965deb6716eb209a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class...</type>
            <declname>Predicates</declname>
            <defname>Predicates</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" kindref="member">any_of</ref>&lt; Predicates&lt; T &gt;... &gt;</type>
        <definition>using pybind11::detail::satisfies_any_of = typedef any_of&lt;Predicates&lt;T&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>satisfies_any_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="544" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ad2bf911ee252ecbcf52d2ddec897ed0a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class...</type>
            <declname>Predicates</declname>
            <defname>Predicates</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a41bed277fb6af2155857a186b18c428e" kindref="member">none_of</ref>&lt; Predicates&lt; T &gt;... &gt;</type>
        <definition>using pybind11::detail::satisfies_none_of = typedef none_of&lt;Predicates&lt;T&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>satisfies_none_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="545" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1intrinsic__type" kindref="compound">intrinsic_type</ref>&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::intrinsic_t = typedef typename intrinsic_type&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>intrinsic_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="560" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
          <param>
            <type>typename Default</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1exactly__one" kindref="compound">exactly_one</ref>&lt; Predicate, Default, Ts... &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::exactly_one_t = typedef typename exactly_one&lt;Predicate, Default, Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>exactly_one_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="617" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a1fffccaed4292498c73fe2f97a229d6c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1deferred__type" kindref="compound">deferred_type</ref>&lt; T, Us... &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::deferred_t = typedef typename deferred_type&lt;T, Us...&gt;::type</definition>
        <argsstring></argsstring>
        <name>deferred_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="621" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a5a4e15f62190f6790515a3c95146740d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt; std::is_base_of&lt; Base, Derived &gt;::value &amp;&amp;!std::is_same&lt; Base, Derived &gt;::value &gt;</type>
        <definition>using pybind11::detail::is_strict_base_of = typedef bool_constant&lt; std::is_base_of&lt;Base, Derived&gt;::value &amp;&amp; !std::is_same&lt;Base, Derived&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>is_strict_base_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like is_base_of, but requires a strict base (i.e. <computeroutput>is_strict_base_of&lt;T, T&gt;::value == false</computeroutput>, unlike <computeroutput>std::is_base_of</computeroutput>) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="625" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Base</declname>
            <defname>Base</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="structpybind11_1_1detail_1_1is__template__base__of__impl" kindref="compound">is_template_base_of_impl</ref>&lt; Base &gt;::check((<ref refid="namespacepybind11_1_1detail_1ada18e66a8c736bd49e83f6dad6b39af5" kindref="member">remove_cv_t</ref>&lt; T &gt; *) nullptr))</type>
        <definition>using pybind11::detail::is_template_base_of = typedef decltype(is_template_base_of_impl&lt;Base&gt;::check((remove_cv_t&lt;T&gt;*)nullptr))</definition>
        <argsstring></argsstring>
        <name>is_template_base_of</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a template is the base of a type. For example: <computeroutput>is_template_base_of&lt;Base, T&gt;</computeroutput> is true if <computeroutput>struct T : Base&lt;U&gt; {}</computeroutput> where U can be anything </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="638" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a17748d0eac8453878973d58f2947e6d0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_instantiation</ref>&lt; std::shared_ptr, T &gt;</type>
        <definition>using pybind11::detail::is_shared_ptr = typedef is_instantiation&lt;std::shared_ptr, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_shared_ptr</name>
        <briefdescription>
<para>Check if T is std::shared_ptr&lt;U&gt; where U can be anything. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="651" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a372a80fcaa3d983e7765574d31538859" prot="public" static="no">
        <type>bool[]</type>
        <definition>using pybind11::detail::expand_side_effects = typedef bool[]</definition>
        <argsstring></argsstring>
        <name>expand_side_effects</name>
        <briefdescription>
<para>Apply a function over each element of a parameter pack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="666" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" prot="public" static="no">
        <type>EIGEN_DEFAULT_DENSE_INDEX_TYPE</type>
        <definition>using pybind11::detail::EigenIndex = typedef EIGEN_DEFAULT_DENSE_INDEX_TYPE</definition>
        <argsstring></argsstring>
        <name>EigenIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="50" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of</ref>&lt; Eigen::DenseBase, T &gt;, std::is_base_of&lt; Eigen::MapBase&lt; T, Eigen::ReadOnlyAccessors &gt;, T &gt; &gt;</type>
        <definition>using pybind11::detail::is_eigen_dense_map = typedef all_of&lt;is_template_base_of&lt;Eigen::DenseBase, T&gt;, std::is_base_of&lt;Eigen::MapBase&lt;T, Eigen::ReadOnlyAccessors&gt;, T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_eigen_dense_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="54" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_base_of&lt; Eigen::MapBase&lt; T, Eigen::WriteAccessors &gt;, T &gt;</type>
        <definition>using pybind11::detail::is_eigen_mutable_map = typedef std::is_base_of&lt;Eigen::MapBase&lt;T, Eigen::WriteAccessors&gt;, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_eigen_mutable_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="55" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a1d93eef8d648e5961ee24df6bed11208" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt; <ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map</ref>&lt; T &gt; &gt;, <ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of</ref>&lt; Eigen::PlainObjectBase, T &gt; &gt;</type>
        <definition>using pybind11::detail::is_eigen_dense_plain = typedef all_of&lt;negation&lt;is_eigen_dense_map&lt;T&gt; &gt;, is_template_base_of&lt;Eigen::PlainObjectBase, T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_eigen_dense_plain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="56" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1aede2f7fd875e4a0813a90270d9c3c625" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of</ref>&lt; Eigen::SparseMatrixBase, T &gt;</type>
        <definition>using pybind11::detail::is_eigen_sparse = typedef is_template_base_of&lt;Eigen::SparseMatrixBase, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_eigen_sparse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="57" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a8bbb502df4638305b839d608cd60ad9e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of</ref>&lt; Eigen::EigenBase, T &gt;, <ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" kindref="member">any_of</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map</ref>&lt; T &gt;, <ref refid="namespacepybind11_1_1detail_1a1d93eef8d648e5961ee24df6bed11208" kindref="member">is_eigen_dense_plain</ref>&lt; T &gt;, <ref refid="namespacepybind11_1_1detail_1aede2f7fd875e4a0813a90270d9c3c625" kindref="member">is_eigen_sparse</ref>&lt; T &gt; &gt;&gt; &gt;</type>
        <definition>using pybind11::detail::is_eigen_other = typedef all_of&lt; is_template_base_of&lt;Eigen::EigenBase, T&gt;, negation&lt;any_of&lt;is_eigen_dense_map&lt;T&gt;, is_eigen_dense_plain&lt;T&gt;, is_eigen_sparse&lt;T&gt; &gt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_eigen_other</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="62" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a4d8e4fbda3de32503264bcc1973528c8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::remove_all_extents_t = typedef typename array_info&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_all_extents_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="287" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a1a4721eca1b368180b3bf47a59279a07" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt; std::is_standard_layout&lt; T &gt;, std::is_trivially_copyable&lt; T &gt;, <ref refid="namespacepybind11_1_1detail_1ad2bf911ee252ecbcf52d2ddec897ed0a" kindref="member">satisfies_none_of</ref>&lt; T, std::is_reference, std::is_array, <ref refid="structpybind11_1_1detail_1_1is__std__array" kindref="compound">is_std_array</ref>, std::is_arithmetic, <ref refid="structpybind11_1_1detail_1_1is__complex" kindref="compound">is_complex</ref>, std::is_enum &gt; &gt;</type>
        <definition>using pybind11::detail::is_pod_struct = typedef all_of&lt; std::is_standard_layout&lt;T&gt;, std::is_trivially_copyable&lt;T&gt;, satisfies_none_of&lt;T, std::is_reference, std::is_array, is_std_array, std::is_arithmetic, is_complex, std::is_enum&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_pod_struct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="289" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename std::add_pointer&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        <definition>using pybind11::detail::array_iterator = typedef typename std::add_pointer&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>array_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1225" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1aba3678fbd1185c3e875ec436b012bd5f" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>&lt; <ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr" kindref="compound">accessor_policies::obj_attr</ref> &gt;</type>
        <definition>using pybind11::detail::obj_attr_accessor = typedef accessor&lt;accessor_policies::obj_attr&gt;</definition>
        <argsstring></argsstring>
        <name>obj_attr_accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="38" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1afe653288f3797c8a5626446af6656895" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>&lt; <ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr" kindref="compound">accessor_policies::str_attr</ref> &gt;</type>
        <definition>using pybind11::detail::str_attr_accessor = typedef accessor&lt;accessor_policies::str_attr&gt;</definition>
        <argsstring></argsstring>
        <name>str_attr_accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="39" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1acd690ad872191cefa9a070cee0362cda" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>&lt; <ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item" kindref="compound">accessor_policies::generic_item</ref> &gt;</type>
        <definition>using pybind11::detail::item_accessor = typedef accessor&lt;accessor_policies::generic_item&gt;</definition>
        <argsstring></argsstring>
        <name>item_accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="40" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a3b97805a9767c683b5b999a747e19428" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>&lt; <ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item" kindref="compound">accessor_policies::sequence_item</ref> &gt;</type>
        <definition>using pybind11::detail::sequence_accessor = typedef accessor&lt;accessor_policies::sequence_item&gt;</definition>
        <argsstring></argsstring>
        <name>sequence_accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="41" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a65ba47be7485efc588a4e1a06f235d57" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>&lt; <ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item" kindref="compound">accessor_policies::list_item</ref> &gt;</type>
        <definition>using pybind11::detail::list_accessor = typedef accessor&lt;accessor_policies::list_item&gt;</definition>
        <argsstring></argsstring>
        <name>list_accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="42" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1af5fb98309375f32c5766731b02966426" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>&lt; <ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item" kindref="compound">accessor_policies::tuple_item</ref> &gt;</type>
        <definition>using pybind11::detail::tuple_accessor = typedef accessor&lt;accessor_policies::tuple_item&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="43" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a016b3ed4ebf8cb36fcbbeed6012bc32e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_base_of&lt; <ref refid="classpybind11_1_1detail_1_1pyobject__tag" kindref="compound">pyobject_tag</ref>, <ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t</ref>&lt; T &gt; &gt;</type>
        <definition>using pybind11::detail::is_pyobject = typedef std::is_base_of&lt;pyobject_tag, remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_pyobject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="47" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ac76d84208a728a87ca2d8d8c2bcc82e2" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator</ref>&lt; <ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" kindref="compound">iterator_policies::sequence_fast_readonly</ref> &gt;</type>
        <definition>using pybind11::detail::tuple_iterator = typedef generic_iterator&lt;iterator_policies::sequence_fast_readonly&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="628" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a84ada7a5368f23523f2b6de71300590e" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator</ref>&lt; <ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" kindref="compound">iterator_policies::sequence_fast_readonly</ref> &gt;</type>
        <definition>using pybind11::detail::list_iterator = typedef generic_iterator&lt;iterator_policies::sequence_fast_readonly&gt;</definition>
        <argsstring></argsstring>
        <name>list_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="629" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a61d218894f9d6ae7475f099f5ff77cdb" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator</ref>&lt; <ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite" kindref="compound">iterator_policies::sequence_slow_readwrite</ref> &gt;</type>
        <definition>using pybind11::detail::sequence_iterator = typedef generic_iterator&lt;iterator_policies::sequence_slow_readwrite&gt;</definition>
        <argsstring></argsstring>
        <name>sequence_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="635" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1acf6e994ed7e8cd8e1b9f6b493314fe69" prot="public" static="no">
        <type><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator</ref>&lt; <ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly" kindref="compound">iterator_policies::dict_readonly</ref> &gt;</type>
        <definition>using pybind11::detail::dict_iterator = typedef generic_iterator&lt;iterator_policies::dict_readonly&gt;</definition>
        <argsstring></argsstring>
        <name>dict_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="636" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a1bb7b2d2b6ae7427db48c94235737b7e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_base_of&lt; <ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>, T &gt;</type>
        <definition>using pybind11::detail::is_keyword = typedef std::is_base_of&lt;arg, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_keyword</name>
        <briefdescription>
<para>Python argument categories (using PEP 448 terms) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="665" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a867b6e0e1acc1b3f71bb55c6cc4f73bc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; <ref refid="classpybind11_1_1detail_1_1args__proxy" kindref="compound">args_proxy</ref>, T &gt;</type>
        <definition>using pybind11::detail::is_s_unpacking = typedef std::is_same&lt;args_proxy, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_s_unpacking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="666" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ac9db0f33b38b7df25ecd92538337e6cf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; <ref refid="classpybind11_1_1detail_1_1kwargs__proxy" kindref="compound">kwargs_proxy</ref>, T &gt;</type>
        <definition>using pybind11::detail::is_ds_unpacking = typedef std::is_same&lt;kwargs_proxy, T&gt;</definition>
        <argsstring></argsstring>
        <name>is_ds_unpacking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="667" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1ac67e99cefc4b762e319df00b115858c6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1ad2bf911ee252ecbcf52d2ddec897ed0a" kindref="member">satisfies_none_of</ref>&lt; T, <ref refid="namespacepybind11_1_1detail_1a1bb7b2d2b6ae7427db48c94235737b7e" kindref="member">is_keyword</ref>, <ref refid="namespacepybind11_1_1detail_1a867b6e0e1acc1b3f71bb55c6cc4f73bc" kindref="member">is_s_unpacking</ref>, <ref refid="namespacepybind11_1_1detail_1ac9db0f33b38b7df25ecd92538337e6cf" kindref="member">is_ds_unpacking</ref> &gt;</type>
        <definition>using pybind11::detail::is_positional = typedef satisfies_none_of&lt;T, is_keyword, is_s_unpacking, is_ds_unpacking &gt;</definition>
        <argsstring></argsstring>
        <name>is_positional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="668" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a20c5044dcc99c2b2cb8ed11228844c5e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1ad8177bd79cbc1e71965deb6716eb209a" kindref="member">satisfies_any_of</ref>&lt; T, <ref refid="namespacepybind11_1_1detail_1a1bb7b2d2b6ae7427db48c94235737b7e" kindref="member">is_keyword</ref>, <ref refid="namespacepybind11_1_1detail_1ac9db0f33b38b7df25ecd92538337e6cf" kindref="member">is_ds_unpacking</ref> &gt;</type>
        <definition>using pybind11::detail::is_keyword_or_ds = typedef satisfies_any_of&lt;T, is_keyword, is_ds_unpacking&gt;</definition>
        <argsstring></argsstring>
        <name>is_keyword_or_ds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="671" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a5fcc977e92be71760b66c8c671e79634" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt; std::is_lvalue_reference&lt; T &gt;::value, <ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t</ref>&lt; U &gt; &amp;, <ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t</ref>&lt; U &gt; &amp;&amp; &gt;</type>
        <definition>using pybind11::detail::forwarded_type = typedef conditional_t&lt; std::is_lvalue_reference&lt;T&gt;::value, remove_reference_t&lt;U&gt; &amp;, remove_reference_t&lt;U&gt; &amp;&amp;&gt;</definition>
        <argsstring></argsstring>
        <name>forwarded_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extracts an const lvalue reference or rvalue reference for U based on the type of T (e.g. for forwarding a container element). Typically used indirect via <ref refid="namespacepybind11_1_1detail_1a5fcc977e92be71760b66c8c671e79634" kindref="member">forwarded_type()</ref>, below. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h" line="55" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepybind11_1_1detail_1a41621df82cdd8d4575b24327e30a2d09" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; std::is_same&lt; decltype(std::declval&lt; Vector &gt;()[typename Vector::size_type()]), typename Vector::value_type &amp; &gt; &gt;</type>
        <definition>using pybind11::detail::vector_needs_copy = typedef negation&lt; std::is_same&lt;decltype(std::declval&lt;Vector&gt;()[typename Vector::size_type()]), typename Vector::value_type &amp;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>vector_needs_copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="257" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref> * &gt; &amp;</type>
        <definition>std::vector&lt;type_info *&gt;&amp; pybind11::detail::bases</definition>
        <argsstring></argsstring>
        <name>bases</name>
        <initializer>{
    std::vector&lt;PyTypeObject *&gt; check</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="167" column="34" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1ad934593cede2b58973c87c2f870e1c2b" prot="public" static="no" mutable="no">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; pybind11::detail::type_dict</definition>
        <argsstring></argsstring>
        <name>type_dict</name>
        <initializer>= <ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().registered_types_py</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="172" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" prot="public" static="no" mutable="no">
        <type>const std::type_info &amp;</type>
        <definition>const std::type_info&amp; pybind11::detail::tp</definition>
        <argsstring></argsstring>
        <name>tp</name>
        <initializer>{
    <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> <ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> = detail::get_type_handle(tp, false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="435" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" prot="public" static="no" mutable="no">
        <type>const <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref> *</type>
        <definition>const detail::type_info* pybind11::detail::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <initializer>{
    auto &amp;instances = <ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().registered_instances</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="490" column="52" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a33c4d7ef0a3ea3fc3c06ec4e58ee050c" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto pybind11::detail::range</definition>
        <argsstring></argsstring>
        <name>range</name>
        <initializer>= instances.equal_range(ptr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="492" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" prot="public" static="no" mutable="no">
        <type>Args &amp;&amp;</type>
        <definition>Args&amp;&amp; pybind11::detail::args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <initializer>{ return std::move(d) + <ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(&quot;, &quot;) + concat(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" line="178" column="37" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a7c57971f31ebe6fd8eb4fa9c45cd2367" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref></type>
        <definition>const self_t pybind11::detail::self</definition>
        <argsstring></argsstring>
        <name>self</name>
        <initializer>= <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="41" column="21" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" prot="public" static="no" mutable="no">
        <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        <definition>size_t pybind11::detail::Patient</definition>
        <argsstring></argsstring>
        <name>Patient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1382" column="29" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" prot="public" static="no" mutable="no">
        <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref> <ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref> &amp;</type>
        <definition>size_t function_call&amp; pybind11::detail::call</definition>
        <argsstring></argsstring>
        <name>call</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1382" column="51" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" prot="public" static="no" mutable="no">
        <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref> <ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref> <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>size_t function_call handle pybind11::detail::ret</definition>
        <argsstring></argsstring>
        <name>ret</name>
        <initializer>{
    <ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(
        Nurse   == 0 ? ret : Nurse   &lt;= call.args.size() ? call.args[Nurse   - 1] : <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(),
        <ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref> == 0 ? ret : <ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref> &lt;= call.args.size() ? call.args[<ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref> - 1] : <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>()
    )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1382" column="63" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a3c1d40520bceafb159eda9e05dd49a48" prot="public" static="no" mutable="no">
        <type><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref></type>
        <definition>dict pybind11::detail::kwargs</definition>
        <argsstring></argsstring>
        <name>kwargs</name>
        <initializer>{
    auto strings = <ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>(args.size())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1564" column="27" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1ac78423c569a1c1a857367af9748e1d39" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto pybind11::detail::sep</definition>
        <argsstring></argsstring>
        <name>sep</name>
        <initializer>= <ref refid="classpybind11_1_1dict_1aed24c6a2b7fb47ec8a20fc9e19f63dd1" kindref="member">kwargs.contains</ref>(&quot;sep&quot;) ? kwargs[&quot;sep&quot;] : cast(&quot; &quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1569" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a7bd3cf79f3ad1f0c79b9839e6834fca7" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto pybind11::detail::line</definition>
        <argsstring></argsstring>
        <name>line</name>
        <initializer>= sep.attr(&quot;join&quot;)(strings)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1570" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" prot="public" static="no" mutable="no">
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::detail::file</definition>
        <argsstring></argsstring>
        <name>file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1572" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepybind11_1_1detail_1a5f8719feb140b42b4b7a31770a7f0f84" prot="public" static="no" mutable="no">
        <type></type>
        <definition>pybind11::detail::else</definition>
        <argsstring></argsstring>
        <name>else</name>
        <initializer>{
        try {
            <ref refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" kindref="member">file</ref> = module::import(&quot;sys&quot;).attr(&quot;stdout&quot;);
        } catch (const <ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref> &amp;) {
            
            return;
        }
    }

    auto <ref refid="namespacepybind11_1_1detail_1af9b806016c247eaa721c7150fecdd5de" kindref="member">write</ref> = file.attr(&quot;write&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1575" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1575" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::keep_alive_impl</definition>
        <argsstring>(size_t Nurse, size_t Patient, function_call &amp;call, handle ret)</argsstring>
        <name>keep_alive_impl</name>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
          <declname>Nurse</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
          <declname>Patient</declname>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref> &amp;</type>
          <declname>call</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" line="118" column="13" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a92e34409e065a8419a307952bec673b7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>named</declname>
            <defname>named</defname>
            <defval>constexpr_sum(std::is_base_of&lt;arg, Extra&gt;::value...)</defval>
          </param>
          <param>
            <type>size_t</type>
            <declname>self</declname>
            <defname>self</defname>
            <defval>constexpr_sum(std::is_same&lt;is_method, Extra&gt;::value...)</defval>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool pybind11::detail::expected_num_args</definition>
        <argsstring>(size_t nargs, bool has_args, bool has_kwargs)</argsstring>
        <name>expected_num_args</name>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
          <declname>nargs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_args</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_kwargs</declname>
        </param>
        <briefdescription>
<para>Check the number of named arguments at compile time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" line="466" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" bodystart="466" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aee7739636a3f44597b68656d476bb41e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyTypeObject *</type>
        <definition>PyTypeObject * pybind11::detail::make_static_property_type</definition>
        <argsstring>()</argsstring>
        <name>make_static_property_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>static_property</computeroutput> is the same as a <computeroutput>property</computeroutput> but the <computeroutput>__get__()</computeroutput> and <computeroutput>__set__()</computeroutput> methods are modified to always use the object type instead of a concrete instance. Return value: New reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="38" column="21" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="38" bodyend="68" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="36" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ae99453a6a2f0d9cfa4bc1500a150e016" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyTypeObject *</type>
        <definition>PyTypeObject * pybind11::detail::make_default_metaclass</definition>
        <argsstring>()</argsstring>
        <name>make_default_metaclass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This metaclass is assigned by default to all <ref refid="namespacepybind11" kindref="compound">pybind11</ref> types and is required in order for static properties to function correctly. Users may override this using <computeroutput>py::metaclass</computeroutput>. Return value: New reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="151" column="21" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="151" bodyend="184" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="37" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4aad17fe209f5c6187910481e33654f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * pybind11::detail::make_object_base_type</definition>
        <argsstring>(PyTypeObject *metaclass)</argsstring>
        <name>make_object_base_type</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>metaclass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the type which can be used as a common base for all classes. This is needed in order to satisfy Python&apos;s requirements for multiple inheritance. Return value: New reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="350" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="350" bodyend="387" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="38" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a5e1f5d819b0c2dfe52442c919296a3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <defval>2</defval>
          </param>
          <param>
            <type>int</type>
            <defval>2</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref> *&amp;</type>
        <definition>internals*&amp; pybind11::detail::get_internals_ptr</definition>
        <argsstring>()</argsstring>
        <name>get_internals_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="68" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a467e32cfb22b4efc77c489b9d4663164" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::__attribute__</definition>
        <argsstring>((noinline)) inline internals &amp;get_internals()</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noinline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="70" column="2" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="70" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a7920862bbd224b2e0a9a2b02325b4b39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; decltype(<ref refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" kindref="member">internals::registered_types_py</ref>)::<ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref>, bool &gt;</type>
        <definition>std::pair&lt; decltype(internals::registered_types_py)::iterator, bool &gt; pybind11::detail::all_type_info_get_cache</definition>
        <argsstring>(PyTypeObject *type)</argsstring>
        <name>all_type_info_get_cache</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1389" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1389" bodyend="1406" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="164" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aeb4a9b9dcaab655056540151fa1da0e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::__attribute__</definition>
        <argsstring>((noinline)) inline void all_type_info_populate(PyTypeObject *t</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noinline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a single <ref refid="namespacepybind11" kindref="compound">pybind11</ref> type info for a python type. Returns nullptr if neither the type nor any ancestors are pybind11-registered. Throws an exception if there are multiple bases<ndash/>use <computeroutput>all_type_info</computeroutput> instead if you want to support multiple bases.</para>
<para>Extracts C++ value and holder pointer references from an instance (which may contain multiple values/holders for python-side multiple inheritance) that match the given type. Throws an error if the given type (or ValueType, if omitted) is not a <ref refid="namespacepybind11" kindref="compound">pybind11</ref> base of the given instance. If <computeroutput>find_type</computeroutput> is omitted (or explicitly specified as nullptr) the first value/holder are returned, regardless of type (and the resulting .type will be nullptr).</para>
<para>The returned object should be short-lived: in particular, it must not outlive the called-upon instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="167" column="2" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="236" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a624a1a1288a51bfa1150e642694eca0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::for</definition>
        <argsstring>(handle parent :reinterpret_borrow&lt; tuple &gt;(t-&gt;tp_bases)) check.push_back((PyTypeObject *) parent.ptr())</argsstring>
        <name>for</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> parent :<ref refid="namespacepybind11_1acad75b61738e777489ed1f4a30776268" kindref="member">reinterpret_borrow</ref>&lt; <ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref> &gt;</type>
          <array>t-&gt;tp_bases</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="169" column="5" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="169" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a0c68ebde37b018a1356b5c66148dd9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::for</definition>
        <argsstring>(size_t i=0;i&lt; check.size();i++)</argsstring>
        <name>for</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="173" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="173" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;detail::type_info *&gt;&amp; pybind11::detail::all_type_info</definition>
        <argsstring>(PyTypeObject *type)</argsstring>
        <name>all_type_info</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extracts vector of <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref> pointers of pybind-registered roots of the given Python type. Will be just 1 pybind type for the Python type of a pybind-registered class, or for any Python-side derived class that uses single inheritance. Will contain as many types as required for a Python class that uses multiple inheritance to inherit (directly or indirectly) from multiple pybind-registered classes. Will be empty if neither the type nor any base classes are pybind-registered.</para>
<para>The value is cached for the lifetime of the Python type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="222" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="222" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a18e02562143ea02421e635c169e2b8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::if</definition>
        <argsstring>(!type) return false</argsstring>
        <name>if</name>
        <param>
          <type>!</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="437" column="5" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="437" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ab4876e0a1d4c619f690c6fdbc3216e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>return</type>
        <definition>return pybind11::detail::isinstance</definition>
        <argsstring>(obj, type)</argsstring>
        <name>isinstance</name>
        <param>
          <type>obj</type>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="439" column="12" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="439" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a27872f6f51ebf251a562b55c43e5c902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::for</definition>
        <argsstring>(auto it=range.first;it !=range.second;++it)</argsstring>
        <name>for</name>
        <param>
          <type>auto</type>
          <declname>it</declname>
          <defval>range.first;it !=range.second;++it</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="493" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="493" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>return</type>
        <definition>return pybind11::detail::handle</definition>
        <argsstring>()</argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="499" column="12" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="499" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a258682afd9a02ea6c742f2032d923ee8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyThreadState *</type>
        <definition>PyThreadState* pybind11::detail::get_thread_state_unchecked</definition>
        <argsstring>()</argsstring>
        <name>get_thread_state_unchecked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="502" column="22" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="502" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a3ad1aba5f911230062de8c796afa9d47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::keep_alive_impl</definition>
        <argsstring>(handle nurse, handle patient)</argsstring>
        <name>keep_alive_impl</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>nurse</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>patient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1355" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1355" bodyend="1380" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="517" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a9c191f1b7b78275ca2aaec29008f3b02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::register_instance</definition>
        <argsstring>(instance *self, void *valptr, const type_info *tinfo)</argsstring>
        <name>register_instance</name>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valptr</declname>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref> *</type>
          <declname>tinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="222" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="222" bodyend="226" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="518" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a6295a3814da747beecb99da3095ddb00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * pybind11::detail::make_new_instance</definition>
        <argsstring>(PyTypeObject *type, bool allocate_value=true)</argsstring>
        <name>make_new_instance</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allocate_value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instance creation function for all <ref refid="namespacepybind11" kindref="compound">pybind11</ref> types. It only allocates space for the C++ object (or multiple objects, for Python-side inheritance from multiple <ref refid="namespacepybind11" kindref="compound">pybind11</ref> types), but doesn&apos;t call the constructor <ndash/> an <computeroutput>__init__</computeroutput> function must do that. If allocating value, the instance is registered; otherwise register_instance will need to be called once the value has been assigned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="240" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="240" bodyend="265" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" declline="519" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a6c3bd0b56aad6dd32ab9e282add9dc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; T &gt;::template <ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">cast_op_type</ref>&lt; T &gt;</type>
        <definition>make_caster&lt;T&gt;::template cast_op_type&lt;T&gt; pybind11::detail::cast_op</definition>
        <argsstring>(make_caster&lt; T &gt; &amp;caster)</argsstring>
        <name>cast_op</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; T &gt; &amp;</type>
          <declname>caster</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="861" column="58" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="861" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1acd360a722fede5588efc6601d75fa578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; T &gt;::template <ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">cast_op_type</ref>&lt; typename std::add_rvalue_reference&lt; T &gt;::<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref> &gt;</type>
        <definition>make_caster&lt;T&gt;::template cast_op_type&lt;typename std::add_rvalue_reference&lt;T&gt;::type&gt; pybind11::detail::cast_op</definition>
        <argsstring>(make_caster&lt; T &gt; &amp;&amp;caster)</argsstring>
        <name>cast_op</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>caster</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="865" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="865" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af048e14268c595612522931a5d182c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SFINAE</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt; T, SFINAE &gt; &amp;</type>
        <definition>type_caster&lt;T, SFINAE&gt;&amp; pybind11::detail::load_type</definition>
        <argsstring>(type_caster&lt; T, SFINAE &gt; &amp;conv, const handle &amp;handle)</argsstring>
        <name>load_type</name>
        <param>
          <type><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt; T, SFINAE &gt; &amp;</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> &amp;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1536" column="27" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1536" bodyend="1546"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a96ea50836acb98a3a0537759d52c969c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; T &gt;</type>
        <definition>make_caster&lt;T&gt; pybind11::detail::load_type</definition>
        <argsstring>(const handle &amp;handle)</argsstring>
        <name>load_type</name>
        <param>
          <type>const <ref refid="classpybind11_1_1handle" kindref="compound">handle</ref> &amp;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1548" column="25" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1548" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a2febfd4cdc46897375a87a8884c10cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt;!is_pyobject&lt; T &gt;::value, int &gt;</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref></type>
        <definition>object pybind11::detail::object_or_cast</definition>
        <argsstring>(T &amp;&amp;o)</argsstring>
        <name>object_or_cast</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1626" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1626" bodyend="1626" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" declline="380" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa407aa03488007376e81a80c2cadf6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>enable_if_t&lt;cast_is_temporary_value_reference&lt;T&gt;::value, T&gt; pybind11::detail::cast_ref</definition>
        <argsstring>(object &amp;&amp;o, make_caster&lt; T &gt; &amp;caster)</argsstring>
        <name>cast_ref</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" kindref="member">make_caster</ref>&lt; T &gt; &amp;</type>
          <declname>caster</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1634" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1634" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a16e98941d1d372da54ccfdd8a92be21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;!<ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>enable_if_t&lt;!cast_is_temporary_value_reference&lt;T&gt;::value, T&gt; pybind11::detail::cast_ref</definition>
        <argsstring>(object &amp;&amp;, overload_unused &amp;)</argsstring>
        <name>cast_ref</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1overload__unused" kindref="compound">overload_unused</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1637" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1637" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aec69451b22f293ed13534636a28c60e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;!<ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>enable_if_t&lt;!cast_is_temporary_value_reference&lt;T&gt;::value, T&gt; pybind11::detail::cast_safe</definition>
        <argsstring>(object &amp;&amp;o)</argsstring>
        <name>cast_safe</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1643" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1643" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af3a97f48a2656c73b086f9081396e7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference</ref>&lt; T &gt;::value, T &gt;</type>
        <definition>enable_if_t&lt;cast_is_temporary_value_reference&lt;T&gt;::value, T&gt; pybind11::detail::cast_safe</definition>
        <argsstring>(object &amp;&amp;)</argsstring>
        <name>cast_safe</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1645" column="26" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1645" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a53573e9e461a11419356b0082975ed5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::cast_safe&lt; void &gt;</definition>
        <argsstring>(object &amp;&amp;)</argsstring>
        <name>cast_safe&lt; void &gt;</name>
        <param>
          <type><ref refid="classpybind11_1_1object" kindref="compound">object</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1647" column="19" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1647" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ab6646cead8144e9aa8d803b0790489d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>policy</declname>
            <defname>policy</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;all_of&lt;is_positional&lt;Args&gt;...&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1detail_1_1simple__collector" kindref="compound">simple_collector</ref>&lt; policy &gt;</type>
        <definition>simple_collector&lt;policy&gt; pybind11::detail::collect_arguments</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>collect_arguments</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Collect only positional arguments for a Python function call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1978" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1978" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af1f33227439d4701e48061191818ed0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>return_value_policy</type>
            <declname>policy</declname>
            <defname>policy</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;!all_of&lt;is_positional&lt;Args&gt;...&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1detail_1_1unpacking__collector" kindref="compound">unpacking_collector</ref>&lt; policy &gt;</type>
        <definition>unpacking_collector&lt;policy&gt; pybind11::detail::collect_arguments</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>collect_arguments</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Collect all arguments, including keywords and unpacking (only instantiated when needed) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1985" column="21" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1985" bodyend="1994"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a5baa19168451e7acf7a909b8a1b55206" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyTypeObject *</type>
        <definition>PyTypeObject* pybind11::detail::type_incref</definition>
        <argsstring>(PyTypeObject *type)</argsstring>
        <name>type_incref</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="17" column="21" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a55271caa4d22851a3aa599de2e5f63ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* pybind11::detail::pybind11_static_get</definition>
        <argsstring>(PyObject *self, PyObject *, PyObject *cls)</argsstring>
        <name>pybind11_static_get</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para><computeroutput>pybind11_static_property.__get__()</computeroutput>: Always pass the class instead of the instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="25" column="28" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a318f14520900d1d6763501b50cbefd1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_static_set</definition>
        <argsstring>(PyObject *self, PyObject *obj, PyObject *value)</argsstring>
        <name>pybind11_static_set</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><computeroutput>pybind11_static_property.__set__()</computeroutput>: Just like the above <computeroutput>__get__()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="30" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af890f322200bd699e7aaa8da55a97428" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_meta_setattro</definition>
        <argsstring>(PyObject *obj, PyObject *name, PyObject *value)</argsstring>
        <name>pybind11_meta_setattro</name>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Types with static properties need to handle <computeroutput>Type.static_prop = x</computeroutput> in a specific way. By default, Python replaces the <computeroutput>static_property</computeroutput> itself, but for wrapped C++ types we need to call <computeroutput>static_property.__set__()</computeroutput> in order to propagate the new value to the underlying C++ data structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="99" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="99" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a67d4396e43eb0554341545e975e11deb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::traverse_offset_bases</definition>
        <argsstring>(void *valueptr, const detail::type_info *tinfo, instance *self, bool(*f)(void *, instance *))</argsstring>
        <name>traverse_offset_bases</name>
        <param>
          <type>void *</type>
          <declname>valueptr</declname>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref> *</type>
          <declname>tinfo</declname>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>bool(*)(void *, <ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref> *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For multiple inheritance types we need to recursively register/deregister base pointers for any base classes with pointers that are difference from the instance value pointer so that we can correctly recognize an offset base class pointer. This calls a function with any offset base ptrs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="189" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="189" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ace567a86d547556a42a9c328253dcf89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::register_instance_impl</definition>
        <argsstring>(void *ptr, instance *self)</argsstring>
        <name>register_instance_impl</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="206" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a5f6df2076eb919963d91679e93e7659b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::deregister_instance_impl</definition>
        <argsstring>(void *ptr, instance *self)</argsstring>
        <name>deregister_instance_impl</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="210" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="210" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a501f56bb31293adc9497e08f0c27bd95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::deregister_instance</definition>
        <argsstring>(instance *self, void *valptr, const type_info *tinfo)</argsstring>
        <name>deregister_instance</name>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valptr</declname>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref> *</type>
          <declname>tinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="228" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1acdfc8125a018f1d1b47a8dec119cf17d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* pybind11::detail::pybind11_object_new</definition>
        <argsstring>(PyTypeObject *type, PyObject *, PyObject *)</argsstring>
        <name>pybind11_object_new</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>PyObject *</type>
        </param>
        <param>
          <type>PyObject *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instance creation function for all <ref refid="namespacepybind11" kindref="compound">pybind11</ref> types. It only allocates space for the C++ object, but doesn&apos;t call the constructor <ndash/> an <computeroutput>__init__</computeroutput> function must do that. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="269" column="28" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a21c40030f5a35e6135753ba25dc5fbe4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_object_init</definition>
        <argsstring>(PyObject *self, PyObject *, PyObject *)</argsstring>
        <name>pybind11_object_init</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
        </param>
        <param>
          <type>PyObject *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An <computeroutput>__init__</computeroutput> function constructs the C++ object. Users should provide at least one of these using <computeroutput>py::init</computeroutput> or directly with <computeroutput>.def(__init__, ...)</computeroutput>. Otherwise, the following default function will be used which simply throws an exception. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="276" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="276" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af62c3b270c006fce8eb96756ca0c3979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::add_patient</definition>
        <argsstring>(PyObject *nurse, PyObject *patient)</argsstring>
        <name>add_patient</name>
        <param>
          <type>PyObject *</type>
          <declname>nurse</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>patient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="288" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a3c1bddfa3d772a31c75b6a294c59198c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::clear_patients</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>clear_patients</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="296" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="296" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a55470ea4fc479575fcc487f3818de75b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::clear_instance</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>clear_instance</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears all internal data from the instance and removes it from registered instances in preparation for deallocation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="313" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="313" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a06542d285d3812cea1e7b26008360912" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::pybind11_object_dealloc</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>pybind11_object_dealloc</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instance destructor function for all <ref refid="namespacepybind11" kindref="compound">pybind11</ref> types. It calls <computeroutput><ref refid="structpybind11_1_1detail_1_1type__info_1ac2d391b653920f0b0506001042dffed2" kindref="member">type_info.dealloc</ref></computeroutput> to destroy the C++ object itself, while the rest is Python bookkeeping. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="342" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a6a31a52104ee526197fe3414f7a40112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* pybind11::detail::pybind11_get_dict</definition>
        <argsstring>(PyObject *self, void *)</argsstring>
        <name>pybind11_get_dict</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref>: Support for <computeroutput>d = instance.__dict__</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="390" column="28" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="390" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a8609cf12c865ed20300a29d94a97ff1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_set_dict</definition>
        <argsstring>(PyObject *self, PyObject *new_dict, void *)</argsstring>
        <name>pybind11_set_dict</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>new_dict</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref>: Support for <computeroutput>instance.__dict__ = dict()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="399" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="399" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a1c0811ba6263b5d434f0754e5712ba4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_traverse</definition>
        <argsstring>(PyObject *self, visitproc visit, void *arg)</argsstring>
        <name>pybind11_traverse</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>visitproc</type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref>: Allow the garbage collector to traverse the internal instance <computeroutput>__dict__</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="413" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="413" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af6d2c92603e911e84148a7c1a2ce1602" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_clear</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>pybind11_clear</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref>: Allow the GC to clear the dictionary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="420" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="420" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a37231709e183633480c3b06e22e70de3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::enable_dynamic_attributes</definition>
        <argsstring>(PyHeapTypeObject *heap_type)</argsstring>
        <name>enable_dynamic_attributes</name>
        <param>
          <type>PyHeapTypeObject *</type>
          <declname>heap_type</declname>
        </param>
        <briefdescription>
<para>Give instances of this type a <computeroutput>__dict__</computeroutput> and opt into garbage collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="427" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="427" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a955088dd65826639036cbc0d5886956c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int pybind11::detail::pybind11_getbuffer</definition>
        <argsstring>(PyObject *obj, Py_buffer *view, int flags)</argsstring>
        <name>pybind11_getbuffer</name>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Py_buffer *</type>
          <declname>view</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para><ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref>: Fill in the view as specified by flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="448" column="23" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="448" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a25d421a8dfae2015037edd61590a7374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::pybind11_releasebuffer</definition>
        <argsstring>(PyObject *, Py_buffer *view)</argsstring>
        <name>pybind11_releasebuffer</name>
        <param>
          <type>PyObject *</type>
        </param>
        <param>
          <type>Py_buffer *</type>
          <declname>view</declname>
        </param>
        <briefdescription>
<para><ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref>: Release the resources of the buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="484" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="484" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a5ac12a1c623a584e2a6b275e9793b3e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::enable_buffer_protocol</definition>
        <argsstring>(PyHeapTypeObject *heap_type)</argsstring>
        <name>enable_buffer_protocol</name>
        <param>
          <type>PyHeapTypeObject *</type>
          <declname>heap_type</declname>
        </param>
        <briefdescription>
<para>Give this type a buffer interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="489" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="489" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a0fe1a62ca38562fd83993b3abf9c49fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* pybind11::detail::make_new_python_type</definition>
        <argsstring>(const type_record &amp;rec)</argsstring>
        <name>make_new_python_type</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a brand new Python type according to the <computeroutput><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref></computeroutput> specification. Return value: New reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" line="501" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h" bodystart="501" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a1ec89852d6852c830dd4a5701d29b323" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>static constexpr int pybind11::detail::log2</definition>
        <argsstring>(size_t n, int k=0)</argsstring>
        <name>log2</name>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="346" column="29" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a574d0fa5a6734b56f0dba3fbd61307e5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        <definition>static constexpr size_t pybind11::detail::size_in_ptrs</definition>
        <argsstring>(size_t s)</argsstring>
        <name>size_in_ptrs</name>
        <param>
          <type><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="349" column="32" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af3a790a9d6af602df7dad7c64d9c539b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string pybind11::detail::error_string</definition>
        <argsstring>()</argsstring>
        <name>error_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="351" column="20" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" declline="351" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4917e6f04e358a58f42892a941be3ce3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        <definition>constexpr size_t pybind11::detail::instance_simple_holder_in_ptrs</definition>
        <argsstring>()</argsstring>
        <name>instance_simple_holder_in_ptrs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The space to allocate for simple layout instance holders (see below) in multiple of the size of a pointer (e.g. 2 means 16 bytes on 64-bit architectures). The default is the minimum required to holder either a std::unique_ptr or std::shared_ptr (which is almost always sizeof(std::shared_ptr&lt;T&gt;)). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="359" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="359" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a3379c11ceb77989070a4613ddad7da06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::same_type</definition>
        <argsstring>(const std::type_info &amp;lhs, const std::type_info &amp;rhs)</argsstring>
        <name>same_type</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="441" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref> &amp;</type>
        <definition>internals&amp; pybind11::detail::get_internals</definition>
        <argsstring>()</argsstring>
        <name>get_internals</name>
        <briefdescription>
<para>Return a reference to the current &apos;internals&apos; information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="486" column="18" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" declline="486" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        <definition>constexpr size_t pybind11::detail::constexpr_sum</definition>
        <argsstring>()</argsstring>
        <name>constexpr_sum</name>
        <briefdescription>
<para>Compile-time integer sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="572" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="572" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ab3659f769a9b409384dff7577fb87fe2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref></type>
        <definition>constexpr size_t pybind11::detail::constexpr_sum</definition>
        <argsstring>(T n, Ts... ns)</argsstring>
        <name>constexpr_sum</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Ts...</type>
          <declname>ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="574" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="574" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac0dec32f83b00d849883c195ba9a0a01" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int pybind11::detail::constexpr_first</definition>
        <argsstring>()</argsstring>
        <name>constexpr_first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the index of the first type in Ts which satisfies Predicate&lt;T&gt;. Returns sizeof...(Ts) if none match. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="591" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="591" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1acd9c4bb50b7c05c2d04476c10a4271ff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>Predicate</declname>
            <defname>Predicate</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int pybind11::detail::constexpr_last</definition>
        <argsstring>()</argsstring>
        <name>constexpr_last</name>
        <briefdescription>
<para>Return the index of the last type in Ts which satisfies Predicate&lt;T&gt;, or -1 if none match. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="595" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="595" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::ignore_unused</definition>
        <argsstring>(const int *)</argsstring>
        <name>ignore_unused</name>
        <param>
          <type>const int *</type>
        </param>
        <briefdescription>
<para>Ignore that a variable is unused in compiler warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="660" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="660" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref></type>
        <definition>descr pybind11::detail::_</definition>
        <argsstring>(const char *text1, const char *)</argsstring>
        <name>_</name>
        <param>
          <type>const char *</type>
          <declname>text1</declname>
        </param>
        <param>
          <type>const char *</type>
          <defname>text2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" line="161" column="37" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref></type>
        <definition>descr pybind11::detail::_</definition>
        <argsstring>(descr d, descr)</argsstring>
        <name>_</name>
        <param>
          <type><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref></type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" line="163" column="37" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ad53256e1e51809d3b05121be22b20250" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::__attribute__</definition>
        <argsstring>((noinline)) inline descr concat(descr &amp;&amp;d)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noinline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" line="177" column="2" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4d5c662f1a4dec1e4a9b377568b0376a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename props</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>handle pybind11::detail::eigen_array_cast</definition>
        <argsstring>(typename props::Type const &amp;src, handle base=handle(), bool writeable=true)</argsstring>
        <name>eigen_array_cast</name>
        <param>
          <type>typename props::Type const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>base</declname>
          <defval><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="209" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="209" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a02ebf3bb9b6e27bac2e025ff4348db95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename props</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>handle pybind11::detail::eigen_ref_array</definition>
        <argsstring>(Type &amp;src, handle parent=none())</argsstring>
        <name>eigen_ref_array</name>
        <param>
          <type>Type &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>parent</declname>
          <defval><ref refid="classpybind11_1_1none" kindref="compound">none</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="229" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a461794eb5f7735f9559d1143076f54f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename props</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;is_eigen_dense_plain&lt;Type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>handle pybind11::detail::eigen_encapsulate</definition>
        <argsstring>(Type *src)</argsstring>
        <name>eigen_encapsulate</name>
        <param>
          <type>Type *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" line="240" column="8" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ad6e98161dfb25894460f7377e5d5744b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1numpy__internals" kindref="compound">numpy_internals</ref> &amp;</type>
        <definition>numpy_internals&amp; pybind11::detail::get_numpy_internals</definition>
        <argsstring>()</argsstring>
        <name>get_numpy_internals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="104" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a5b98a9783ca34a76463d4bdfc46f0fb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref> *</type>
        <definition>PyArray_Proxy* pybind11::detail::array_proxy</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>array_proxy</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="224" column="22" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref> *</type>
        <definition>const PyArray_Proxy* pybind11::detail::array_proxy</definition>
        <argsstring>(const void *ptr)</argsstring>
        <name>array_proxy</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="228" column="28" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a13f77c16e4d58f2720bfb4be22f1b057" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref> *</type>
        <definition>PyArrayDescr_Proxy* pybind11::detail::array_descriptor_proxy</definition>
        <argsstring>(PyObject *ptr)</argsstring>
        <name>array_descriptor_proxy</name>
        <param>
          <type>PyObject *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="232" column="27" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref> *</type>
        <definition>const PyArrayDescr_Proxy* pybind11::detail::array_descriptor_proxy</definition>
        <argsstring>(const PyObject *ptr)</argsstring>
        <name>array_descriptor_proxy</name>
        <param>
          <type>const PyObject *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="236" column="33" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aaf5f6d49cca947d586e940fb0ea8ecd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::check_flags</definition>
        <argsstring>(const void *ptr, int flag)</argsstring>
        <name>check_flags</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="240" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af0c12d392b01e82c9fe09d06aef306fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ssize_t</type>
            <declname>Dim</declname>
            <defname>Dim</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename Strides</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></type>
        <definition>ssize_t pybind11::detail::byte_offset_unsafe</definition>
        <argsstring>(const Strides &amp;)</argsstring>
        <name>byte_offset_unsafe</name>
        <param>
          <type>const Strides &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="301" column="25" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a442f46b08dff572e6eccf4e0c904ffe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ssize_t</type>
            <declname>Dim</declname>
            <defname>Dim</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename Strides</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ix</declname>
            <defname>Ix</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></type>
        <definition>ssize_t pybind11::detail::byte_offset_unsafe</definition>
        <argsstring>(const Strides &amp;strides, ssize_t i, Ix... index)</argsstring>
        <name>byte_offset_unsafe</name>
        <param>
          <type>const Strides &amp;</type>
          <declname>strides</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>Ix...</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="303" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a32f785f3d386723d928d48ec06ab1d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator</ref>&lt; T &gt;</type>
        <definition>array_iterator&lt;T&gt; pybind11::detail::array_begin</definition>
        <argsstring>(const buffer_info &amp;buffer)</argsstring>
        <name>array_begin</name>
        <param>
          <type>const <ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1228" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1228" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1acc6607cde2ba1549271d27d83552d8f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator</ref>&lt; T &gt;</type>
        <definition>array_iterator&lt;T&gt; pybind11::detail::array_end</definition>
        <argsstring>(const buffer_info &amp;buffer)</argsstring>
        <name>array_end</name>
        <param>
          <type>const <ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1233" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1233" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4cc7d76e4e603f29131728d000e2ae2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1b" kindref="member">broadcast_trivial</ref></type>
        <definition>broadcast_trivial pybind11::detail::broadcast</definition>
        <argsstring>(const std::array&lt; buffer_info, N &gt; &amp;buffers, ssize_t &amp;ndim, std::vector&lt; ssize_t &gt; &amp;shape)</argsstring>
        <name>broadcast</name>
        <param>
          <type>const std::array&lt; <ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>, N &gt; &amp;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref> &amp;</type>
          <declname>ndim</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref> &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1349" column="19" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1349" bodyend="1419"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a25c49715d64fc799eef5cfa04f20d119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
          <param>
            <type>typename Return</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1vectorize__helper" kindref="compound">vectorize_helper</ref>&lt; Func, Return, Args... &gt;</type>
        <definition>vectorize_helper&lt;Func, Return, Args...&gt; pybind11::detail::vectorize_extractor</definition>
        <argsstring>(const Func &amp;f, Return(*)(Args ...))</argsstring>
        <name>vectorize_extractor</name>
        <param>
          <type>const Func &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Return(*)(Args ...)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1554" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1554" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af668c2d777879646e5f3e905b6dc4de2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref></type>
        <definition>self_t pybind11::detail::__self</definition>
        <argsstring>()</argsstring>
        <name>__self</name>
        <briefdescription>
<para>Don&apos;t warn about an unused variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="47" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a65434c20d59aa6f6faeef7fa1d6fe347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aa35606ea5aa408d358b831c1166ee14d" kindref="member">op_sub</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_sub , op_l, self_t, self_t&gt; pybind11::detail::operator-</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="121" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a6e89ddbacc9aaf1f8a845719749f43ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aa35606ea5aa408d358b831c1166ee14d" kindref="member">op_sub</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_sub , op_l, self_t, T&gt; pybind11::detail::operator-</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="121" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a0f08258f481e1671ae0f02ecbb0beab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aa35606ea5aa408d358b831c1166ee14d" kindref="member">op_sub</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_sub , op_r, T, self_t&gt; pybind11::detail::operator-</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="121" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aec108c5826c5ed9aa8c3504b925a9bf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a470fe6220e876c4ebc2b64ccfefe272c" kindref="member">op_add</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_add , op_l, self_t, self_t&gt; pybind11::detail::operator+</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="122" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a2b43e5f8bf2082afa46be078c65c6600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a470fe6220e876c4ebc2b64ccfefe272c" kindref="member">op_add</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_add , op_l, self_t, T&gt; pybind11::detail::operator+</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="122" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a91e59f7ec4d4f8a838407fdfb692e137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a470fe6220e876c4ebc2b64ccfefe272c" kindref="member">op_add</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_add , op_r, T, self_t&gt; pybind11::detail::operator+</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="122" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a55012192e1c870eb333993d1bbabe10c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111adbb4297b7572bbc63c99b0931a1350f0" kindref="member">op_mul</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_mul , op_l, self_t, self_t&gt; pybind11::detail::operator*</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="123" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac441c66497481bb07baadab826bd8254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111adbb4297b7572bbc63c99b0931a1350f0" kindref="member">op_mul</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_mul , op_l, self_t, T&gt; pybind11::detail::operator*</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="123" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a121e4000704ee5558b03bb528a839535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111adbb4297b7572bbc63c99b0931a1350f0" kindref="member">op_mul</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_mul , op_r, T, self_t&gt; pybind11::detail::operator*</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="123" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a39f7a91cdf012d54aac8605353dbaab3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" kindref="member">op_truediv</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_truediv , op_l, self_t, self_t&gt; pybind11::detail::operator/</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="124" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a44d67b62c387a0e998216e34c2406723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" kindref="member">op_truediv</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_truediv , op_l, self_t, T&gt; pybind11::detail::operator/</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="124" column="164" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a1784af5bd1033d64d7dc26ed57ac2fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" kindref="member">op_truediv</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_truediv , op_r, T, self_t&gt; pybind11::detail::operator/</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="124" column="246" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a8e5b1843d739499118a8f6935a8e2696" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0bcbf062451914e9c3952acb18e9aa7b" kindref="member">op_mod</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_mod , op_l, self_t, self_t&gt; pybind11::detail::operator%</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="125" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa8365f5505d3e3f30f3da93ba7545184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0bcbf062451914e9c3952acb18e9aa7b" kindref="member">op_mod</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_mod , op_l, self_t, T&gt; pybind11::detail::operator%</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="125" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a9cfe67c299b58e66943da1ff6cd10e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0bcbf062451914e9c3952acb18e9aa7b" kindref="member">op_mod</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_mod , op_r, T, self_t&gt; pybind11::detail::operator%</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator%</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="125" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a577d2c0bda7a50ea282a07a5e29083b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a5213265fd4e8341836af608cd582b7eb" kindref="member">op_lshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_lshift , op_l, self_t, self_t&gt; pybind11::detail::operator&lt;&lt;</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="125" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a39b46bc9e4aa7f3f13ca88ec331f3287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a5213265fd4e8341836af608cd582b7eb" kindref="member">op_lshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_lshift , op_l, self_t, T&gt; pybind11::detail::operator&lt;&lt;</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="125" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac6ab1336bf021706778a75a8c42b840c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a5213265fd4e8341836af608cd582b7eb" kindref="member">op_lshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_lshift , op_r, T, self_t&gt; pybind11::detail::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="125" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1abf78763af40a866f1f31ee74e801d514" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3c8a1fe4da217303a0da168ff30bb433" kindref="member">op_rshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_rshift , op_l, self_t, self_t&gt; pybind11::detail::operator&gt;&gt;</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="127" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a58dc366f0f4c0ec4892e583efd8f51e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3c8a1fe4da217303a0da168ff30bb433" kindref="member">op_rshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_rshift , op_l, self_t, T&gt; pybind11::detail::operator&gt;&gt;</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="127" column="164" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a870c41651bcaeb07a5a4c91b84732ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3c8a1fe4da217303a0da168ff30bb433" kindref="member">op_rshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_rshift , op_r, T, self_t&gt; pybind11::detail::operator&gt;&gt;</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="127" column="246" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a2faa7eff85c1ac185c91d9f51aae0e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8aaa389799047e1707f6baf12e5f5823" kindref="member">op_and</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_and , op_l, self_t, self_t&gt; pybind11::detail::operator&amp;</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="128" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a0df4da5b2a87b10833caf4a47ded7b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8aaa389799047e1707f6baf12e5f5823" kindref="member">op_and</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_and , op_l, self_t, T&gt; pybind11::detail::operator&amp;</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="128" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a1b77de1c36d9d814ba8d2f4922361736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8aaa389799047e1707f6baf12e5f5823" kindref="member">op_and</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_and , op_r, T, self_t&gt; pybind11::detail::operator&amp;</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="128" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a7dc4fbe6f59ebbb90bc544337620a608" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aba57e871afbea7cb5c4c0e6c03664388" kindref="member">op_xor</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_xor , op_l, self_t, self_t&gt; pybind11::detail::operator^</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="129" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ad9f3df637cc3e349bac70b71ce6e216a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aba57e871afbea7cb5c4c0e6c03664388" kindref="member">op_xor</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_xor , op_l, self_t, T&gt; pybind11::detail::operator^</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="129" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4a0c0b12979f8430d1f7a275ce1d8f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aba57e871afbea7cb5c4c0e6c03664388" kindref="member">op_xor</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_xor , op_r, T, self_t&gt; pybind11::detail::operator^</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator^</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="129" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a706ea93ff45fad3eef0bc5d4a1a817e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a95b027089c3f903ebf6eff6f20f33857" kindref="member">op_eq</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_eq , op_l, self_t, self_t&gt; pybind11::detail::operator==</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="130" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ab7201ee05b3522964d476120d62d0085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a95b027089c3f903ebf6eff6f20f33857" kindref="member">op_eq</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_eq , op_l, self_t, T&gt; pybind11::detail::operator==</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="130" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1accaa9ff68f4c211b2269a8bcbdc4c3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a95b027089c3f903ebf6eff6f20f33857" kindref="member">op_eq</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_eq , op_r, T, self_t&gt; pybind11::detail::operator==</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="130" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aae62cca5adcf698e2e0bcd57ea0840bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a88c62cadf3a6b2a097509ab4da63f9cf" kindref="member">op_ne</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_ne , op_l, self_t, self_t&gt; pybind11::detail::operator!=</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="131" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a96529508ab9b9ea01b39e6165f0fe141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a88c62cadf3a6b2a097509ab4da63f9cf" kindref="member">op_ne</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_ne , op_l, self_t, T&gt; pybind11::detail::operator!=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="131" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1afea51023376cf6fe3984d645db59be11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a88c62cadf3a6b2a097509ab4da63f9cf" kindref="member">op_ne</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_ne , op_r, T, self_t&gt; pybind11::detail::operator!=</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="131" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa920071f7e5d439705a4805afba13521" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4f91c9e7ccb3d5b1f33e64256223fd09" kindref="member">op_or</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_or , op_l, self_t, self_t&gt; pybind11::detail::operator|</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="132" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ab567e9dc1fba3247bdc2b0d66cb1db90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4f91c9e7ccb3d5b1f33e64256223fd09" kindref="member">op_or</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_or , op_l, self_t, T&gt; pybind11::detail::operator|</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="132" column="159" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ae84a8dac9867454647f143581789ad6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4f91c9e7ccb3d5b1f33e64256223fd09" kindref="member">op_or</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_or , op_r, T, self_t&gt; pybind11::detail::operator|</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator|</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="132" column="236" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a6216135f66101244cfea16675a9900ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab132f328158cd977facabb032216c0e5" kindref="member">op_gt</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_gt , op_l, self_t, self_t&gt; pybind11::detail::operator&gt;</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="133" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa43f2cb0909e17d2403795f00237602a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab132f328158cd977facabb032216c0e5" kindref="member">op_gt</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_gt , op_l, self_t, T&gt; pybind11::detail::operator&gt;</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="133" column="159" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aed87d53303bbe6d64f05460caf3d53ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab132f328158cd977facabb032216c0e5" kindref="member">op_gt</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_gt , op_r, T, self_t&gt; pybind11::detail::operator&gt;</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="133" column="236" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ad7d3cf25ad459e8769ad2bb0c6b4b7da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad96c9b793d3066ea0bfaa1c69ae7015d" kindref="member">op_ge</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_ge , op_l, self_t, self_t&gt; pybind11::detail::operator&gt;=</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="77" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a77cf322d6604ece74a45b7b23e119c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad96c9b793d3066ea0bfaa1c69ae7015d" kindref="member">op_ge</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_ge , op_l, self_t, T&gt; pybind11::detail::operator&gt;=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="160" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a15dbf44c17a148d4ff52a3fab5d00f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad96c9b793d3066ea0bfaa1c69ae7015d" kindref="member">op_ge</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_ge , op_r, T, self_t&gt; pybind11::detail::operator&gt;=</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a659b4e18620202d1a8d600e014e6b55b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a840dff8f78c9a5d04e75f5081770466f" kindref="member">op_lt</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_lt , op_l, self_t, self_t&gt; pybind11::detail::operator&lt;</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a9f2796de9fa98e70867b1fa9949dd2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a840dff8f78c9a5d04e75f5081770466f" kindref="member">op_lt</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_lt , op_l, self_t, T&gt; pybind11::detail::operator&lt;</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a824895ef10f90f957a29d3d142429ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a840dff8f78c9a5d04e75f5081770466f" kindref="member">op_lt</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_lt , op_r, T, self_t&gt; pybind11::detail::operator&lt;</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1abacf8e9a16c8530b35dd1ce19d57bf96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61366ca80a86d929fe8cdc1aff462978" kindref="member">op_le</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_le , op_l, self_t, self_t&gt; pybind11::detail::operator&lt;=</definition>
        <argsstring>(const self_t &amp;, const self_t &amp;)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a53c666cdc1c471531e3f475ca85c9343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61366ca80a86d929fe8cdc1aff462978" kindref="member">op_le</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_le , op_l, self_t, T&gt; pybind11::detail::operator&lt;=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4f0c402077140dba58290d9c76ec9c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61366ca80a86d929fe8cdc1aff462978" kindref="member">op_le</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>, T, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &gt;</type>
        <definition>op_&lt;op_le , op_r, T, self_t&gt; pybind11::detail::operator&lt;=</definition>
        <argsstring>(const T &amp;, const self_t &amp;)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="134" column="238" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a9531bc50707b12b59fc20a1bdc6d6ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6c22240c620ae8ad7088b9433b47611e" kindref="member">op_iadd</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_iadd , op_l, self_t, T&gt; pybind11::detail::operator+=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="138" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a731ed6686782d2486162d72cf2631516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4c366b40fdda341e398d774cf2da377c" kindref="member">op_isub</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_isub , op_l, self_t, T&gt; pybind11::detail::operator-=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="139" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a38bd71c36a0c7c6cce98e3f83a4705e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2817d127afaeefc19e621bd96fd45cda" kindref="member">op_imul</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_imul , op_l, self_t, T&gt; pybind11::detail::operator*=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="140" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a1cf2635c20cf0ed9012e19b28c195cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" kindref="member">op_itruediv</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_itruediv , op_l, self_t, T&gt; pybind11::detail::operator/=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="141" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac046c336a4a4a528c114c51bcd308330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab408eb8a0b02d58a933a0241bdae1f26" kindref="member">op_imod</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_imod , op_l, self_t, T&gt; pybind11::detail::operator%=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="142" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ab31edc9521aa1d2dc95d1f96906cac99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a9c8c1321a0e321fe16f265012ca7c0e2" kindref="member">op_ilshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_ilshift , op_l, self_t, T&gt; pybind11::detail::operator&lt;&lt;=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="142" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a445d482bcb3feb2ee5440ca0579a9a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0e7857a94c8daedb1100dfee8696a250" kindref="member">op_irshift</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_irshift , op_l, self_t, T&gt; pybind11::detail::operator&gt;&gt;=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="144" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a3ce47e3591457133ee5a771ba6de22fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad609efc14d511ab47f7f6c28a097adc1" kindref="member">op_iand</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_iand , op_l, self_t, T&gt; pybind11::detail::operator&amp;=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="145" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aecbbc792723f1369cf7da55c8942877e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ac00548bfe4254699a041b2a4eb9b3ace" kindref="member">op_ixor</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_ixor , op_l, self_t, T&gt; pybind11::detail::operator^=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="146" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac30d0eacf6ff237e6c9f57bcb5db8b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab7560e54732a74de5be6f1718245c199" kindref="member">op_ior</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, T &gt;</type>
        <definition>op_&lt;op_ior , op_l, self_t, T&gt; pybind11::detail::operator|=</definition>
        <argsstring>(const self_t &amp;, const T &amp;)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="147" column="50" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a90e043e0524631e2d2bc12556cb55fd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a10967d02a21bc01dfcd86fb5637b074f" kindref="member">op_neg</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_neg , op_u, self_t, undefined_t&gt; pybind11::detail::operator-</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="148" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a8ce088dd8388c88e71b00852c1c96af1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111acf429cbb13fc03f3aefd8a1b91df15b0" kindref="member">op_pos</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_pos , op_u, self_t, undefined_t&gt; pybind11::detail::operator+</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="149" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac475f67e781e0c607a75072acb5d11d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2a6aef482b2afa4b6f2c0dfce5735016" kindref="member">op_abs</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_abs , op_u, self_t, undefined_t&gt; pybind11::detail::abs</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="150" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4f50c2c8b7843e9f24578796ab7cf295" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae9bf41774fcb09c29dac33815c462bd6" kindref="member">op_invert</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_invert , op_u, self_t, undefined_t&gt; pybind11::detail::operator~</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>operator~</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="151" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa9ce215a92db60737fd2f016b1922b4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae96c455d4d20836c2646cb5b9cef17b3" kindref="member">op_bool</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_bool , op_u, self_t, undefined_t&gt; pybind11::detail::operator!</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="152" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a20fe1c2f5fbb219cb211956780afee53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6916b0edb673290480067933104651a7" kindref="member">op_int</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_int , op_u, self_t, undefined_t&gt; pybind11::detail::int_</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>int_</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="153" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a8a0e9eafeb80441295ad0b0aedc7ad24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a1868d4eac5f6a7410d991327ee9f72fd" kindref="member">op_float</ref>, <ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref>, <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>, <ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref> &gt;</type>
        <definition>op_&lt;op_float , op_u, self_t, undefined_t&gt; pybind11::detail::float_</definition>
        <argsstring>(const self_t &amp;)</argsstring>
        <name>float_</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="154" column="43" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aac9fbec63a815cf6e602a9c235ca7533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>void_t&lt;decltype(static_cast&lt;void *(*)(size_t)&gt;(T::operator new))&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::set_operator_new</definition>
        <argsstring>(type_record *r)</argsstring>
        <name>set_operator_new</name>
        <param>
          <type><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Set the pointer to operator new if it exists. The cast is needed because it can be overloaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="905" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="905" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aad403360b3f798558436b37ea0272492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::set_operator_new</definition>
        <argsstring>(...)</argsstring>
        <name>set_operator_new</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="907" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="907" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a91db04ebc823ea863b5df88f78f5c6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>void_t&lt;decltype(static_cast&lt;void (*)(void *)&gt;(T::operator delete))&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::call_operator_delete</definition>
        <argsstring>(T *p)</argsstring>
        <name>call_operator_delete</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Call class-specific delete if it exists or global otherwise. Can also be an overload set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="911" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="911" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a6e62cf4913ded37524e9fca5be2af2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::call_operator_delete</definition>
        <argsstring>(void *p)</argsstring>
        <name>call_operator_delete</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="913" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="913" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1afece612f9e6ae07e4061cb56608b5498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::if</definition>
        <argsstring>(kwargs.contains(&quot;file&quot;))</argsstring>
        <name>if</name>
        <param>
          <type>kwargs.</type>
          <declname>contains</declname>
          <array>&quot;file&quot;</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1573" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1573" bodyend="1575"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1af9b806016c247eaa721c7150fecdd5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::write</definition>
        <argsstring>(line)</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a7bd3cf79f3ad1f0c79b9839e6834fca7" kindref="member">line</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1588" column="5" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" declline="1588" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1acb9cd08d61a7fef71e33c5b31844a259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::write</definition>
        <argsstring>(kwargs.contains(&quot;end&quot;) ? kwargs[&quot;end&quot;] :cast(&quot;\n&quot;))</argsstring>
        <name>write</name>
        <param>
          <type>kwargs.</type>
          <declname>contains</declname>
          <array>(&quot;end&quot;) ? kwargs :cast(&quot;\n&quot;)[&quot;end&quot;]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1589" column="5" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" declline="1589" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aba9190881a8a5a0953038a88e295e897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pybind11::detail::if</definition>
        <argsstring>(kwargs.contains(&quot;flush&quot;) &amp;&amp;kwargs[&quot;flush&quot;].cast&lt; bool &gt;()) file.attr(&quot;flush&quot;)()</argsstring>
        <name>if</name>
        <param>
          <type>kwargs.</type>
          <declname>contains</declname>
          <array>(&quot;flush&quot;) &amp;&amp;kwargs.cast&lt; bool &gt;()[&quot;flush&quot;]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1591" column="5" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" declline="1591" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ace76e2e23e6cd12004ba88779c973ed9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::isinstance_generic</definition>
        <argsstring>(handle obj, const std::type_info &amp;tp)</argsstring>
        <name>isinstance_generic</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="26" column="13" declfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa3f15fd5f825d58b0d9dc754fa96af55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>handle pybind11::detail::get_function</definition>
        <argsstring>(handle value)</argsstring>
        <name>get_function</name>
        <param>
          <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="360" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="360" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac757eeb3882c4a944e8e60cca71c2c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_pyobject&lt; T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pybind11::detail::object_or_cast</definition>
        <argsstring>(T &amp;&amp;o) -&gt; decltype(std::forward&lt; T &gt;(o))</argsstring>
        <name>object_or_cast</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="377" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="377" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref></type>
        <definition>handle pybind11::detail::object_or_cast</definition>
        <argsstring>(PyObject *ptr)</argsstring>
        <name>object_or_cast</name>
        <param>
          <type>PyObject *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="382" column="15" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a41123cf41281d72a90d10b3e1802dc44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::PyIterable_Check</definition>
        <argsstring>(PyObject *obj)</argsstring>
        <name>PyIterable_Check</name>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="638" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="638" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a14fdc572afcc1bfc99227ebb2ecc39d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::PyNone_Check</definition>
        <argsstring>(PyObject *o)</argsstring>
        <name>PyNone_Check</name>
        <param>
          <type>PyObject *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="649" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="649" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a4ba91d12e5d5b5c70453e1d27aa3a3c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pybind11::detail::PyUnicode_Check_Permissive</definition>
        <argsstring>(PyObject *o)</argsstring>
        <name>PyUnicode_Check_Permissive</name>
        <param>
          <type>PyObject *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="651" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="651" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a532f0bd10c659b7ab1ce6e0aa3f8a22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Unsigned</type>
          </param>
        </templateparamlist>
        <type>Unsigned</type>
        <definition>Unsigned pybind11::detail::as_unsigned</definition>
        <argsstring>(PyObject *o)</argsstring>
        <name>as_unsigned</name>
        <param>
          <type>PyObject *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="940" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="940" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a246895b586c07341905fdc7fa5bac401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a5fcc977e92be71760b66c8c671e79634" kindref="member">forwarded_type</ref>&lt; T, U &gt;</type>
        <definition>forwarded_type&lt;T, U&gt; pybind11::detail::forward_like</definition>
        <argsstring>(U &amp;&amp;u)</argsstring>
        <name>forward_like</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forwards a value U as rvalue or lvalue according to whether T is rvalue or lvalue; typically used for forwarding a container&apos;s elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h" line="61" column="16" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a289a96da79ae0e72793355903cdba33e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_if_copy_constructible</definition>
        <argsstring>(const Args &amp;...)</argsstring>
        <name>vector_if_copy_constructible</name>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="63" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a30a857b5b98085c7158bad72be65c12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_if_equal_operator</definition>
        <argsstring>(const Args &amp;...)</argsstring>
        <name>vector_if_equal_operator</name>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="64" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a06fcded8b16731c3e0ab9ecd70318a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_if_insertion_operator</definition>
        <argsstring>(const Args &amp;...)</argsstring>
        <name>vector_if_insertion_operator</name>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="65" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac14ed96608c642ff5a1a94f62fb46984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_modifiers</definition>
        <argsstring>(const Args &amp;...)</argsstring>
        <name>vector_modifiers</name>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="66" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a56215c76f14449b816f94e2000729946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_if_copy_constructible</definition>
        <argsstring>(enable_if_t&lt; std::is_copy_constructible&lt; Vector &gt;::value &amp;&amp;std::is_copy_constructible&lt; typename Vector::value_type &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>vector_if_copy_constructible</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; std::is_copy_constructible&lt; Vector &gt;::value &amp;&amp;std::is_copy_constructible&lt; typename Vector::value_type &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="69" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a48b013ee5e285e24acc9c4596cd9a254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_if_equal_operator</definition>
        <argsstring>(enable_if_t&lt; is_comparable&lt; Vector &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>vector_if_equal_operator</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; <ref refid="structpybind11_1_1detail_1_1is__comparable" kindref="compound">is_comparable</ref>&lt; Vector &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="77" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="77" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a3065ed9a099dcf6da68808a067b6eeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_modifiers</definition>
        <argsstring>(enable_if_t&lt; std::is_copy_constructible&lt; typename Vector::value_type &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>vector_modifiers</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; std::is_copy_constructible&lt; typename Vector::value_type &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Slicing protocol</para>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="116" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="116" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa182a78892dcd2822659be84214e9758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_accessor</definition>
        <argsstring>(enable_if_t&lt;!vector_needs_copy&lt; Vector &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>vector_accessor</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;!<ref refid="namespacepybind11_1_1detail_1a41621df82cdd8d4575b24327e30a2d09" kindref="member">vector_needs_copy</ref>&lt; Vector &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="262" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="262" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1aa161f31d9b04c5f2344436583fc54cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::vector_accessor</definition>
        <argsstring>(enable_if_t&lt; vector_needs_copy&lt; Vector &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>vector_accessor</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a41621df82cdd8d4575b24327e30a2d09" kindref="member">vector_needs_copy</ref>&lt; Vector &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="288" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="288" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1ac62c4a6a5de2673ba106bf3f6076a96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pybind11::detail::vector_if_insertion_operator</definition>
        <argsstring>(Class_ &amp;cl, std::string const &amp;name) -&gt; decltype(std::declval&lt; std::ostream &amp; &gt;()&lt;&lt; std::declval&lt; typename Vector::value_type &gt;(), void())</argsstring>
        <name>vector_if_insertion_operator</name>
        <param>
          <type>Class_ &amp;</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="310" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="310" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a8d012fca5d86157650b40c261dc6275f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" kindref="member">detail::any_of</ref>&lt; std::is_same&lt; Args, <ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref> &gt;... &gt;::value &gt;</type>
        <definition>enable_if_t&lt;detail::any_of&lt;std::is_same&lt;Args, buffer_protocol&gt;...&gt;::value&gt; pybind11::detail::vector_buffer</definition>
        <argsstring>(Class_ &amp;cl)</argsstring>
        <name>vector_buffer</name>
        <param>
          <type>Class_ &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="340" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="340" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a93e47dbda8f18f874a4c7bc9049f47d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;!<ref refid="namespacepybind11_1_1detail_1a07742bb629fda6e6fa72ba00408d7f0a" kindref="member">detail::any_of</ref>&lt; std::is_same&lt; Args, <ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref> &gt;... &gt;::value &gt;</type>
        <definition>enable_if_t&lt;!detail::any_of&lt;std::is_same&lt;Args, buffer_protocol&gt;...&gt;::value&gt; pybind11::detail::vector_buffer</definition>
        <argsstring>(Class_ &amp;)</argsstring>
        <name>vector_buffer</name>
        <param>
          <type>Class_ &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="371" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a217ca89636c68c6380e23cb676632a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::map_if_insertion_operator</definition>
        <argsstring>(const Args &amp;...)</argsstring>
        <name>map_if_insertion_operator</name>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="468" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a84d1d5e5ae3b9959c2ffa5573b35486f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::map_assignment</definition>
        <argsstring>(const Args &amp;...)</argsstring>
        <name>map_assignment</name>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="469" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="469" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a2b2b2743aa0796f76c4a7bb708d4e42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::map_assignment</definition>
        <argsstring>(enable_if_t&lt; std::is_copy_assignable&lt; typename Map::mapped_type &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>map_assignment</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; std::is_copy_assignable&lt; typename Map::mapped_type &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="473" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="473" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a553ed90dcd327eb81b41fb2b1ebe0cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pybind11::detail::map_assignment</definition>
        <argsstring>(enable_if_t&lt; !std::is_copy_assignable&lt; typename Map::mapped_type &gt;::value &amp;&amp;std::is_copy_constructible&lt; typename Map::mapped_type &gt;::value, Class_ &gt; &amp;cl)</argsstring>
        <name>map_assignment</name>
        <param>
          <type><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt; !std::is_copy_assignable&lt; typename Map::mapped_type &gt;::value &amp;&amp;std::is_copy_constructible&lt; typename Map::mapped_type &gt;::value, Class_ &gt; &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="488" column="6" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="488" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="namespacepybind11_1_1detail_1a0a3b998a30c0056ed4be4083e813e6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename Class_</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pybind11::detail::map_if_insertion_operator</definition>
        <argsstring>(Class_ &amp;cl, std::string const &amp;name) -&gt; decltype(std::declval&lt; std::ostream &amp; &gt;()&lt;&lt; std::declval&lt; typename Map::key_type &gt;()&lt;&lt; std::declval&lt; typename Map::mapped_type &gt;(), void())</argsstring>
        <name>map_if_insertion_operator</name>
        <param>
          <type>Class_ &amp;</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" line="509" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h" bodystart="509" bodyend="528"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h" line="110" column="1"/>
  </compounddef>
</doxygen>
