<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="descr_8h" kind="file" language="C++">
    <compoundname>descr.h</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includedby refid="cast_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="12">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>frameobject.h</label>
      </node>
      <node id="3">
        <label>Python.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="5">
        <label>pythread.h</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>unordered_map</label>
      </node>
      <node id="2">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="8">
        <label>forward_list</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="14">
        <label>memory</label>
      </node>
      <node id="15">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="16">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="15">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpybind11_1_1detail_1_1descr" prot="public">pybind11::detail::descr</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="descr_8h_1ae155873780600c0149950602b31084a9" prot="public" static="no">
        <name>PYBIND11_DESCR</name>
        <initializer>::<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">pybind11::detail::descr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" line="181" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/descr.h:<sp/>Helper<sp/>type<sp/>for<sp/>concatenating<sp/>type<sp/>signatures</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>either<sp/>at<sp/>runtime<sp/>(C++11)<sp/>or<sp/>compile<sp/>time<sp/>(C++14)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Concatenate<sp/>type<sp/>signatures<sp/>at<sp/>compile<sp/>time<sp/>using<sp/>C++14<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYBIND11_CPP14)<sp/>&amp;&amp;<sp/>!defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_CONSTEXPR_DESCR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">descr<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1_,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2_&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">descr;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>descr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(&amp;text)<sp/>[Size1+1],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(&amp;types)[Size2+1])</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>descr(text,<sp/>types,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence</ref>&lt;Size1&gt;(),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence</ref>&lt;Size2&gt;())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_text;<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>types()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_types;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>OtherSize1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>OtherSize2&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>descr&lt;Size1<sp/>+<sp/>OtherSize1,<sp/>Size2<sp/>+<sp/>OtherSize2&gt;<sp/><ref refid="namespacexlnt_1aebe47f0cf2f86bdb768820ae1344075c" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>descr&lt;OtherSize1,<sp/>OtherSize2&gt;<sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>concat(other,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_index_sequence&lt;Size1&gt;(),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_index_sequence&lt;Size2&gt;(),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_index_sequence&lt;OtherSize1&gt;(),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_index_sequence&lt;OtherSize2&gt;());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Indices1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Indices2&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>descr(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(&amp;text)<sp/>[Size1+1],</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(&amp;types)<sp/>[Size2+1],</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_sequence&lt;Indices1...&gt;,<sp/>index_sequence&lt;Indices2...&gt;)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_text{text[Indices1]...,<sp/></highlight><highlight class="stringliteral">&apos;\0&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_types{types[Indices2]...,<sp/><sp/>nullptr<sp/>}<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>OtherSize1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>OtherSize2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Indices1,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Indices2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>OtherIndices1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>OtherIndices2&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>descr&lt;Size1<sp/>+<sp/>OtherSize1,<sp/>Size2<sp/>+<sp/>OtherSize2&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>concat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>descr&lt;OtherSize1,<sp/>OtherSize2&gt;<sp/>&amp;other,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_sequence&lt;Indices1...&gt;,<sp/>index_sequence&lt;Indices2...&gt;,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_sequence&lt;OtherIndices1...&gt;,<sp/>index_sequence&lt;OtherIndices2...&gt;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr&lt;Size1<sp/>+<sp/>OtherSize1,<sp/>Size2<sp/>+<sp/>OtherSize2&gt;(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>m_text[Indices1]...,<sp/>other.m_text[OtherIndices1]...,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>m_types[Indices2]...,<sp/>other.m_types[OtherIndices2]...,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>m_text[Size1<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<sp/>m_types[Size2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size&gt;<sp/>constexpr<sp/>descr&lt;Size<sp/>-<sp/>1,<sp/>0&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">(&amp;text)[Size])<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr&lt;Size<sp/>-<sp/>1,<sp/>0&gt;(text,<sp/>{<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>});</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Rem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Digits&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">int_to_str<sp/>:<sp/>int_to_str&lt;Rem/10,<sp/>Rem%10,<sp/>Digits...&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...Digits&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">int_to_str&lt;0,<sp/>Digits...&gt;<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>digits<sp/>=<sp/>descr&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Digits),<sp/>0&gt;({<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>Digits)...,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>},<sp/>{<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>});</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ternary<sp/>description<sp/>(like<sp/>std::conditional)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">constexpr<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;B,<sp/>descr&lt;Size1<sp/>-<sp/>1,<sp/>0&gt;&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">(&amp;text1)[Size1],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">(&amp;)[Size2])<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(text1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">constexpr<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;!B,<sp/>descr&lt;Size2<sp/>-<sp/>1,<sp/>0&gt;&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">(&amp;)[Size1],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">(&amp;text2)[Size2])<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(text2);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeA1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeA2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeB1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeB2&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">constexpr<sp/>enable_if_t&lt;B,<sp/>descr&lt;SizeA1,<sp/>SizeA2&gt;&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(descr&lt;SizeA1,<sp/>SizeA2&gt;<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>,<sp/>descr&lt;SizeB1,<sp/>SizeB2&gt;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeA1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeA2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeB1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SizeB2&gt;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">constexpr<sp/>enable_if_t&lt;!B,<sp/>descr&lt;SizeB1,<sp/>SizeB2&gt;&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(descr&lt;SizeA1,<sp/>SizeA2&gt;,<sp/>descr&lt;SizeB1,<sp/>SizeB2&gt;<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>()<sp/>-&gt;<sp/>decltype(int_to_str&lt;Size<sp/>/<sp/>10,<sp/>Size<sp/>%<sp/>10&gt;::digits)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int_to_str&lt;Size<sp/>/<sp/>10,<sp/>Size<sp/>%<sp/>10&gt;::digits;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/>constexpr<sp/>descr&lt;1,<sp/>1&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr&lt;1,<sp/>1&gt;({<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>},<sp/>{<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Type),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>});</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/>descr&lt;0,<sp/>0&gt;<sp/>concat()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>concat(descr&lt;Size1,<sp/>Size2&gt;<sp/>descr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>concat(descr&lt;Size1,<sp/>Size2&gt;<sp/>descr,<sp/>Args&amp;&amp;...<sp/><ref refid="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" kindref="member">args</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>concat(<ref refid="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" kindref="member">args</ref>...);<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>type_descr(descr&lt;Size1,<sp/>Size2&gt;<sp/>descr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">)<sp/>+<sp/>descr<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_DESCR<sp/>constexpr<sp/>auto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>Simpler<sp/>C++11<sp/>implementation<sp/>based<sp/>on<sp/>run-time<sp/>memory<sp/>allocation<sp/>and<sp/>copying<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classpybind11_1_1detail_1_1descr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110" refid="classpybind11_1_1detail_1_1descr_1a44dcc6456f756a7fe96911222de69ba0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>types)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nChars<sp/>=<sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(text),<sp/>nTypes<sp/>=<sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(types);</highlight></codeline>
<codeline lineno="112" refid="classpybind11_1_1detail_1_1descr_1a0fbb414723ada627abcf680bde6af964" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_text<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[nChars];</highlight></codeline>
<codeline lineno="113" refid="classpybind11_1_1detail_1_1descr_1a1444b9946a0b7ad7a5529b4874b967fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_types<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*[nTypes];</highlight></codeline>
<codeline lineno="114" refid="classpybind11_1_1detail_1_1descr_1afbe20ece1b0688c575fbf8778171a427" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr_1afbe20ece1b0688c575fbf8778171a427" kindref="member">memcpy</ref>(m_text,<sp/>text,<sp/>nChars<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="115" refid="classpybind11_1_1detail_1_1descr_1ae1923a3eebc2401a2b54468f7bf30f06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr_1ae1923a3eebc2401a2b54468f7bf30f06" kindref="member">memcpy</ref>(m_types,<sp/>types,<sp/>nTypes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classpybind11_1_1detail_1_1descr_1a4c4b482d53fffa962881d1252a29d592" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/><ref refid="namespacexlnt_1aebe47f0cf2f86bdb768820ae1344075c" kindref="member">operator+</ref>(<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>&amp;&amp;d2)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>r;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nChars1<sp/>=<sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(m_text),<sp/><sp/><sp/><sp/>nTypes1<sp/>=<sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(m_types);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nChars2<sp/>=<sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(d2.m_text),<sp/>nTypes2<sp/>=<sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(d2.m_types);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.m_text<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[nChars1<sp/>+<sp/>nChars2<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.m_types<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*[nTypes1<sp/>+<sp/>nTypes2<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(r.m_text,<sp/>m_text,<sp/>(nChars1-1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(r.m_text<sp/>+<sp/>nChars1<sp/>-<sp/>1,<sp/>d2.m_text,<sp/>nChars2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(r.m_types,<sp/>m_types,<sp/>(nTypes1-1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::type_info<sp/>*));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(r.m_types<sp/>+<sp/>nTypes1<sp/>-<sp/>1,<sp/>d2.m_types,<sp/>nTypes2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::type_info<sp/>*));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m_text;<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m_types;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>d2.m_text;<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>d2.m_types;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classpybind11_1_1detail_1_1descr_1a9a358f11a40e3f63a1b6507861b11325" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1detail_1_1descr_1a9a358f11a40e3f63a1b6507861b11325" kindref="member">text</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_text;<sp/>}</highlight></codeline>
<codeline lineno="138" refid="classpybind11_1_1detail_1_1descr_1ad70c7ef5d9a88d7d32ebbeb1d57e8e47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<sp/>*<sp/><ref refid="classpybind11_1_1detail_1_1descr_1ad70c7ef5d9a88d7d32ebbeb1d57e8e47" kindref="member">types</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_types;<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141" refid="classpybind11_1_1detail_1_1descr_1a43e02ac2c1a6210f7f061a9d0ef3cd2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classpybind11_1_1detail_1_1descr_1a365664fa397bddd0944d3def50941265" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1descr_1a365664fa397bddd0944d3def50941265" kindref="member">len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>return<sp/>length<sp/>including<sp/>null<sp/>termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*it<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*it++<sp/>!=<sp/>(T)<sp/>0)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it<sp/>-<sp/>ptr);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classpybind11_1_1detail_1_1descr_1a6024b2b0f33a797c39683bb8350e9625" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>**m_types<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151" refid="classpybind11_1_1detail_1_1descr_1af4a53fb3212353e1817a091dd63f72ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*m_text<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>&apos;PYBIND11_NOINLINE<sp/>inline&apos;<sp/>combinations<sp/>below<sp/>are<sp/>intentional<sp/>to<sp/>get<sp/>the<sp/>desired<sp/>linkage<sp/>while<sp/>producing<sp/>as<sp/>little<sp/>object<sp/>code<sp/>as<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*types[1]<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr(text,<sp/>types);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;B, descr&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(text1);<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/>enable_if_t&lt;!B,<sp/>descr&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(text2);<sp/>}</highlight></codeline>
<codeline lineno="163" refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;B, descr&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>,<sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>;<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/>enable_if_t&lt;!B,<sp/>descr&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(descr,<sp/>descr<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>;<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/>descr<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*types[2]<sp/>=<sp/>{<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Type),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/>types);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/>descr<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*types[1]<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>descr(<ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(Size).c_str(),<sp/>types);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>descr<sp/>concat()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="177" refid="namespacepybind11_1_1detail_1ad53256e1e51809d3b05121be22b20250" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>concat(<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>&amp;&amp;<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>;<sp/>}</highlight></codeline>
<codeline lineno="178" refid="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>concat(<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>&amp;&amp;<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>,<sp/>Args&amp;&amp;...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>)<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>concat(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...);<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>descr<sp/>type_descr(descr&amp;&amp;<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">)<sp/>+<sp/>std::move(<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>)<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a373aa963014ee5d5a3e685904df93633" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="descr_8h_1ae155873780600c0149950602b31084a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_DESCR<sp/>::pybind11::detail::descr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/descr.h"/>
  </compounddef>
</doxygen>
