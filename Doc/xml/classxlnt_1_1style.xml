<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="classxlnt_1_1style" kind="class" language="C++" prot="public">
    <compoundname>xlnt::style</compoundname>
    <includes refid="style_8hpp" local="no">style.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classxlnt_1_1style_1a8f7c8587d229b210b77937e24479888f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct detail::stylesheet</definition>
        <argsstring></argsstring>
        <name>detail::stylesheet</name>
        <param>
          <type><ref refid="structxlnt_1_1detail_1_1stylesheet" kindref="compound">detail::stylesheet</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="247" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classxlnt_1_1style_1a5c27ff96f65a231e21871a228cbaf740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class detail::xlsx_consumer</definition>
        <argsstring></argsstring>
        <name>detail::xlsx_consumer</name>
        <param>
          <type><ref refid="classxlnt_1_1detail_1_1xlsx__consumer" kindref="compound">detail::xlsx_consumer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="248" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classxlnt_1_1style_1a9e7a307dc26f03df5ca0a8e1c1e49efb" prot="private" static="no" mutable="no">
        <type><ref refid="structxlnt_1_1detail_1_1style__impl" kindref="compound">detail::style_impl</ref> *</type>
        <definition>detail::style_impl* xlnt::style::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <briefdescription>
<para>The internal implementation of this style </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="258" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classxlnt_1_1style_1a769c5c8a331a7f3a683c866881b0fe0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::style::style</definition>
        <argsstring>()=delete</argsstring>
        <name>style</name>
        <briefdescription>
<para>Delete zero-argument constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a384898ae7d81d38f8141fabd144a71c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::style::style</definition>
        <argsstring>(const style &amp;other)=default</argsstring>
        <name>style</name>
        <param>
          <type>const <ref refid="classxlnt_1_1style" kindref="compound">style</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Default copy constructor. Constructs a style using the same PIMPL as other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="66" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1af8d322ba8cd29a536c54e80472577198" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string xlnt::style::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>Returns the name of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="71" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aad924e4d2430322fdfdc7fab5921d4dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets the name of this style to name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="76" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a6a384abfdeb437705184c32317084a96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::hidden</definition>
        <argsstring>() const</argsstring>
        <name>hidden</name>
        <briefdescription>
<para>Returns true if this style is hidden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="81" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a4c7c7ecc1ffc209d9039b4914512f0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::hidden</definition>
        <argsstring>(bool value)</argsstring>
        <name>hidden</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the hidden state of this style to value. A hidden style will not be shown in the list of selectable styles in the UI, but will still apply its formatting to cells using it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="88" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aa2c294a5b51f93fa1ebc7fbfe41c72cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::custom_builtin</definition>
        <argsstring>() const</argsstring>
        <name>custom_builtin</name>
        <briefdescription>
<para>Returns true if this is a builtin style that has been customized and should therefore be persisted in the workbook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="94" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1ad18be2affc80439670daae02a90a7d6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t xlnt::style::builtin_id</definition>
        <argsstring>() const</argsstring>
        <name>builtin_id</name>
        <briefdescription>
<para>Returns the index of the builtin style that this style is an instance of or is a customized version thereof. If <ref refid="classxlnt_1_1style_1a7a6abdea098d68174527b94a70c8381a" kindref="member">style::builtin()</ref> is false, this will throw an <ref refid="classxlnt_1_1invalid__attribute" kindref="compound">invalid_attribute</ref> exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="101" column="17" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a7a6abdea098d68174527b94a70c8381a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::builtin</definition>
        <argsstring>() const</argsstring>
        <name>builtin</name>
        <briefdescription>
<para>Returns true if this is a builtin style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="106" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a56d1ad74bedb0297a4579686cd9e481f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1alignment" kindref="compound">alignment</ref></type>
        <definition>xlnt::alignment xlnt::style::alignment</definition>
        <argsstring>() const</argsstring>
        <name>alignment</name>
        <briefdescription>
<para>Returns the alignment of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="106" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1acb8d9ca4d8d114bc0dc1e7ce755c8155" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::alignment_applied</definition>
        <argsstring>() const</argsstring>
        <name>alignment_applied</name>
        <briefdescription>
<para>Returns true if the alignment of this style should be applied to cells using it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="119" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a5eb6eaa6592ef57ac4ae25ce595b3929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::alignment</definition>
        <argsstring>(const xlnt::alignment &amp;new_alignment, optional&lt; bool &gt; applied={})</argsstring>
        <name>alignment</name>
        <param>
          <type>const <ref refid="classxlnt_1_1alignment" kindref="compound">xlnt::alignment</ref> &amp;</type>
          <declname>new_alignment</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the alignment of this style to new_alignment. Applied, which defaults to true, determines whether the alignment should be enabled for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="126" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="105" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aff1553a569944fdbc591654c77ae385a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1border" kindref="compound">border</ref></type>
        <definition>xlnt::border xlnt::style::border</definition>
        <argsstring>() const</argsstring>
        <name>border</name>
        <briefdescription>
<para>Returns the border of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="126" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aac6c36f64878a356fe6825d9a3948ca9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::border_applied</definition>
        <argsstring>() const</argsstring>
        <name>border_applied</name>
        <briefdescription>
<para>Returns true if the border set for this style should be applied to cells using the style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="136" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aea3667eb32b2149cac287d3a255e061b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::border</definition>
        <argsstring>(const xlnt::border &amp;new_border, optional&lt; bool &gt; applied={})</argsstring>
        <name>border</name>
        <param>
          <type>const <ref refid="classxlnt_1_1border" kindref="compound">xlnt::border</ref> &amp;</type>
          <declname>new_border</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the border of this style to new_border. Applied, which defaults to true, determines whether the border should be enabled for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="143" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a415f8e947c5ae4e8594972ebba320b55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1fill" kindref="compound">fill</ref></type>
        <definition>xlnt::fill xlnt::style::fill</definition>
        <argsstring>() const</argsstring>
        <name>fill</name>
        <briefdescription>
<para>Returns the fill of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="143" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1ad1061d1e5a2295d1163a5a115172e9ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::fill_applied</definition>
        <argsstring>() const</argsstring>
        <name>fill_applied</name>
        <briefdescription>
<para>Returns true if the fill set for this style should be applied to cells using the style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="153" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a5984410b5863489c91ff7441538621a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::fill</definition>
        <argsstring>(const xlnt::fill &amp;new_fill, optional&lt; bool &gt; applied={})</argsstring>
        <name>fill</name>
        <param>
          <type>const <ref refid="classxlnt_1_1fill" kindref="compound">xlnt::fill</ref> &amp;</type>
          <declname>new_fill</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the fill of this style to new_fill. Applied, which defaults to true, determines whether the border should be enabled for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="160" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="131" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a3f4560c0b2e4966a9924a4eca832e7ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1font" kindref="compound">font</ref></type>
        <definition>xlnt::font xlnt::style::font</definition>
        <argsstring>() const</argsstring>
        <name>font</name>
        <briefdescription>
<para>Returns the font of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="160" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aa73e8ebab8112280c5174063b4405db8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::font_applied</definition>
        <argsstring>() const</argsstring>
        <name>font_applied</name>
        <briefdescription>
<para>Returns true if the font set for this style should be applied to cells using the style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="170" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="220" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a2b0ef35f32e7bcb35142a7120dcec4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::font</definition>
        <argsstring>(const xlnt::font &amp;new_font, optional&lt; bool &gt; applied={})</argsstring>
        <name>font</name>
        <param>
          <type>const <ref refid="classxlnt_1_1font" kindref="compound">xlnt::font</ref> &amp;</type>
          <declname>new_font</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the font of this style to new_font. Applied, which defaults to true, determines whether the font should be enabled for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="177" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1ab5f966638d2afb8adc01670656f55573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1number__format" kindref="compound">number_format</ref></type>
        <definition>xlnt::number_format xlnt::style::number_format</definition>
        <argsstring>() const</argsstring>
        <name>number_format</name>
        <briefdescription>
<para>Returns the <ref refid="classxlnt_1_1number__format" kindref="compound">number_format</ref> of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="177" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="152" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a79fdf1823f240bf5747970f53f7a0b7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::number_format_applied</definition>
        <argsstring>() const</argsstring>
        <name>number_format_applied</name>
        <briefdescription>
<para>Returns true if the <ref refid="classxlnt_1_1number__format" kindref="compound">number_format</ref> set for this style should be applied to cells using the style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="187" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a41aa5ccedce8226afc6e5b41fd2b8899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::number_format</definition>
        <argsstring>(const xlnt::number_format &amp;new_number_format, optional&lt; bool &gt; applied={})</argsstring>
        <name>number_format</name>
        <param>
          <type>const <ref refid="classxlnt_1_1number__format" kindref="compound">xlnt::number_format</ref> &amp;</type>
          <declname>new_number_format</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the number format of this style to new_number_format. Applied, which defaults to true, determines whether the number format should be enabled for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="194" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="165" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1aa70ef91e7b6c8589820ce010c9a55215" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1protection" kindref="compound">protection</ref></type>
        <definition>xlnt::protection xlnt::style::protection</definition>
        <argsstring>() const</argsstring>
        <name>protection</name>
        <briefdescription>
<para>Returns the protection of this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="194" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a84e322c1bb7e0eb356452bcad787949e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::protection_applied</definition>
        <argsstring>() const</argsstring>
        <name>protection_applied</name>
        <briefdescription>
<para>Returns true if the protection set for this style should be applied to cells using the style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="204" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a992ada0110b15057ddeca624c8da9ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::style::protection</definition>
        <argsstring>(const xlnt::protection &amp;new_protection, optional&lt; bool &gt; applied={})</argsstring>
        <name>protection</name>
        <param>
          <type>const <ref refid="classxlnt_1_1protection" kindref="compound">xlnt::protection</ref> &amp;</type>
          <declname>new_protection</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the border of this style to new_protection. Applied, which defaults to true, determines whether the protection should be enabled for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="211" column="11" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="191" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1ad0279530d128bcfca094f3a108118f51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::pivot_button</definition>
        <argsstring>() const</argsstring>
        <name>pivot_button</name>
        <briefdescription>
<para>Returns true if the pivot table interface is enabled for this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="216" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1abe814e8a17a59644a3493b41fed9e5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::style::pivot_button</definition>
        <argsstring>(bool show)</argsstring>
        <name>pivot_button</name>
        <param>
          <type>bool</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>If show is true, a pivot table interface will be displayed for cells using this style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="222" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a239fff155ba4b07e2081349a9294972b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::quote_prefix</definition>
        <argsstring>() const</argsstring>
        <name>quote_prefix</name>
        <briefdescription>
<para>Returns true if this style should add a single-quote prefix for all text values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="227" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a6dafbe004b8863f37e21a59e5547b9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::style::quote_prefix</definition>
        <argsstring>(bool quote)</argsstring>
        <name>quote_prefix</name>
        <param>
          <type>bool</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
<para>If quote is true, enables a single-quote prefix for all text values in cells using this style (e.g. &quot;abc&quot; will appear as &quot;&apos;abc&quot;). The text will also not be stored in sharedStrings when this is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="234" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a5878863acbf9fd044934cfb85c914f77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::operator==</definition>
        <argsstring>(const style &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classxlnt_1_1style" kindref="compound">style</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if this style is equivalent to other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="239" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1style_1a459f5c72537ed7e51c243405738a5c95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::style::operator!=</definition>
        <argsstring>(const style &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classxlnt_1_1style" kindref="compound">style</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if this style is not equivalent to other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="244" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classxlnt_1_1style_1a902c9a30ee177ca4a7598b26aca55fa7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::style::style</definition>
        <argsstring>(detail::style_impl *d)</argsstring>
        <name>style</name>
        <param>
          <type><ref refid="structxlnt_1_1detail_1_1style__impl" kindref="compound">detail::style_impl</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Constructs a style from an impl pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="253" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/style.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes a style which has a name and can be applied to multiple individual formats. In Excel this is a &quot;Cell Style&quot;. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" line="55" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/style.hpp" bodystart="56" bodyend="259"/>
    <listofallmembers>
      <member refid="classxlnt_1_1style_1a56d1ad74bedb0297a4579686cd9e481f" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>alignment</name></member>
      <member refid="classxlnt_1_1style_1a5eb6eaa6592ef57ac4ae25ce595b3929" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>alignment</name></member>
      <member refid="classxlnt_1_1style_1acb8d9ca4d8d114bc0dc1e7ce755c8155" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>alignment_applied</name></member>
      <member refid="classxlnt_1_1style_1aff1553a569944fdbc591654c77ae385a" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>border</name></member>
      <member refid="classxlnt_1_1style_1aea3667eb32b2149cac287d3a255e061b" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>border</name></member>
      <member refid="classxlnt_1_1style_1aac6c36f64878a356fe6825d9a3948ca9" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>border_applied</name></member>
      <member refid="classxlnt_1_1style_1a7a6abdea098d68174527b94a70c8381a" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>builtin</name></member>
      <member refid="classxlnt_1_1style_1ad18be2affc80439670daae02a90a7d6d" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>builtin_id</name></member>
      <member refid="classxlnt_1_1style_1aa2c294a5b51f93fa1ebc7fbfe41c72cd" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>custom_builtin</name></member>
      <member refid="classxlnt_1_1style_1a9e7a307dc26f03df5ca0a8e1c1e49efb" prot="private" virt="non-virtual"><scope>xlnt::style</scope><name>d_</name></member>
      <member refid="classxlnt_1_1style_1a8f7c8587d229b210b77937e24479888f" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>detail::stylesheet</name></member>
      <member refid="classxlnt_1_1style_1a5c27ff96f65a231e21871a228cbaf740" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>detail::xlsx_consumer</name></member>
      <member refid="classxlnt_1_1style_1a415f8e947c5ae4e8594972ebba320b55" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>fill</name></member>
      <member refid="classxlnt_1_1style_1a5984410b5863489c91ff7441538621a1" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>fill</name></member>
      <member refid="classxlnt_1_1style_1ad1061d1e5a2295d1163a5a115172e9ed" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>fill_applied</name></member>
      <member refid="classxlnt_1_1style_1a3f4560c0b2e4966a9924a4eca832e7ba" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>font</name></member>
      <member refid="classxlnt_1_1style_1a2b0ef35f32e7bcb35142a7120dcec4cf" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>font</name></member>
      <member refid="classxlnt_1_1style_1aa73e8ebab8112280c5174063b4405db8" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>font_applied</name></member>
      <member refid="classxlnt_1_1style_1a6a384abfdeb437705184c32317084a96" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>hidden</name></member>
      <member refid="classxlnt_1_1style_1a4c7c7ecc1ffc209d9039b4914512f0ea" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>hidden</name></member>
      <member refid="classxlnt_1_1style_1af8d322ba8cd29a536c54e80472577198" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>name</name></member>
      <member refid="classxlnt_1_1style_1aad924e4d2430322fdfdc7fab5921d4dc" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>name</name></member>
      <member refid="classxlnt_1_1style_1ab5f966638d2afb8adc01670656f55573" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>number_format</name></member>
      <member refid="classxlnt_1_1style_1a41aa5ccedce8226afc6e5b41fd2b8899" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>number_format</name></member>
      <member refid="classxlnt_1_1style_1a79fdf1823f240bf5747970f53f7a0b7d" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>number_format_applied</name></member>
      <member refid="classxlnt_1_1style_1a459f5c72537ed7e51c243405738a5c95" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>operator!=</name></member>
      <member refid="classxlnt_1_1style_1a5878863acbf9fd044934cfb85c914f77" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>operator==</name></member>
      <member refid="classxlnt_1_1style_1ad0279530d128bcfca094f3a108118f51" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>pivot_button</name></member>
      <member refid="classxlnt_1_1style_1abe814e8a17a59644a3493b41fed9e5e7" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>pivot_button</name></member>
      <member refid="classxlnt_1_1style_1aa70ef91e7b6c8589820ce010c9a55215" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>protection</name></member>
      <member refid="classxlnt_1_1style_1a992ada0110b15057ddeca624c8da9ef4" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>protection</name></member>
      <member refid="classxlnt_1_1style_1a84e322c1bb7e0eb356452bcad787949e" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>protection_applied</name></member>
      <member refid="classxlnt_1_1style_1a239fff155ba4b07e2081349a9294972b" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>quote_prefix</name></member>
      <member refid="classxlnt_1_1style_1a6dafbe004b8863f37e21a59e5547b9ed" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>quote_prefix</name></member>
      <member refid="classxlnt_1_1style_1a769c5c8a331a7f3a683c866881b0fe0f" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>style</name></member>
      <member refid="classxlnt_1_1style_1a384898ae7d81d38f8141fabd144a71c0" prot="public" virt="non-virtual"><scope>xlnt::style</scope><name>style</name></member>
      <member refid="classxlnt_1_1style_1a902c9a30ee177ca4a7598b26aca55fa7" prot="private" virt="non-virtual"><scope>xlnt::style</scope><name>style</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
