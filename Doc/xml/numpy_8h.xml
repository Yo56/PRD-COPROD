<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="numpy_8h" kind="file" language="C++">
    <compoundname>numpy.h</compoundname>
    <includes refid="pybind11_8h" local="yes">pybind11.h</includes>
    <includes refid="complex_8h" local="yes">complex.h</includes>
    <includes local="no">numeric</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">functional</includes>
    <includes local="no">utility</includes>
    <includes local="no">typeindex</includes>
    <includedby refid="eigen_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>functional</label>
      </node>
      <node id="28">
        <label>limits</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="34">
        <label>numeric</label>
      </node>
      <node id="26">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="21">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>frameobject.h</label>
      </node>
      <node id="24">
        <label>cstdio</label>
      </node>
      <node id="23">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>Python.h</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="9">
        <label>pythread.h</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="27">
        <label>array</label>
      </node>
      <node id="36">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="3">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="33">
        <label>complex</label>
      </node>
      <node id="35">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>forward_list</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="32">
        <label>complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="37">
        <label>initializer_list</label>
      </node>
      <node id="19">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" prot="public">pybind11::detail::PyArrayDescr_Proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_py_array___proxy" prot="public">pybind11::detail::PyArray_Proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy" prot="public">pybind11::detail::PyVoidScalarObject_Proxy</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1numpy__type__info" prot="public">pybind11::detail::numpy_type_info</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1numpy__internals" prot="public">pybind11::detail::numpy_internals</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__api" prot="public">pybind11::detail::npy_api</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims" prot="public">pybind11::detail::npy_api::PyArray_Dims</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__std__array" prot="public">pybind11::detail::is_std_array</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__std__array_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">pybind11::detail::is_std_array&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__complex" prot="public">pybind11::detail::is_complex</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__complex_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">pybind11::detail::is_complex&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info__scalar" prot="public">pybind11::detail::array_info_scalar</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info" prot="public">pybind11::detail::array_info</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">pybind11::detail::array_info&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01char_0f_n_0e_4" prot="public">pybind11::detail::array_info&lt; char[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" prot="public">pybind11::detail::array_info&lt; std::array&lt; char, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1array__info_3_01_t_0f_n_0e_4" prot="public">pybind11::detail::array_info&lt; T[N]&gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1unchecked__reference" prot="public">pybind11::detail::unchecked_reference</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" prot="public">pybind11::detail::unchecked_mutable_reference</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01unchecked__reference_3_01_t_00_01_dim_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; unchecked_reference&lt; T, Dim &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01unchecked__mutable__reference_3_01_t_00_01_dim_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; unchecked_mutable_reference&lt; T, Dim &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1dtype" prot="public">pybind11::dtype</innerclass>
    <innerclass refid="classpybind11_1_1array" prot="public">pybind11::array</innerclass>
    <innerclass refid="classpybind11_1_1array__t" prot="public">pybind11::array_t</innerclass>
    <innerclass refid="structpybind11_1_1array__t_1_1private__ctor" prot="private">pybind11::array_t::private_ctor</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1is__pod__2541c7600b5fc9094049e2495342ba9e" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; detail::is_pod_struct&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01char_0f_n_0e_4" prot="public">pybind11::format_descriptor&lt; char[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" prot="public">pybind11::format_descriptor&lt; std::array&lt; char, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1array__indf15e44072e0df87924bd69ebdc6a173" prot="public">pybind11::format_descriptor&lt; T, detail::enable_if_t&lt; detail::array_info&lt; T &gt;::is_array &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4" prot="public">pybind11::detail::pyobject_caster&lt; array_t&lt; T, ExtraFlags &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1compare__buffer__info_3_01_t_00_01detail_1_1enable__if__t_3_01detailc2a3113b5c72d60380b4bdbe72e7f95e" prot="public">pybind11::detail::compare_buffer_info&lt; T, detail::enable_if_t&lt; detail::is_pod_struct&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39" prot="public">pybind11::detail::npy_format_descriptor&lt; T, enable_if_t&lt; satisfies_any_of&lt; T, std::is_arithmetic, is_complex &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01char_0f_n_0e_4" prot="public">pybind11::detail::npy_format_descriptor&lt; char[N]&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" prot="public">pybind11::detail::npy_format_descriptor&lt; std::array&lt; char, N &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e" prot="public">pybind11::detail::npy_format_descriptor&lt; T, enable_if_t&lt; array_info&lt; T &gt;::is_array &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0" prot="public">pybind11::detail::npy_format_descriptor&lt; T, enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1field__descriptor" prot="public">pybind11::detail::field_descriptor</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1npy__format__descriptor" prot="public">pybind11::detail::npy_format_descriptor</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1common__iterator" prot="public">pybind11::detail::common_iterator</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1multi__array__iterator" prot="public">pybind11::detail::multi_array_iterator</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1vectorize__arg" prot="public">pybind11::detail::vectorize_arg</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1vectorize__helper" prot="public">pybind11::detail::vectorize_helper</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01array__t_3_01_t_00_01_flags_01_4_01_4" prot="public">pybind11::detail::handle_type_name&lt; array_t&lt; T, Flags &gt; &gt;</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" prot="public" static="no">
        <name>DECL_NPY_API</name>
        <param><defname>Func</defname></param>
        <initializer>api.Func##_ = (decltype(api.Func##_)) api_ptr[API_##Func];</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="199" column="9"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a5d648509b51165aa56ed64b224aecb05" prot="public" static="no">
        <name>PYBIND11_DECL_CHAR_FMT</name>
        <initializer>    static <ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref> name() { return _(&quot;S&quot;) + _&lt;N&gt;(); } \
    static <ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref> dtype() { return <ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref>(std::string(&quot;S&quot;) + std::to_string(N)); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1014" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1aa52d99114d699c78373a120bbacdb04b" prot="public" static="no">
        <name>PYBIND11_FIELD_DESCRIPTOR_EX</name>
        <param><defname>T</defname></param>
        <param><defname>Field</defname></param>
        <param><defname>Name</defname></param>
        <initializer>    ::<ref refid="structpybind11_1_1detail_1_1field__descriptor" kindref="compound">pybind11::detail::field_descriptor</ref> {                                                    \
        Name, offsetof(T, Field), sizeof(decltype(std::declval&lt;T&gt;().Field)),                  \
        ::<ref refid="structpybind11_1_1format__descriptor" kindref="compound">pybind11::format_descriptor</ref>&lt;decltype(std::declval&lt;T&gt;().Field)&gt;::format(),           \
        ::<ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">pybind11::detail::npy_format_descriptor</ref>&lt;decltype(std::declval&lt;T&gt;().Field)&gt;::dtype() \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1155" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1aed753b33fb143320a3eb66bd0554ca66" prot="public" static="no">
        <name>PYBIND11_FIELD_DESCRIPTOR</name>
        <param><defname>T</defname></param>
        <param><defname>Field</defname></param>
        <initializer><ref refid="numpy_8h_1aa52d99114d699c78373a120bbacdb04b" kindref="member">PYBIND11_FIELD_DESCRIPTOR_EX</ref>(T, Field, #Field)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1163" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a9a3ded47231a64627addf93122841eed" prot="public" static="no">
        <name>PYBIND11_EVAL0</name>
        <param><defname>...</defname></param>
        <initializer>__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1167" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a2c2557648cbdc9de751b6127b463a475" prot="public" static="no">
        <name>PYBIND11_EVAL1</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="numpy_8h_1a9a3ded47231a64627addf93122841eed" kindref="member">PYBIND11_EVAL0</ref> (<ref refid="numpy_8h_1a9a3ded47231a64627addf93122841eed" kindref="member">PYBIND11_EVAL0</ref> (<ref refid="numpy_8h_1a9a3ded47231a64627addf93122841eed" kindref="member">PYBIND11_EVAL0</ref> (__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1168" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a09a3f8ee6675c666b602b03fe38d073b" prot="public" static="no">
        <name>PYBIND11_EVAL2</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="numpy_8h_1a2c2557648cbdc9de751b6127b463a475" kindref="member">PYBIND11_EVAL1</ref> (<ref refid="numpy_8h_1a2c2557648cbdc9de751b6127b463a475" kindref="member">PYBIND11_EVAL1</ref> (<ref refid="numpy_8h_1a2c2557648cbdc9de751b6127b463a475" kindref="member">PYBIND11_EVAL1</ref> (__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1169" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a0ff3ffdb58263125972a650d39bed8c4" prot="public" static="no">
        <name>PYBIND11_EVAL3</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="numpy_8h_1a09a3f8ee6675c666b602b03fe38d073b" kindref="member">PYBIND11_EVAL2</ref> (<ref refid="numpy_8h_1a09a3f8ee6675c666b602b03fe38d073b" kindref="member">PYBIND11_EVAL2</ref> (<ref refid="numpy_8h_1a09a3f8ee6675c666b602b03fe38d073b" kindref="member">PYBIND11_EVAL2</ref> (__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1170" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a2d1251a48706873cc318dca2fc1e175e" prot="public" static="no">
        <name>PYBIND11_EVAL4</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="numpy_8h_1a0ff3ffdb58263125972a650d39bed8c4" kindref="member">PYBIND11_EVAL3</ref> (<ref refid="numpy_8h_1a0ff3ffdb58263125972a650d39bed8c4" kindref="member">PYBIND11_EVAL3</ref> (<ref refid="numpy_8h_1a0ff3ffdb58263125972a650d39bed8c4" kindref="member">PYBIND11_EVAL3</ref> (__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1171" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a47afd6544b9955cd00aa43f10538dbcb" prot="public" static="no">
        <name>PYBIND11_EVAL</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="numpy_8h_1a2d1251a48706873cc318dca2fc1e175e" kindref="member">PYBIND11_EVAL4</ref> (<ref refid="numpy_8h_1a2d1251a48706873cc318dca2fc1e175e" kindref="member">PYBIND11_EVAL4</ref> (<ref refid="numpy_8h_1a2d1251a48706873cc318dca2fc1e175e" kindref="member">PYBIND11_EVAL4</ref> (__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1172" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a8b5223c102e58706ef0627349f519a99" prot="public" static="no">
        <name>PYBIND11_MAP_END</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1173" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a0122b293b55c71589ed040982f80b2f9" prot="public" static="no">
        <name>PYBIND11_MAP_OUT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1174" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1ab0dfb33f84961be99d9f9a0cfdaf7e89" prot="public" static="no">
        <name>PYBIND11_MAP_COMMA</name>
        <initializer>,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1175" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a9a3b5c5764c0f71cbcee0222b4bdd552" prot="public" static="no">
        <name>PYBIND11_MAP_GET_END</name>
        <param></param>
        <initializer>0, <ref refid="numpy_8h_1a8b5223c102e58706ef0627349f519a99" kindref="member">PYBIND11_MAP_END</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1176" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a999ada17df55e2c39ae98fb6331b4e38" prot="public" static="no">
        <name>PYBIND11_MAP_NEXT0</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <param><defname>...</defname></param>
        <initializer>next <ref refid="numpy_8h_1a0122b293b55c71589ed040982f80b2f9" kindref="member">PYBIND11_MAP_OUT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1177" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a00173dc66d819e18792e13a350453f13" prot="public" static="no">
        <name>PYBIND11_MAP_NEXT1</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer><ref refid="numpy_8h_1a999ada17df55e2c39ae98fb6331b4e38" kindref="member">PYBIND11_MAP_NEXT0</ref> (test, next, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1178" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a2e11701c1004255d98d80746fec418a9" prot="public" static="no">
        <name>PYBIND11_MAP_NEXT</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer><ref refid="numpy_8h_1a00173dc66d819e18792e13a350453f13" kindref="member">PYBIND11_MAP_NEXT1</ref> (<ref refid="numpy_8h_1a9a3b5c5764c0f71cbcee0222b4bdd552" kindref="member">PYBIND11_MAP_GET_END</ref> test, next)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1179" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1ad8993f90eb6daaa72406d12ad857f4f5" prot="public" static="no">
        <name>PYBIND11_MAP_LIST_NEXT1</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer>    <ref refid="numpy_8h_1a999ada17df55e2c39ae98fb6331b4e38" kindref="member">PYBIND11_MAP_NEXT0</ref> (test, <ref refid="numpy_8h_1ab0dfb33f84961be99d9f9a0cfdaf7e89" kindref="member">PYBIND11_MAP_COMMA</ref> next, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1184" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1ad235bc1be441e4e6b367b5632db2713c" prot="public" static="no">
        <name>PYBIND11_MAP_LIST_NEXT</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer>    <ref refid="numpy_8h_1ad8993f90eb6daaa72406d12ad857f4f5" kindref="member">PYBIND11_MAP_LIST_NEXT1</ref> (<ref refid="numpy_8h_1a9a3b5c5764c0f71cbcee0222b4bdd552" kindref="member">PYBIND11_MAP_GET_END</ref> test, next)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1187" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a252b823a9cd742afe937bad210f7e1a9" prot="public" static="no">
        <name>PYBIND11_MAP_LIST0</name>
        <param><defname>f</defname></param>
        <param><defname>t</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>    f(t, x) <ref refid="numpy_8h_1ad235bc1be441e4e6b367b5632db2713c" kindref="member">PYBIND11_MAP_LIST_NEXT</ref> (peek, <ref refid="numpy_8h_1a9c57ba8f5d6e432d74f28dd3776499b4" kindref="member">PYBIND11_MAP_LIST1</ref>) (f, t, peek, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1189" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a9c57ba8f5d6e432d74f28dd3776499b4" prot="public" static="no">
        <name>PYBIND11_MAP_LIST1</name>
        <param><defname>f</defname></param>
        <param><defname>t</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>    f(t, x) <ref refid="numpy_8h_1ad235bc1be441e4e6b367b5632db2713c" kindref="member">PYBIND11_MAP_LIST_NEXT</ref> (peek, <ref refid="numpy_8h_1a252b823a9cd742afe937bad210f7e1a9" kindref="member">PYBIND11_MAP_LIST0</ref>) (f, t, peek, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1191" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a77fc031e547eb68a976b04c2878d171e" prot="public" static="no">
        <name>PYBIND11_MAP_LIST</name>
        <param><defname>f</defname></param>
        <param><defname>t</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="numpy_8h_1a47afd6544b9955cd00aa43f10538dbcb" kindref="member">PYBIND11_EVAL</ref> (<ref refid="numpy_8h_1a9c57ba8f5d6e432d74f28dd3776499b4" kindref="member">PYBIND11_MAP_LIST1</ref> (f, t, __VA_ARGS__, (), 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1194" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1ae503a026e8bf3b93877cfcd3a18a38fa" prot="public" static="no">
        <name>PYBIND11_NUMPY_DTYPE</name>
        <param><defname>Type</defname></param>
        <param><defname>...</defname></param>
        <initializer>    ::<ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">pybind11::detail::npy_format_descriptor</ref>&lt;Type&gt;::register_dtype \
        ({<ref refid="numpy_8h_1a77fc031e547eb68a976b04c2878d171e" kindref="member">PYBIND11_MAP_LIST</ref> (<ref refid="numpy_8h_1aed753b33fb143320a3eb66bd0554ca66" kindref="member">PYBIND11_FIELD_DESCRIPTOR</ref>, Type, __VA_ARGS__)})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1197" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1ae82b526b3faa9fb789a32a5eef7ad330" prot="public" static="no">
        <name>PYBIND11_MAP2_LIST_NEXT1</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer>    <ref refid="numpy_8h_1a999ada17df55e2c39ae98fb6331b4e38" kindref="member">PYBIND11_MAP_NEXT0</ref> (test, <ref refid="numpy_8h_1ab0dfb33f84961be99d9f9a0cfdaf7e89" kindref="member">PYBIND11_MAP_COMMA</ref> next, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1205" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a150736d783cc092e21d3cdfa0d665991" prot="public" static="no">
        <name>PYBIND11_MAP2_LIST_NEXT</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer>    <ref refid="numpy_8h_1ae82b526b3faa9fb789a32a5eef7ad330" kindref="member">PYBIND11_MAP2_LIST_NEXT1</ref> (<ref refid="numpy_8h_1a9a3b5c5764c0f71cbcee0222b4bdd552" kindref="member">PYBIND11_MAP_GET_END</ref> test, next)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1208" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a7e41d47d3df8c7a7a110553dcfd02f91" prot="public" static="no">
        <name>PYBIND11_MAP2_LIST0</name>
        <param><defname>f</defname></param>
        <param><defname>t</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>    f(t, x1, x2) <ref refid="numpy_8h_1a150736d783cc092e21d3cdfa0d665991" kindref="member">PYBIND11_MAP2_LIST_NEXT</ref> (peek, <ref refid="numpy_8h_1a3a2806d1bf9fb5ad1fcd3e70e9721cde" kindref="member">PYBIND11_MAP2_LIST1</ref>) (f, t, peek, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1210" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a3a2806d1bf9fb5ad1fcd3e70e9721cde" prot="public" static="no">
        <name>PYBIND11_MAP2_LIST1</name>
        <param><defname>f</defname></param>
        <param><defname>t</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>    f(t, x1, x2) <ref refid="numpy_8h_1a150736d783cc092e21d3cdfa0d665991" kindref="member">PYBIND11_MAP2_LIST_NEXT</ref> (peek, <ref refid="numpy_8h_1a7e41d47d3df8c7a7a110553dcfd02f91" kindref="member">PYBIND11_MAP2_LIST0</ref>) (f, t, peek, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1212" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a210ad8bd2ed78857a5d798e31bf28930" prot="public" static="no">
        <name>PYBIND11_MAP2_LIST</name>
        <param><defname>f</defname></param>
        <param><defname>t</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="numpy_8h_1a47afd6544b9955cd00aa43f10538dbcb" kindref="member">PYBIND11_EVAL</ref> (<ref refid="numpy_8h_1a3a2806d1bf9fb5ad1fcd3e70e9721cde" kindref="member">PYBIND11_MAP2_LIST1</ref> (f, t, __VA_ARGS__, (), 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1215" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numpy_8h_1a552474514be342d6b440268c22684898" prot="public" static="no">
        <name>PYBIND11_NUMPY_DTYPE_EX</name>
        <param><defname>Type</defname></param>
        <param><defname>...</defname></param>
        <initializer>    ::<ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">pybind11::detail::npy_format_descriptor</ref>&lt;Type&gt;::register_dtype \
        ({<ref refid="numpy_8h_1a210ad8bd2ed78857a5d798e31bf28930" kindref="member">PYBIND11_MAP2_LIST</ref> (<ref refid="numpy_8h_1aa52d99114d699c78373a120bbacdb04b" kindref="member">PYBIND11_FIELD_DESCRIPTOR_EX</ref>, Type, __VA_ARGS__)})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" line="1218" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h" bodystart="1218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/numpy.h:<sp/>Basic<sp/>NumPy<sp/>support,<sp/>vectorize()<sp/>wrapper</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pybind11_8h" kindref="compound">pybind11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="complex_8h" kindref="compound">complex.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4127)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4127:<sp/>Conditional<sp/>expression<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>be<sp/>true<sp/>on<sp/>all<sp/>flat<sp/>address<sp/>space<sp/>platforms<sp/>and<sp/>allows<sp/>us<sp/>to<sp/>reduce<sp/>the</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>whole<sp/>npy_intp<sp/>/<sp/>ssize_t<sp/>/<sp/>Py_intptr_t<sp/>business<sp/>down<sp/>to<sp/>just<sp/>ssize_t<sp/>for<sp/>all<sp/>size</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>and<sp/>dimension<sp/>types<sp/>(e.g.<sp/>shape,<sp/>strides,<sp/>indexing),<sp/>instead<sp/>of<sp/>inflicting<sp/>this</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>upon<sp/>the<sp/>library<sp/>user.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_intptr_t),<sp/></highlight><highlight class="stringliteral">&quot;ssize_t<sp/>!=<sp/>Py_intptr_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">array;<sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">npy_format_descriptor;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="46" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a459448293465476f6ce5cd30b0fc1f24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a459448293465476f6ce5cd30b0fc1f24" kindref="member">typeobj</ref>;</highlight></codeline>
<codeline lineno="47" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a80394a8ab3e34f20bb56aa45eecc79c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a80394a8ab3e34f20bb56aa45eecc79c7" kindref="member">kind</ref>;</highlight></codeline>
<codeline lineno="48" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a0419f17d87490299a95b227b4b38ae9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a0419f17d87490299a95b227b4b38ae9c" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="49" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1af0c8e015461906d03bc6a5378bf972dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1af0c8e015461906d03bc6a5378bf972dc" kindref="member">byteorder</ref>;</highlight></codeline>
<codeline lineno="50" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a537035a3b67447fd73a8f3a289b4b13a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a537035a3b67447fd73a8f3a289b4b13a" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="51" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1af2fdb687c8b236bb65f084e3cb57985d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1af2fdb687c8b236bb65f084e3cb57985d" kindref="member">type_num</ref>;</highlight></codeline>
<codeline lineno="52" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a8dffffbe8cb1643e4f037e83c0ef0b59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a8dffffbe8cb1643e4f037e83c0ef0b59" kindref="member">elsize</ref>;</highlight></codeline>
<codeline lineno="53" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a92cd5da076b40e2fcbbd11757e2a0304" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a92cd5da076b40e2fcbbd11757e2a0304" kindref="member">alignment</ref>;</highlight></codeline>
<codeline lineno="54" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a8872254bca729a4b0e6c528b08676f2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a8872254bca729a4b0e6c528b08676f2a" kindref="member">subarray</ref>;</highlight></codeline>
<codeline lineno="55" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a5ee49d04e20a1d5e9433edfd72be831f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a5ee49d04e20a1d5e9433edfd72be831f" kindref="member">fields</ref>;</highlight></codeline>
<codeline lineno="56" refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a519fa6fde76787dbf595def6367784e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a519fa6fde76787dbf595def6367784e6" kindref="member">names</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structpybind11_1_1detail_1_1_py_array___proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="61" refid="structpybind11_1_1detail_1_1_py_array___proxy_1aa2f67ce20f96af93ec0f6cf3642ad172" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1aa2f67ce20f96af93ec0f6cf3642ad172" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="62" refid="structpybind11_1_1detail_1_1_py_array___proxy_1ac4bba6c1bcfd70141928cdf1aeca08bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ac4bba6c1bcfd70141928cdf1aeca08bd" kindref="member">nd</ref>;</highlight></codeline>
<codeline lineno="63" refid="structpybind11_1_1detail_1_1_py_array___proxy_1ac03f52a6a575e99e080848ac77806ee6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ac03f52a6a575e99e080848ac77806ee6" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="64" refid="structpybind11_1_1detail_1_1_py_array___proxy_1a4b6303bd9654e034b147345e81714dd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1a4b6303bd9654e034b147345e81714dd6" kindref="member">strides</ref>;</highlight></codeline>
<codeline lineno="65" refid="structpybind11_1_1detail_1_1_py_array___proxy_1a2f5da58c9f3c488fc18d03b4d0355408" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1a2f5da58c9f3c488fc18d03b4d0355408" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="66" refid="structpybind11_1_1detail_1_1_py_array___proxy_1a4badff6a8059055f4002ef9959cb7106" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1a4badff6a8059055f4002ef9959cb7106" kindref="member">descr</ref>;</highlight></codeline>
<codeline lineno="67" refid="structpybind11_1_1detail_1_1_py_array___proxy_1ab2f1675a90ae59d15889dae88ff40e63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ab2f1675a90ae59d15889dae88ff40e63" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy" kindref="compound">PyVoidScalarObject_Proxy</ref><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_VAR_HEAD</highlight></codeline>
<codeline lineno="72" refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1a1fbb24c02836b1ba02c0a1c6f3d61dcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1a1fbb24c02836b1ba02c0a1c6f3d61dcd" kindref="member">obval</ref>;</highlight></codeline>
<codeline lineno="73" refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1a65c25878e5b76c434d9807fd0c6a0a7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1a65c25878e5b76c434d9807fd0c6a0a7e" kindref="member">descr</ref>;</highlight></codeline>
<codeline lineno="74" refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1a5506af796d3e526e94f007ef090c5afb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1a5506af796d3e526e94f007ef090c5afb" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="75" refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1ae04f4e6c8a1682a1264fb101346927e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1detail_1_1_py_void_scalar_object___proxy_1ae04f4e6c8a1682a1264fb101346927e0" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="structpybind11_1_1detail_1_1numpy__type__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1numpy__type__info" kindref="compound">numpy_type_info</ref><sp/>{</highlight></codeline>
<codeline lineno="79" refid="structpybind11_1_1detail_1_1numpy__type__info_1a3f902456a6609128b8bcc67fb3d37593" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/><ref refid="structpybind11_1_1detail_1_1numpy__type__info_1a3f902456a6609128b8bcc67fb3d37593" kindref="member">dtype_ptr</ref>;</highlight></codeline>
<codeline lineno="80" refid="structpybind11_1_1detail_1_1numpy__type__info_1ac2b3497dbe7c89cf2623814de72da666" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structpybind11_1_1detail_1_1numpy__type__info_1ac2b3497dbe7c89cf2623814de72da666" kindref="member">format_str</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structpybind11_1_1detail_1_1numpy__internals" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1numpy__internals" kindref="compound">numpy_internals</ref><sp/>{</highlight></codeline>
<codeline lineno="84" refid="structpybind11_1_1detail_1_1numpy__internals_1afd12e19c895a4c3684d9625a3c971d53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::type_index,<sp/>numpy_type_info&gt;<sp/><ref refid="structpybind11_1_1detail_1_1numpy__internals_1afd12e19c895a4c3684d9625a3c971d53" kindref="member">registered_dtypes</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structpybind11_1_1detail_1_1numpy__internals_1add5ec5f7aa60d121f100cc50ec978575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1numpy__type__info" kindref="compound">numpy_type_info</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1numpy__internals_1add5ec5f7aa60d121f100cc50ec978575" kindref="member">get_type_info</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>tinfo,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_if_missing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>registered_dtypes.find(std::type_index(tinfo));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>registered_dtypes.end())</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(it-&gt;second);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(throw_if_missing)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(std::string(</highlight><highlight class="stringliteral">&quot;NumPy<sp/>type<sp/>info<sp/>missing<sp/>for<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>tinfo.name());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structpybind11_1_1detail_1_1numpy__internals_1ab4e8117b3e3301d626b39bdcd1003ca7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structpybind11_1_1detail_1_1numpy__type__info" kindref="compound">numpy_type_info</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1numpy__internals_1ab4e8117b3e3301d626b39bdcd1003ca7" kindref="member">get_type_info</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_if_missing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_type_info(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::remove_cv&lt;T&gt;::type</ref>),<sp/>throw_if_missing);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>load_numpy_internals(numpy_internals*<sp/>&amp;ptr)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>&amp;get_or_create_shared_data&lt;numpy_internals&gt;(</highlight><highlight class="stringliteral">&quot;_numpy_internals&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="namespacepybind11_1_1detail_1ad6e98161dfb25894460f7377e5d5744b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1numpy__internals" kindref="compound">numpy_internals</ref>&amp;<sp/><ref refid="namespacepybind11_1_1detail_1ad6e98161dfb25894460f7377e5d5744b" kindref="member">get_numpy_internals</ref>()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1numpy__internals" kindref="compound">numpy_internals</ref>*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_numpy_internals(ptr);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structpybind11_1_1detail_1_1npy__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__api" kindref="compound">npy_api</ref><sp/>{</highlight></codeline>
<codeline lineno="112" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112c" kindref="member">constants</ref><sp/>{</highlight></codeline>
<codeline lineno="113" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112cad3a6eac781c5323bfe42db2d538df452" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_C_CONTIGUOUS_<sp/>=<sp/>0x0001,</highlight></codeline>
<codeline lineno="114" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112cac87d7818b597c4b1c58f280c3da771b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_F_CONTIGUOUS_<sp/>=<sp/>0x0002,</highlight></codeline>
<codeline lineno="115" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca695feb6996e1d44c5ee8045782235ac3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_OWNDATA_<sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="116" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca0e95362a8e700112aa6115831179a42c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_FORCECAST_<sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="117" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112cab27561a8a29ea129e2cb5097ffb2f1f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_ENSUREARRAY_<sp/>=<sp/>0x0040,</highlight></codeline>
<codeline lineno="118" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca7d9863b8a14af246f25784acedcbe6c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_ALIGNED_<sp/>=<sp/>0x0100,</highlight></codeline>
<codeline lineno="119" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca21b7cdad413429dc3a83a89b8af4901d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_ARRAY_WRITEABLE_<sp/>=<sp/>0x0400,</highlight></codeline>
<codeline lineno="120" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca7d302c4a12211247fa69e53d1b998a9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_BOOL_<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="121" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca52719c39dbb4eb8b79863663b3cc5701" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca52719c39dbb4eb8b79863663b3cc5701" kindref="member">NPY_BYTE_</ref>,<sp/>NPY_UBYTE_,</highlight></codeline>
<codeline lineno="122" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca580c3bfb23b9176b38ea28b1a6e5f865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca580c3bfb23b9176b38ea28b1a6e5f865" kindref="member">NPY_SHORT_</ref>,<sp/>NPY_USHORT_,</highlight></codeline>
<codeline lineno="123" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca23a145b093eed79ff6cb7b52ad5720dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca23a145b093eed79ff6cb7b52ad5720dd" kindref="member">NPY_INT_</ref>,<sp/>NPY_UINT_,</highlight></codeline>
<codeline lineno="124" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca7f8647b6090747613ea17b488a739257" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca7f8647b6090747613ea17b488a739257" kindref="member">NPY_LONG_</ref>,<sp/>NPY_ULONG_,</highlight></codeline>
<codeline lineno="125" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca3c09d2993df8772f10aa4340c5e843f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca3c09d2993df8772f10aa4340c5e843f4" kindref="member">NPY_LONGLONG_</ref>,<sp/>NPY_ULONGLONG_,</highlight></codeline>
<codeline lineno="126" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112cab9372fc2103d33187fea1a5cffdc8b32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_FLOAT_,<sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112cab9372fc2103d33187fea1a5cffdc8b32" kindref="member">NPY_DOUBLE_</ref>,<sp/>NPY_LONGDOUBLE_,</highlight></codeline>
<codeline lineno="127" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112caad3f975a13494b7ffec67a68fa47a35d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_CFLOAT_,<sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112caad3f975a13494b7ffec67a68fa47a35d" kindref="member">NPY_CDOUBLE_</ref>,<sp/>NPY_CLONGDOUBLE_,</highlight></codeline>
<codeline lineno="128" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca952d7810702e22375f1fc3c7bfb6e60d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPY_OBJECT_<sp/>=<sp/>17,</highlight></codeline>
<codeline lineno="129" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112caa32df5df352161e32381272bdf1d2315" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112caa32df5df352161e32381272bdf1d2315" kindref="member">NPY_STRING_</ref>,<sp/>NPY_UNICODE_,<sp/>NPY_VOID_</highlight></codeline>
<codeline lineno="130" refid="structpybind11_1_1detail_1_1npy__api_1abd526a7e3dabfa5fa2e4b76c6aca112ca803a43d93cc7eb31d66185a8cb7d42f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133" refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims_1aea41501a139e5bf20d5592d09d138b4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_intptr_t<sp/>*<ref refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims_1aea41501a139e5bf20d5592d09d138b4e" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="134" refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims_1aff7efe50e1de925da9a86b481e38f93a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims_1aff7efe50e1de925da9a86b481e38f93a" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims" kindref="compound">PyArray_Dims</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="structpybind11_1_1detail_1_1npy__api_1a6cbffe9763f89f63d3cfc8f94c90791f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api" kindref="compound">npy_api</ref>&amp;<sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1a6cbffe9763f89f63d3cfc8f94c90791f" kindref="member">get</ref>()<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api" kindref="compound">npy_api</ref><sp/>api<sp/>=<sp/>lookup();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structpybind11_1_1detail_1_1npy__api_1add491ff97b037c3f8343d052d71a9c32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1add491ff97b037c3f8343d052d71a9c32" kindref="member">PyArray_Check_</ref>(PyObject<sp/>*obj)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>PyObject_TypeCheck(obj,<sp/>PyArray_Type_);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145" refid="structpybind11_1_1detail_1_1npy__api_1a8d384a57bb0c1cad8a5724e9efb1eb69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1a8d384a57bb0c1cad8a5724e9efb1eb69" kindref="member">PyArrayDescr_Check_</ref>(PyObject<sp/>*obj)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>PyObject_TypeCheck(obj,<sp/>PyArrayDescr_Type_);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="structpybind11_1_1detail_1_1npy__api_1a09419de0de5604d07eeb01aedd78f423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*PyArray_GetNDArrayCFeatureVersion_)();</highlight></codeline>
<codeline lineno="150" refid="structpybind11_1_1detail_1_1npy__api_1a9b86dc6387e6baa0f5a938dbd0849ef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_DescrFromType_)(int);</highlight></codeline>
<codeline lineno="151" refid="structpybind11_1_1detail_1_1npy__api_1a7d396aa34e1fb90dd1932969c1ee9f05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_NewFromDescr_)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyTypeObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>int,<sp/>Py_intptr_t<sp/>*,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_intptr_t<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="154" refid="structpybind11_1_1detail_1_1npy__api_1a175e05ec2024f59f44dd453d33207287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_DescrNewFromType_)(int);</highlight></codeline>
<codeline lineno="155" refid="structpybind11_1_1detail_1_1npy__api_1adac7f4a6780442adcbe441f1b40ff86d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*PyArray_CopyInto_)(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="156" refid="structpybind11_1_1detail_1_1npy__api_1acb5a929718249f0c9b595259cd79209c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_NewCopy_)(PyObject<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="157" refid="structpybind11_1_1detail_1_1npy__api_1a7a2145a7b58a7574573ad490f0f3179f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*<ref refid="structpybind11_1_1detail_1_1npy__api_1a7a2145a7b58a7574573ad490f0f3179f" kindref="member">PyArray_Type_</ref>;</highlight></codeline>
<codeline lineno="158" refid="structpybind11_1_1detail_1_1npy__api_1a684266fde65465770c665d5884491d16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*<ref refid="structpybind11_1_1detail_1_1npy__api_1a684266fde65465770c665d5884491d16" kindref="member">PyVoidArrType_Type_</ref>;</highlight></codeline>
<codeline lineno="159" refid="structpybind11_1_1detail_1_1npy__api_1a4ac4caf00e252e21cd15e888e29d64ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*<ref refid="structpybind11_1_1detail_1_1npy__api_1a4ac4caf00e252e21cd15e888e29d64ea" kindref="member">PyArrayDescr_Type_</ref>;</highlight></codeline>
<codeline lineno="160" refid="structpybind11_1_1detail_1_1npy__api_1aced4a700c7b4be7c75f524938d9f7297" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_DescrFromScalar_)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="161" refid="structpybind11_1_1detail_1_1npy__api_1a901e0e478c3c31edf728b93cfdae1cb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_FromAny_)<sp/>(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>int,<sp/>int,<sp/>int,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="162" refid="structpybind11_1_1detail_1_1npy__api_1ab36ace55b57cfdf8ee4495aa36ac91df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*PyArray_DescrConverter_)<sp/>(PyObject<sp/>*,<sp/>PyObject<sp/>**);</highlight></codeline>
<codeline lineno="163" refid="structpybind11_1_1detail_1_1npy__api_1a186f600d4739c60d69f7817cab171c03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>(*PyArray_EquivTypes_)<sp/>(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="164" refid="structpybind11_1_1detail_1_1npy__api_1a6be80b612675334ca802509fe79e29fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*PyArray_GetArrayParamsFromObject_)(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>char,<sp/>PyObject<sp/>**,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*,<sp/>PyObject<sp/>**,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="166" refid="structpybind11_1_1detail_1_1npy__api_1a4f9013c8e87997d95bba80b6bf4834be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*PyArray_Squeeze_)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="167" refid="structpybind11_1_1detail_1_1npy__api_1adac6769af31fb0ebea2900da18ddce06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*PyArray_SetBaseObject_)(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="168" refid="structpybind11_1_1detail_1_1npy__api_1aaf8aac1fb0bb341664fa55fa6151c649" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>(*PyArray_Resize_)(PyObject*,<sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims" kindref="compound">PyArray_Dims</ref>*,<sp/>int,<sp/>int);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>functions<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_GetNDArrayCFeatureVersion<sp/>=<sp/>211,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_Type<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArrayDescr_Type<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyVoidArrType_Type<sp/>=<sp/>39,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_DescrFromType<sp/>=<sp/>45,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_DescrFromScalar<sp/>=<sp/>57,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_FromAny<sp/>=<sp/>69,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_Resize<sp/>=<sp/>80,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_CopyInto<sp/>=<sp/>82,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_NewCopy<sp/>=<sp/>85,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_NewFromDescr<sp/>=<sp/>94,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_DescrNewFromType<sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_DescrConverter<sp/>=<sp/>174,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_EquivTypes<sp/>=<sp/>182,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_GetArrayParamsFromObject<sp/>=<sp/>278,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_Squeeze<sp/>=<sp/>136,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API_PyArray_SetBaseObject<sp/>=<sp/>282</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__api" kindref="compound">npy_api</ref><sp/>lookup()<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1module" kindref="compound">module</ref><sp/>m<sp/>=<sp/>module::import(</highlight><highlight class="stringliteral">&quot;numpy.core.multiarray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>m.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;_ARRAY_API&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**api_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>PyCapsule_GetPointer(c.ptr(),<sp/>NULL);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**api_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>PyCObject_AsVoidPtr(c.ptr());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api" kindref="compound">npy_api</ref><sp/>api;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECL_NPY_API(Func)<sp/>api.Func##_<sp/>=<sp/>(decltype(api.Func##_))<sp/>api_ptr[API_##Func];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_GetNDArrayCFeatureVersion);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(api.<ref refid="structpybind11_1_1detail_1_1npy__api_1a09419de0de5604d07eeb01aedd78f423" kindref="member">PyArray_GetNDArrayCFeatureVersion_</ref>()<sp/>&lt;<sp/>0x7)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;pybind11<sp/>numpy<sp/>support<sp/>requires<sp/>numpy<sp/>&gt;=<sp/>1.7.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_Type);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyVoidArrType_Type);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArrayDescr_Type);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_DescrFromType);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_DescrFromScalar);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_FromAny);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_Resize);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_CopyInto);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_NewCopy);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_NewFromDescr);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_DescrNewFromType);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_DescrConverter);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_EquivTypes);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_GetArrayParamsFromObject);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_Squeeze);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numpy_8h_1a768c8088df09e01900e24dc5456ab5a8" kindref="member">DECL_NPY_API</ref>(PyArray_SetBaseObject);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DECL_NPY_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="namespacepybind11_1_1detail_1a5b98a9783ca34a76463d4bdfc46f0fb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref>*<sp/><ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">array_proxy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref>*<sp/><ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">array_proxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_array___proxy" kindref="compound">PyArray_Proxy</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="namespacepybind11_1_1detail_1a13f77c16e4d58f2720bfb4be22f1b057" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref>*<sp/><ref refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" kindref="member">array_descriptor_proxy</ref>(PyObject*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref>*<sp/><ref refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" kindref="member">array_descriptor_proxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PyObject*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy" kindref="compound">PyArrayDescr_Proxy</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="namespacepybind11_1_1detail_1aaf5f6d49cca947d586e940fb0ea8ecd8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aaf5f6d49cca947d586e940fb0ea8ecd8" kindref="member">check_flags</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">array_proxy</ref>(ptr)-&gt;flags<sp/>&amp;<sp/>flag));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="structpybind11_1_1detail_1_1is__std__array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__std__array" kindref="compound">is_std_array</ref><sp/>:<sp/>std::false_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="245" refid="structpybind11_1_1detail_1_1is__std__array_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__std__array" kindref="compound">is_std_array</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1array" kindref="compound">array</ref>&lt;T,<sp/>N&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="246" refid="structpybind11_1_1detail_1_1is__complex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__complex" kindref="compound">is_complex</ref><sp/>:<sp/>std::false_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="247" refid="structpybind11_1_1detail_1_1is__complex_3_01std_1_1complex_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__complex" kindref="compound">is_complex</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::complex&lt;T&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="structpybind11_1_1detail_1_1array__info__scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1array__info__scalar" kindref="compound">array_info_scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="250" refid="structpybind11_1_1detail_1_1array__info__scalar_1a7ff890128fb480526d0c508641002f49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar_1a7ff890128fb480526d0c508641002f49" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="251" refid="structpybind11_1_1detail_1_1array__info__scalar_1a98be78ff82bf6cc667ec9f15bcb2af6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_array<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252" refid="structpybind11_1_1detail_1_1array__info__scalar_1ab69d4441f35c450ad5256f8b49c46629" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_empty<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253" refid="structpybind11_1_1detail_1_1array__info__scalar_1acfddfa9dc2833bb7fb79dc0091e16ea8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar_1acfddfa9dc2833bb7fb79dc0091e16ea8" kindref="member">extents</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="254" refid="structpybind11_1_1detail_1_1array__info__scalar_1aa93cad5020a0384d82c9949a092dac99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar_1aa93cad5020a0384d82c9949a092dac99" kindref="member">append_extents</ref>(<ref refid="classpybind11_1_1list" kindref="compound">list</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>shape<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>underlying<sp/>type<sp/>and<sp/>a<sp/>comma-separated<sp/>list<sp/>of<sp/>extents<sp/>for<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types<sp/>(any<sp/>mix<sp/>of<sp/>std::array<sp/>and<sp/>built-in<sp/>arrays).<sp/>An<sp/>array<sp/>of<sp/>char<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>treated<sp/>as<sp/>scalar<sp/>because<sp/>it<sp/>gets<sp/>special<sp/>handling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="structpybind11_1_1detail_1_1array__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar" kindref="compound">array_info_scalar</ref>&lt;T&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="260" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1array" kindref="compound">array</ref>&lt;T,<sp/>N&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="261" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1aa045462a4c9b3fb49e054d7eb5422749" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1aa045462a4c9b3fb49e054d7eb5422749" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar_1a7ff890128fb480526d0c508641002f49" kindref="member">array_info&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="262" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1a6da8f62bbc8ba22e4518eec8fe73f113" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_array<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1adee990464db2323f951e6962514010db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_empty<sp/>=<sp/>(N<sp/>==<sp/>0)<sp/>||<sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info&lt;T&gt;::is_empty</ref>;</highlight></codeline>
<codeline lineno="264" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1a59ad47d69b6e6990dd56eefe19600197" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extent<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>appends<sp/>the<sp/>extents<sp/>to<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1aeb18a8089f01d7f3099dab4558bc1c35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1aeb18a8089f01d7f3099dab4558bc1c35" kindref="member">append_extents</ref>(<ref refid="classpybind11_1_1list" kindref="compound">list</ref>&amp;<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.append(N);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info&lt;T&gt;::append_extents</ref>(shape);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T2<sp/>=<sp/>T,<sp/>enable_if_t&lt;!array_info&lt;T2&gt;::is_array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="273" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1a752a45874b259ed0b8b0db168ed0f8d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1a752a45874b259ed0b8b0db168ed0f8d8" kindref="member">extents</ref>()<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_&lt;N&gt;();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T2<sp/>=<sp/>T,<sp/>enable_if_t&lt;array_info&lt;T2&gt;::is_array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="278" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1a752a45874b259ed0b8b0db168ed0f8d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4_1a752a45874b259ed0b8b0db168ed0f8d8" kindref="member">extents</ref>()<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>concat(_&lt;N&gt;(),<sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info&lt;T&gt;::extents</ref>());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>numpy<sp/>we<sp/>have<sp/>special<sp/>handling<sp/>for<sp/>arrays<sp/>of<sp/>characters,<sp/>so<sp/>we<sp/>don&apos;t<sp/>include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>size<sp/>in<sp/>the<sp/>array<sp/>extents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="structpybind11_1_1detail_1_1array__info_3_01char_0f_n_0e_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt;char[N]&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar" kindref="compound">array_info_scalar</ref>&lt;char[N]&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="285" refid="structpybind11_1_1detail_1_1array__info_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1array" kindref="compound">array</ref>&lt;char,<sp/>N&gt;&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar" kindref="compound">array_info_scalar</ref>&lt;std::array&lt;char,<sp/>N&gt;&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="286" refid="structpybind11_1_1detail_1_1array__info_3_01_t_0f_n_0e_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt;T[N]&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt;std::array&lt;T,<sp/>N&gt;&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="287" refid="namespacepybind11_1_1detail_1a4d8e4fbda3de32503264bcc1973528c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a4d8e4fbda3de32503264bcc1973528c8" kindref="member">remove_all_extents_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1array__info__scalar_1a7ff890128fb480526d0c508641002f49" kindref="member">array_info&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="namespacepybind11_1_1detail_1a1a4721eca1b368180b3bf47a59279a07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a1a4721eca1b368180b3bf47a59279a07" kindref="member">is_pod_struct</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_standard_layout&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we&apos;re<sp/>accessing<sp/>directly<sp/>in<sp/>memory<sp/>we<sp/>need<sp/>a<sp/>standard<sp/>layout<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__GNUG__)<sp/>||<sp/>defined(__clang__)<sp/>||<sp/>__GNUC__<sp/>&gt;=<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_trivially_copyable&lt;T&gt;,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GCC<sp/>4<sp/>doesn&apos;t<sp/>implement<sp/>is_trivially_copyable,<sp/>so<sp/>approximate<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_trivially_destructible&lt;T&gt;,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_any_of&lt;T, std::has_trivial_copy_constructor, std::has_trivial_copy_assign&gt;</ref>,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_none_of&lt;T, std::is_reference, std::is_array, is_std_array, std::is_arithmetic, is_complex, std::is_enum&gt;</ref></highlight></codeline>
<codeline lineno="299"><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="namespacepybind11_1_1detail_1af0c12d392b01e82c9fe09d06aef306fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Dim<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">es&gt;<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="namespacepybind11_1_1detail_1a442f46b08dff572e6eccf4e0c904ffe8" kindref="member">byte_offset_unsafe</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Strides<sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>Dim<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Strides,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;</highlight></codeline>
<codeline lineno="303" refid="namespacepybind11_1_1detail_1a442f46b08dff572e6eccf4e0c904ffe8" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="namespacepybind11_1_1detail_1a442f46b08dff572e6eccf4e0c904ffe8" kindref="member">byte_offset_unsafe</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Strides<sp/>&amp;strides,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>i,<sp/>Ix...<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>*<sp/>strides[Dim]<sp/>+<sp/>byte_offset_unsafe&lt;Dim<sp/>+<sp/>1&gt;(strides,<sp/>index...);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Dims&gt;</highlight></codeline>
<codeline lineno="313" refid="classpybind11_1_1detail_1_1unchecked__reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">unchecked_reference</ref><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="315" refid="classpybind11_1_1detail_1_1unchecked__reference_1a602375246b64493b78a4911479f8ed59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Dynamic<sp/>=<sp/>Dims<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="316" refid="classpybind11_1_1detail_1_1unchecked__reference_1aec1f76e919a1c76894ea21b055092b51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1detail_1_1unchecked__reference_1aec1f76e919a1c76894ea21b055092b51" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Storing<sp/>the<sp/>shape<sp/>&amp;<sp/>strides<sp/>in<sp/>local<sp/>variables<sp/>(i.e.<sp/>these<sp/>arrays)<sp/>allows<sp/>the<sp/>compiler<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>large<sp/>performance<sp/>gains<sp/>on<sp/>big,<sp/>nested<sp/>loops,<sp/>but<sp/>requires<sp/>compile-time<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt;Dynamic,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*,<sp/>std::array&lt;<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>,<sp/>(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>Dims&gt;&gt;</highlight></codeline>
<codeline lineno="320" refid="classpybind11_1_1detail_1_1unchecked__reference_1ab1a911b46d978a77b0b6b45958c25427" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_,<sp/>strides_;</highlight></codeline>
<codeline lineno="321" refid="classpybind11_1_1detail_1_1unchecked__reference_1a211a097f84346148e1891bca1b751f23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a211a097f84346148e1891bca1b751f23" kindref="member">dims_</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classpybind11_1_1detail_1_1unchecked__reference_1abcb10178a21ebe8e899ca951b2e68608" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1array" kindref="compound">pybind11::array</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>for<sp/>compile-time<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Dyn<sp/>=<sp/>Dynamic&gt;</highlight></codeline>
<codeline lineno="326" refid="classpybind11_1_1detail_1_1unchecked__reference_1ae1a239622a3fd6a7fc0e2c4d70e0eb16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1ae1a239622a3fd6a7fc0e2c4d70e0eb16" kindref="member">unchecked_reference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" kindref="member">data</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*<ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*<ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;!Dyn, ssize_t&gt;</ref>)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_{reinterpret_cast&lt;const<sp/>unsigned<sp/>char<sp/>*&gt;(<ref refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" kindref="member">data</ref>)},<sp/>dims_{Dims}<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>dims_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_[i]<sp/>=<sp/><ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>[i];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides_[i]<sp/>=<sp/><ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>[i];</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>for<sp/>runtime<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Dyn<sp/>=<sp/>Dynamic&gt;</highlight></codeline>
<codeline lineno="335" refid="classpybind11_1_1detail_1_1unchecked__reference_1a92f84d50016205af9be2d60e4c4d81cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a92f84d50016205af9be2d60e4c4d81cf" kindref="member">unchecked_reference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" kindref="member">data</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*<ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*<ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;Dyn, ssize_t&gt;</ref><sp/>dims)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_{reinterpret_cast&lt;const<sp/>unsigned<sp/>char<sp/>*&gt;(<ref refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" kindref="member">data</ref>)},<sp/>shape_{<ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>},<sp/>strides_{<ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>},<sp/>dims_{dims}<sp/>{}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344" refid="classpybind11_1_1detail_1_1unchecked__reference_1a59d3e140a42913ed4752b909383dbdad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a59d3e140a42913ed4752b909383dbdad" kindref="member">operator()</ref>(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ix)<sp/>==<sp/>Dims<sp/>||<sp/>Dynamic,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>indices<sp/>for<sp/>unchecked<sp/>array<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data_<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a442f46b08dff572e6eccf4e0c904ffe8" kindref="member">byte_offset_unsafe</ref>(strides_,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(index)...));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>Dims,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>enable_if_t&lt;D<sp/>==<sp/>1<sp/>||<sp/>Dynamic&gt;&gt;</highlight></codeline>
<codeline lineno="354" refid="classpybind11_1_1detail_1_1unchecked__reference_1ab04777ebfeca92b9940a5174144d74b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classpybind11_1_1detail_1_1unchecked__reference_1ab04777ebfeca92b9940a5174144d74b4" kindref="member">operator[]</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" kindref="member">operator()</ref>(index);<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="classpybind11_1_1detail_1_1unchecked__reference_1aa5b6aff1227b20055aa4fc9cf712f76d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*<ref refid="classpybind11_1_1detail_1_1unchecked__reference_1aa5b6aff1227b20055aa4fc9cf712f76d" kindref="member">data</ref>(Ix...<sp/>ix)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" kindref="member">operator()</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(ix)...);<sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classpybind11_1_1detail_1_1unchecked__reference_1a4850d6975946752c69ac9dda9e5aa15f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a4850d6975946752c69ac9dda9e5aa15f" kindref="member">itemsize</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);<sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="classpybind11_1_1detail_1_1unchecked__reference_1a9eb41b88c1f9d324d173bff84a2d9529" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a9eb41b88c1f9d324d173bff84a2d9529" kindref="member">shape</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>dim)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_[(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>dim];<sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="classpybind11_1_1detail_1_1unchecked__reference_1abf5b9241bd9dd87045a50ab2366a8f24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1abf5b9241bd9dd87045a50ab2366a8f24" kindref="member">ndim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dims_;<sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Dyn<sp/>=<sp/>Dynamic&gt;</highlight></codeline>
<codeline lineno="370" refid="classpybind11_1_1detail_1_1unchecked__reference_1a9259e6deb28be48ff9b51622dae67481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;!Dyn, ssize_t&gt;</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a9259e6deb28be48ff9b51622dae67481" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(shape_.begin(),<sp/>shape_.end(),<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>1,<sp/>std::multiplies&lt;ssize_t&gt;());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Dyn<sp/>=<sp/>Dynamic&gt;</highlight></codeline>
<codeline lineno="374" refid="classpybind11_1_1detail_1_1unchecked__reference_1ae956fd9a7e6effa5e096ae8d549b4e11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;Dyn, ssize_t&gt;</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1ae956fd9a7e6effa5e096ae8d549b4e11" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(shape_,<sp/>shape_<sp/>+<sp/><ref refid="classpybind11_1_1array_1a1f347b49d01c2f35ad5fadc7e620d8ad" kindref="member">ndim</ref>(),<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>1,<sp/>std::multiplies&lt;ssize_t&gt;());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classpybind11_1_1detail_1_1unchecked__reference_1a93269897270343c933c93eafa24b94e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference_1a93269897270343c933c93eafa24b94e6" kindref="member">nbytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1afca19b0c0896314a48ba4bd1d8015924" kindref="member">size</ref>()<sp/>*<sp/><ref refid="classpybind11_1_1array_1a10340a5561983400712a61483f9f478f" kindref="member">itemsize</ref>();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal">};</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Dims&gt;</highlight></codeline>
<codeline lineno="386" refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" kindref="compound">unchecked_mutable_reference</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">unchecked_reference</ref>&lt;T,<sp/>Dims&gt;<sp/>{</highlight></codeline>
<codeline lineno="387" refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1abcb10178a21ebe8e899ca951b2e68608" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1array" kindref="compound">pybind11::array</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">ConstBase</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">unchecked_reference&lt;T, Dims&gt;</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConstBase::ConstBase;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConstBase::Dynamic;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="393" refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1a0c4d71551d5deee697a2f50f58fab0da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/>T&amp;<sp/><ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1a0c4d71551d5deee697a2f50f58fab0da" kindref="member">operator()</ref>(Ix...<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ix)<sp/>==<sp/>Dims<sp/>||<sp/>Dynamic,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>indices<sp/>for<sp/>unchecked<sp/>array<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ConstBase::operator()(index...));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>Dims,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>enable_if_t&lt;D<sp/>==<sp/>1<sp/>||<sp/>Dynamic&gt;&gt;</highlight></codeline>
<codeline lineno="404" refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1a7f201b6df8e1d02666e0fe721261bcf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>&amp;<ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1a7f201b6df8e1d02666e0fe721261bcf0" kindref="member">operator[]</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" kindref="member">operator()</ref>(index);<sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1aaa9d90c0a3a7551023ab3812da5c76cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/>T<sp/>*<ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference_1aaa9d90c0a3a7551023ab3812da5c76cf" kindref="member">mutable_data</ref>(Ix...<sp/>ix)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" kindref="member">operator()</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(ix)...);<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal">};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Dim&gt;</highlight></codeline>
<codeline lineno="411" refid="structpybind11_1_1detail_1_1type__caster_3_01unchecked__reference_3_01_t_00_01_dim_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">unchecked_reference</ref>&lt;T,<sp/>Dim&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(Dim<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>Dim<sp/>&gt;<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>always<sp/>fail<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;unchecked<sp/>array<sp/>proxy<sp/>object<sp/>is<sp/>not<sp/>castable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>s</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Dim&gt;</highlight></codeline>
<codeline lineno="415" refid="structpybind11_1_1detail_1_1type__caster_3_01unchecked__mutable__reference_3_01_t_00_01_dim_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" kindref="compound">unchecked_mutable_reference</ref>&lt;T,<sp/>Dim&gt;&gt;<sp/>:<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;unchecked_reference&lt;T,<sp/>Dim&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classpybind11_1_1dtype" refkind="compound"><highlight class="normal">class<sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref><sp/>:<sp/>public<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="421" refid="classpybind11_1_1dtype_1a80c27e90a8c3ed209a30cb15f409d4e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>detail::npy_api::get().PyArrayDescr_Check_);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classpybind11_1_1dtype_1ad53803f03d109db696836cd606ce5263" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype_1ad53803f03d109db696836cd606ce5263" kindref="member">dtype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref><sp/>&amp;info)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref><sp/>descr(_dtype_from_pep3118()(<ref refid="common_8h_1a2b41a4f15526b8c6346dc68f9998d0e7" kindref="member">PYBIND11_STR_TYPE</ref>(info.<ref refid="structpybind11_1_1buffer__info_1a90c21deeddd49bc4436d8654b76ad9a5" kindref="member">format</ref>)));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>info.itemsize<sp/>==<sp/>0,<sp/>use<sp/>the<sp/>value<sp/>calculated<sp/>from<sp/>the<sp/>format<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>descr.strip_padding(info.<ref refid="structpybind11_1_1buffer__info_1acf1ef96f83718e98bbe9ab4c2f8d45ef" kindref="member">itemsize</ref><sp/>?<sp/>info.<ref refid="structpybind11_1_1buffer__info_1acf1ef96f83718e98bbe9ab4c2f8d45ef" kindref="member">itemsize</ref><sp/>:<sp/>descr.<ref refid="classpybind11_1_1dtype_1a0b9e78608ec9c52d53e74af45a448612" kindref="member">itemsize</ref>()).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="classpybind11_1_1dtype_1aa7145fdff7975ab31c33f89fb3612e64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype_1aa7145fdff7975ab31c33f89fb3612e64" kindref="member">dtype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;format)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>from_args(<ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(format)).release().ptr();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="classpybind11_1_1dtype_1a790cfc317dcf1d419f1b71f7d1c92c95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dtype_1a790cfc317dcf1d419f1b71f7d1c92c95" kindref="member">dtype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format)<sp/>:<sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::string(format))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="classpybind11_1_1dtype_1acb9f72b49985a00c8343fabecda0cad8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dtype_1acb9f72b49985a00c8343fabecda0cad8" kindref="member">dtype</ref>(<ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>names,<sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>formats,<sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>offsets,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>itemsize)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>[</highlight><highlight class="stringliteral">&quot;names&quot;</highlight><highlight class="normal">]<sp/>=<sp/>names;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>[</highlight><highlight class="stringliteral">&quot;formats&quot;</highlight><highlight class="normal">]<sp/>=<sp/>formats;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>[</highlight><highlight class="stringliteral">&quot;offsets&quot;</highlight><highlight class="normal">]<sp/>=<sp/>offsets;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>[</highlight><highlight class="stringliteral">&quot;itemsize&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a20fe1c2f5fbb219cb211956780afee53" kindref="member">pybind11::int_</ref>(itemsize);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>from_args(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>).release().ptr();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="classpybind11_1_1dtype_1a742c7f76781541777fbd34c0ad4e8f8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref><sp/><ref refid="classpybind11_1_1dtype_1a742c7f76781541777fbd34c0ad4e8f8f" kindref="member">from_args</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detail::npy_api::get().PyArray_DescrConverter_(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>.<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>&amp;ptr)<sp/>||<sp/>!ptr)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;dtype&gt;(ptr);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classpybind11_1_1dtype_1a31d7ba33e431c01d267a1f8b7e073bcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref><sp/><ref refid="classpybind11_1_1dtype_1a31d7ba33e431c01d267a1f8b7e073bcb" kindref="member">of</ref>()<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">detail::npy_format_descriptor&lt;typename std::remove_cv&lt;T&gt;::type</ref>&gt;<ref refid="classpybind11_1_1dtype" kindref="compound">::dtype</ref>();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classpybind11_1_1dtype_1a0b9e78608ec9c52d53e74af45a448612" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1dtype_1a0b9e78608ec9c52d53e74af45a448612" kindref="member">itemsize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" kindref="member">detail::array_descriptor_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a8dffffbe8cb1643e4f037e83c0ef0b59" kindref="member">elsize</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="classpybind11_1_1dtype_1a41b2518619accd92c1046c1815e2a4ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype_1a41b2518619accd92c1046c1815e2a4ca" kindref="member">has_fields</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" kindref="member">detail::array_descriptor_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a519fa6fde76787dbf595def6367784e6" kindref="member">names</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="classpybind11_1_1dtype_1a3ab57c8ab9837424204f476cf2a48cb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype_1a3ab57c8ab9837424204f476cf2a48cb7" kindref="member">kind</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" kindref="member">detail::array_descriptor_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a80394a8ab3e34f20bb56aa45eecc79c7" kindref="member">kind</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>_dtype_from_pep3118()<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*obj<sp/>=<sp/>module::import(</highlight><highlight class="stringliteral">&quot;numpy.core._internal&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.attr(</highlight><highlight class="stringliteral">&quot;_dtype_from_pep3118&quot;</highlight><highlight class="normal">).cast&lt;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&gt;().release().ptr();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;object&gt;(obj);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>dtype<sp/>strip_padding(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>itemsize)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>strip<sp/>all<sp/>void<sp/>fields<sp/>with<sp/>empty<sp/>names<sp/>that<sp/>are<sp/>generated<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>padding<sp/>fields<sp/>(as<sp/>of<sp/>NumPy<sp/>v1.11).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_fields())</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">field_descr<sp/>{<sp/><ref refid="common_8h_1a2b41a4f15526b8c6346dc68f9998d0e7" kindref="member">PYBIND11_STR_TYPE</ref><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>format;<sp/><ref refid="classpybind11_1_1int__" kindref="compound">pybind11::int_</ref><sp/>offset;<sp/>};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;field_descr&gt;<sp/>field_descriptors;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>:<sp/>attr(</highlight><highlight class="stringliteral">&quot;fields&quot;</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;items&quot;</highlight><highlight class="normal">)())<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spec<sp/>=<sp/>field.<ref refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" kindref="member">cast</ref>&lt;tuple&gt;();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref><sp/>=<sp/>spec[0].cast&lt;<ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>&gt;();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>spec[1].<ref refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" kindref="member">cast</ref>&lt;tuple&gt;()[0].cast&lt;dtype&gt;();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>spec[1].cast&lt;tuple&gt;()[1].cast&lt;pybind11::int_&gt;();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>&amp;&amp;<sp/>format.kind()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;V&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field_descriptors.push_back({(<ref refid="common_8h_1a2b41a4f15526b8c6346dc68f9998d0e7" kindref="member">PYBIND11_STR_TYPE</ref>)<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/>format.strip_padding(format.itemsize()),<sp/>offset});</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(field_descriptors.begin(),<sp/>field_descriptors.end(),</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>field_descr&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>field_descr&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>a.offset.cast&lt;int&gt;()<sp/>&lt;<sp/>b.offset.cast&lt;int&gt;();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>names,<sp/>formats,<sp/>offsets;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>descr<sp/>:<sp/>field_descriptors)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.append(descr.name);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formats.append(descr.format);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets.append(descr.offset);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dtype(names,<sp/>formats,<sp/>offsets,<sp/>itemsize);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal">};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="classpybind11_1_1array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="515" refid="classpybind11_1_1array_1a917457eea05ecc0d8568c49e87495aab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1array" kindref="compound">array</ref>,<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>detail::npy_api::get().PyArray_Check_,<sp/>raw_array)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_style<sp/>=<sp/>detail::npy_api::NPY_ARRAY_C_CONTIGUOUS_,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_style<sp/>=<sp/>detail::npy_api::NPY_ARRAY_F_CONTIGUOUS_,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forcecast<sp/>=<sp/>detail::npy_api::NPY_ARRAY_FORCECAST_</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="classpybind11_1_1array_1a1627f32955fb284f23093d51faba300c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array_1a1627f32955fb284f23093d51faba300c" kindref="member">array</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>({{0}},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="classpybind11_1_1array_1aac2f71721e5b612933b0a7d2cdc53349" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">detail::any_container&lt;ssize_t&gt;</ref>;</highlight></codeline>
<codeline lineno="526" refid="classpybind11_1_1array_1a9fe6f45309595710451472fbf16e89c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">StridesContainer</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">detail::any_container&lt;ssize_t&gt;</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>array<sp/>taking<sp/>shape/strides<sp/>from<sp/>arbitrary<sp/>container<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="classpybind11_1_1array_1a87b716fffe8b8099513be5dae61ced16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array_1a87b716fffe8b8099513be5dae61ced16" kindref="member">array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/>&amp;dt,<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>shape,<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">StridesContainer</ref><sp/>strides,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strides-&gt;empty())</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*strides<sp/>=<sp/>c_strides(*shape,<sp/>dt.<ref refid="classpybind11_1_1dtype_1a0b9e78608ec9c52d53e74af45a448612" kindref="member">itemsize</ref>());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>shape-&gt;size();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>!=<sp/>strides-&gt;size())</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;NumPy:<sp/>shape<sp/>ndim<sp/>doesn&apos;t<sp/>match<sp/>strides<sp/>ndim&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>descr<sp/>=<sp/>dt;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>&amp;&amp;<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isinstance&lt;array&gt;(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>))</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>flags<sp/>from<sp/>base<sp/>(except<sp/>ownership<sp/>bit)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>reinterpret_borrow&lt;array&gt;(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>).flags()<sp/>&amp;<sp/>~detail::npy_api::NPY_ARRAY_OWNDATA_;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Writable<sp/>by<sp/>default,<sp/>easy<sp/>to<sp/>downgrade<sp/>later<sp/>on<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>detail::npy_api::NPY_ARRAY_WRITEABLE_;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;api<sp/>=<sp/>detail::npy_api::get();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>reinterpret_steal&lt;object&gt;(api.PyArray_NewFromDescr_(</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api.PyArray_Type_,<sp/>descr.release().ptr(),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ndim,<sp/>shape-&gt;data(),<sp/>strides-&gt;data(),</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr),<sp/>flags,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tmp)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api.PyArray_SetBaseObject_(tmp.ptr(),<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>.inc_ref().ptr());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>reinterpret_steal&lt;object&gt;(api.PyArray_NewCopy_(tmp.ptr(),<sp/>-1<sp/></highlight><highlight class="comment">/*<sp/>any<sp/>order<sp/>*/</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>tmp.release().ptr();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classpybind11_1_1array_1a100ac01194d9e1f8fa8e429a68ca1ff1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array_1a100ac01194d9e1f8fa8e429a68ca1ff1" kindref="member">array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/>&amp;dt,<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(dt,<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(shape),<sp/>{},<sp/>ptr,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>detail::enable_if_t&lt;std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;bool,<sp/>T&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="570" refid="classpybind11_1_1array_1a58419b2fe82f698eef80dbb632c99a0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array_1a58419b2fe82f698eef80dbb632c99a0e" kindref="member">array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/>&amp;dt,<sp/>T<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(dt,<sp/>{{count}},<sp/>ptr,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="574" refid="classpybind11_1_1array_1a1df48786687418251b7dd029c03b06d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array_1a1df48786687418251b7dd029c03b06d3" kindref="member">array</ref>(<ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>shape,<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">StridesContainer</ref><sp/>strides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>::<ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref>::of&lt;T&gt;(),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(shape),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(strides),<sp/>ptr,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="578" refid="classpybind11_1_1array_1ac42023abe1ecb65e89de6eff7e14e91d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array_1ac42023abe1ecb65e89de6eff7e14e91d" kindref="member">array</ref>(<ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(shape),<sp/>{},<sp/>ptr,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="582" refid="classpybind11_1_1array_1a3dbfc46aac2ceb9758d4d953ac8bdfa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a3dbfc46aac2ceb9758d4d953ac8bdfa8" kindref="member">array</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())<sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>({count},<sp/>{},<sp/>ptr,<sp/>base)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="classpybind11_1_1array_1a1a95b42e29a9e407e81b1da49dcf6c4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a1a95b42e29a9e407e81b1da49dcf6c4e" kindref="member">array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref><sp/>&amp;info)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>::<ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref>(info),<sp/>info.shape,<sp/>info.strides,<sp/>info.ptr)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="classpybind11_1_1array_1a7f0f5c84c5de37740fc6edc943c65b2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/><ref refid="classpybind11_1_1array_1a7f0f5c84c5de37740fc6edc943c65b2b" kindref="member">dtype</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;pybind11::dtype&gt;(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;descr);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="classpybind11_1_1array_1afca19b0c0896314a48ba4bd1d8015924" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1afca19b0c0896314a48ba4bd1d8015924" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(shape(),<sp/>shape()<sp/>+<sp/>ndim(),<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>1,<sp/>std::multiplies&lt;ssize_t&gt;());</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="598" refid="classpybind11_1_1array_1a10340a5561983400712a61483f9f478f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a10340a5561983400712a61483f9f478f" kindref="member">itemsize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aff8722b8198a1bdea085c33cadfb48cf" kindref="member">detail::array_descriptor_proxy</ref>(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;descr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array_descr___proxy_1a8dffffbe8cb1643e4f037e83c0ef0b59" kindref="member">elsize</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="classpybind11_1_1array_1a38c15f5e8b761232e1ba84aca95ae18c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a38c15f5e8b761232e1ba84aca95ae18c" kindref="member">nbytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size()<sp/>*<sp/>itemsize();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="classpybind11_1_1array_1a1f347b49d01c2f35ad5fadc7e620d8ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a1f347b49d01c2f35ad5fadc7e620d8ad" kindref="member">ndim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ac4bba6c1bcfd70141928cdf1aeca08bd" kindref="member">nd</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="classpybind11_1_1array_1a246d06d1ca129a526b7c5efdeee48652" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a246d06d1ca129a526b7c5efdeee48652" kindref="member">base</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;object&gt;(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1base" kindref="compound">base</ref>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>*<sp/><ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ac03f52a6a575e99e080848ac77806ee6" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="classpybind11_1_1array_1ac7bb2da511133347b3a1b5deaf3686dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1ac7bb2da511133347b3a1b5deaf3686dd" kindref="member">shape</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>dim)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&gt;=<sp/>ndim())</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_dim_check(dim,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>axis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape()[dim];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>*<sp/><ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1a4b6303bd9654e034b147345e81714dd6" kindref="member">strides</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="635" refid="classpybind11_1_1array_1a78085e31576480cc5d1d303ab17f9eef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a78085e31576480cc5d1d303ab17f9eef" kindref="member">strides</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>dim)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&gt;=<sp/>ndim())</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_dim_check(dim,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>axis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides()[dim];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="classpybind11_1_1array_1a6f4666d560c848144be4761ee630d957" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a6f4666d560c848144be4761ee630d957" kindref="member">flags</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ab2f1675a90ae59d15889dae88ff40e63" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="classpybind11_1_1array_1a3e0d57570e47aa5e1637b3d7f872197a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a3e0d57570e47aa5e1637b3d7f872197a" kindref="member">writeable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aaf5f6d49cca947d586e940fb0ea8ecd8" kindref="member">detail::check_flags</ref>(m_ptr,<sp/>detail::npy_api::NPY_ARRAY_WRITEABLE_);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="classpybind11_1_1array_1a803f1928e8d7ccf259c28797461a2880" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a803f1928e8d7ccf259c28797461a2880" kindref="member">owndata</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aaf5f6d49cca947d586e940fb0ea8ecd8" kindref="member">detail::check_flags</ref>(m_ptr,<sp/>detail::npy_api::NPY_ARRAY_OWNDATA_);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" kindref="member">data</ref>(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1aa2f67ce20f96af93ec0f6cf3642ad172" kindref="member">data</ref><sp/>+<sp/>offset_at(index...));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="classpybind11_1_1array_1ac07e441b9918ff66a74537bc0bb39f40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classpybind11_1_1array_1ac07e441b9918ff66a74537bc0bb39f40" kindref="member">mutable_data</ref>(Ix...<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_writeable();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(m_ptr)-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1aa2f67ce20f96af93ec0f6cf3642ad172" kindref="member">data</ref><sp/>+<sp/>offset_at(index...));</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="672" refid="classpybind11_1_1array_1a8856b8f237145987a62c19e61c9c26ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a8856b8f237145987a62c19e61c9c26ba" kindref="member">offset_at</ref>(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(index)<sp/>&gt;<sp/>ndim())</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_dim_check(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(index),<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>indices<sp/>for<sp/>an<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_offset(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(index)...);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="classpybind11_1_1array_1a94678462afc88cbb99a8b04dbf1127bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a94678462afc88cbb99a8b04dbf1127bc" kindref="member">offset_at</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="682" refid="classpybind11_1_1array_1a726f25422313b8cc0e57a5604813ffc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1a726f25422313b8cc0e57a5604813ffc5" kindref="member">index_at</ref>(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset_at(index...)<sp/>/<sp/>itemsize();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="classpybind11_1_1array_1a1fddd41f99198ff3b1a4f8b6b11df693" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>Dims<sp/>=<sp/>-1&gt;<sp/><ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" kindref="compound">detail::unchecked_mutable_reference&lt;T, Dims&gt;</ref><sp/><ref refid="classpybind11_1_1array_1a1fddd41f99198ff3b1a4f8b6b11df693" kindref="member">mutable_unchecked</ref>()<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dims<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>ndim()<sp/>!=<sp/>Dims)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;array<sp/>has<sp/>incorrect<sp/>number<sp/>of<sp/>dimensions:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(ndim())<sp/>+</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;;<sp/>expected<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(Dims));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" kindref="compound">detail::unchecked_mutable_reference&lt;T, Dims&gt;</ref>(mutable_data(),<sp/>shape(),<sp/>strides(),<sp/>ndim());</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="706" refid="classpybind11_1_1array_1a95704d8136f515bbac57fe0e32560787" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>Dims<sp/>=<sp/>-1&gt;<sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">detail::unchecked_reference&lt;T, Dims&gt;</ref><sp/><ref refid="classpybind11_1_1array_1a95704d8136f515bbac57fe0e32560787" kindref="member">unchecked</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dims<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>ndim()<sp/>!=<sp/>Dims)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;array<sp/>has<sp/>incorrect<sp/>number<sp/>of<sp/>dimensions:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(ndim())<sp/>+</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;;<sp/>expected<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(Dims));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">detail::unchecked_reference&lt;T, Dims&gt;</ref>(data(),<sp/>shape(),<sp/>strides(),<sp/>ndim());</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="classpybind11_1_1array_1ac25411005216cb5f14b7aff7c68ef111" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/><ref refid="classpybind11_1_1array_1ac25411005216cb5f14b7aff7c68ef111" kindref="member">squeeze</ref>()<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>api<sp/>=<sp/>detail::npy_api::get();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;array&gt;(api.PyArray_Squeeze_(m_ptr));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="classpybind11_1_1array_1a33b1bd4c889fbaf108fa0352be379ef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a33b1bd4c889fbaf108fa0352be379ef1" kindref="member">resize</ref>(<ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>new_shape,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>refcheck<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1npy__api_1_1_py_array___dims" kindref="compound">detail::npy_api::PyArray_Dims</ref><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_shape-&gt;data(),<sp/>int(new_shape-&gt;size())</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>resize,<sp/>set<sp/>ordering<sp/>param<sp/>to<sp/>-1<sp/>cause<sp/>it&apos;s<sp/>not<sp/>used<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>new_array<sp/>=<sp/>reinterpret_steal&lt;object&gt;(</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::npy_api::get().PyArray_Resize_(m_ptr,<sp/>&amp;<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(refcheck),<sp/>-1)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!new_array)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isinstance&lt;array&gt;(new_array))<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::move(new_array);<sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="classpybind11_1_1array_1a816d966ca405344a5b2b60a2630154c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/><ref refid="classpybind11_1_1array_1a816d966ca405344a5b2b60a2630154c8" kindref="member">ensure</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExtraFlags<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>reinterpret_steal&lt;array&gt;(raw_array(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>ExtraFlags));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="744" refid="classpybind11_1_1array_1a2d7124af4924ef006d3b7bfd42b05085" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">detail::npy_format_descriptor</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="classpybind11_1_1array_1a0101c3b28ac7ad0900c4f69882343f97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a0101c3b28ac7ad0900c4f69882343f97" kindref="member">fail_dim_check</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>msg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1index__error" kindref="compound">index_error</ref>(msg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(dim)<sp/>+</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(ndim<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(ndim())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="classpybind11_1_1array_1aa7f2aa4ebce00e7130e119960055b55b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1array_1aa7f2aa4ebce00e7130e119960055b55b" kindref="member">byte_offset</ref>(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_dimensions(index...);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a442f46b08dff572e6eccf4e0c904ffe8" kindref="member">detail::byte_offset_unsafe</ref>(strides(),<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(index)...);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="classpybind11_1_1array_1aa5c88e5779838efe8829c8bb7bc96509" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1aa5c88e5779838efe8829c8bb7bc96509" kindref="member">check_writeable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!writeable())</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;array<sp/>is<sp/>not<sp/>writeable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default,<sp/>C-style<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="classpybind11_1_1array_1aa361b6020a1c147f62d3ffab1082cfd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;ssize_t&gt;<sp/><ref refid="classpybind11_1_1array_1aa361b6020a1c147f62d3ffab1082cfd9" kindref="member">c_strides</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ssize_t&gt;<sp/>&amp;shape,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>itemsize)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>shape.size();</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ssize_t&gt;<sp/>strides(ndim,<sp/>itemsize);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>ndim<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides[i<sp/>-<sp/>1]<sp/>=<sp/>strides[i]<sp/>*<sp/>shape[i];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F-style<sp/>strides;<sp/>default<sp/>when<sp/>constructing<sp/>an<sp/>array_t<sp/>with<sp/>`ExtraFlags<sp/>&amp;<sp/>f_style`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="classpybind11_1_1array_1a7eb28e9f937babc09e85124c080ec3d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;ssize_t&gt;<sp/><ref refid="classpybind11_1_1array_1a7eb28e9f937babc09e85124c080ec3d0" kindref="member">f_strides</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ssize_t&gt;<sp/>&amp;shape,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>itemsize)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>shape.size();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ssize_t&gt;<sp/>strides(ndim,<sp/>itemsize);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides[i]<sp/>=<sp/>strides[i<sp/>-<sp/>1]<sp/>*<sp/>shape[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="classpybind11_1_1array_1ae2219067fcf2c35d05bb83fd997ac8e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1ae2219067fcf2c35d05bb83fd997ac8e2" kindref="member">check_dimensions</ref>(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_dimensions_impl(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(0),<sp/>shape(),<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(index)...);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="classpybind11_1_1array_1a8d15f04f8b31149ed7e13c88e8cfbfcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1a8d15f04f8b31149ed7e13c88e8cfbfcd" kindref="member">check_dimensions_impl</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="classpybind11_1_1array_1aea4957e16ef5e288ffa8e5d87c1381fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array_1aea4957e16ef5e288ffa8e5d87c1381fb" kindref="member">check_dimensions_impl</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>axis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>*<sp/>shape,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>i,<sp/>Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>*shape)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1index__error" kindref="compound">index_error</ref>(std::string(</highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(i)<sp/>+</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>bounds<sp/>for<sp/>axis<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(axis)<sp/>+</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(*shape));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_dimensions_impl(axis<sp/>+<sp/>1,<sp/>shape<sp/>+<sp/>1,<sp/>index...);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="classpybind11_1_1array_1a8c106da762d14abf1b52f8eefb6cd41e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*<ref refid="classpybind11_1_1array_1a8c106da762d14abf1b52f8eefb6cd41e" kindref="member">raw_array</ref>(PyObject<sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExtraFlags<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ValueError,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>a<sp/>pybind11::array<sp/>from<sp/>a<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::npy_api::get().PyArray_FromAny_(</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>detail::npy_api::NPY_ARRAY_ENSUREARRAY_<sp/>|<sp/>ExtraFlags,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal">};</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="classpybind11_1_1array__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExtraFlags<sp/>=<sp/>array::forcecast&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">private_ctor<sp/>{};</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegating<sp/>constructor<sp/>needed<sp/>when<sp/>both<sp/>moving<sp/>and<sp/>accessing<sp/>in<sp/>the<sp/>same<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref>(private_ctor,<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">ShapeContainer</ref><sp/>&amp;&amp;shape,<sp/><ref refid="classpybind11_1_1detail_1_1any__container" kindref="compound">StridesContainer</ref><sp/>&amp;&amp;strides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>)</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(std::move(shape),<sp/>std::move(strides),<sp/>ptr,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!<ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">detail::array_info&lt;T&gt;::is_array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>types<sp/>cannot<sp/>be<sp/>used<sp/>with<sp/>array_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="classpybind11_1_1array__t_1a6c77d7dff7e7d7dad9abe386501ef71c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array__t_1a6c77d7dff7e7d7dad9abe386501ef71c" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816" refid="classpybind11_1_1array__t_1a7fdde7a7a65033109c13ca3b1de21a23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t_1a7fdde7a7a65033109c13ca3b1de21a23" kindref="member">array_t</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(0,<sp/>static_cast&lt;const<sp/>T<sp/>*&gt;(nullptr))<sp/>{}</highlight></codeline>
<codeline lineno="817" refid="classpybind11_1_1array__t_1a315767aec0a6dae58f26e98ffe26ce11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t_1a315767aec0a6dae58f26e98ffe26ce11" kindref="member">array_t</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref>)<sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(h,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref>{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="818" refid="classpybind11_1_1array__t_1af1dd78cbffa1d4a44e1fa4e488722e35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t_1af1dd78cbffa1d4a44e1fa4e488722e35" kindref="member">array_t</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>)<sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(h,<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="classpybind11_1_1array__t_1abc1806f2a7b8ab70eff4df4cd5ba9912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>array_t&lt;T&gt;::ensure()<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="821" refid="classpybind11_1_1array__t_1ada2bd1484b0567c0f39786937fdb605f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_borrowed)<sp/>:<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>(raw_array_t(h.ptr()),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_borrowed)<sp/>Py_XDECREF(h.ptr());</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>array_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;o)<sp/>:<sp/>array(raw_array_t(o.ptr()),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>error_already_set();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>array_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buffer_info&amp;<sp/>info)<sp/>:<sp/>array(info)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>array_t(ShapeContainer<sp/>shape,<sp/>StridesContainer<sp/>strides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>base<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array(<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(shape),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(strides),<sp/>ptr,<sp/>base)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>array_t(ShapeContainer<sp/>shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>base<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array_t(private_ctor{},<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(shape),</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtraFlags<sp/>&amp;<sp/>f_style<sp/>?<sp/>f_strides(*shape,<sp/>itemsize())<sp/>:<sp/>c_strides(*shape,<sp/>itemsize()),</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,<sp/>base)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>array_t(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>base<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array({count},<sp/>{},<sp/>ptr,<sp/>base)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>itemsize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>index_at(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset_at(index...)<sp/>/<sp/>itemsize();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>data(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(array::data(index...));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/>T*<sp/>mutable_data(Ix...<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(array::mutable_data(index...));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reference<sp/>to<sp/>element<sp/>at<sp/>a<sp/>given<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>at(Ix...<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(index)<sp/>!=<sp/>ndim())</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_dim_check(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(index),<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>dimension<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(array::data())<sp/>+<sp/>byte_offset(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(index)...)<sp/>/<sp/>itemsize());</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutable<sp/>reference<sp/>to<sp/>element<sp/>at<sp/>a<sp/>given<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ix&gt;<sp/>T&amp;<sp/>mutable_at(Ix...<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(index)<sp/>!=<sp/>ndim())</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_dim_check(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(index),<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>dimension<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(array::mutable_data())<sp/>+<sp/>byte_offset(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(index)...)<sp/>/<sp/>itemsize());</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="879" refid="classpybind11_1_1array__t_1a79e7401fb58571eedd104afd30dc334f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>Dims<sp/>=<sp/>-1&gt;<sp/><ref refid="classpybind11_1_1detail_1_1unchecked__mutable__reference" kindref="compound">detail::unchecked_mutable_reference&lt;T, Dims&gt;</ref><sp/><ref refid="classpybind11_1_1array__t_1a79e7401fb58571eedd104afd30dc334f" kindref="member">mutable_unchecked</ref>()<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array::mutable_unchecked&lt;T,<sp/>Dims&gt;();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="classpybind11_1_1array__t_1a685c7851285c37b2d6f669cbf7df3eed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>Dims<sp/>=<sp/>-1&gt;<sp/><ref refid="classpybind11_1_1detail_1_1unchecked__reference" kindref="compound">detail::unchecked_reference&lt;T, Dims&gt;</ref><sp/><ref refid="classpybind11_1_1array__t_1a685c7851285c37b2d6f669cbf7df3eed" kindref="member">unchecked</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array::unchecked&lt;T,<sp/>Dims&gt;();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="classpybind11_1_1array__t_1a797040d736c5ac32ecd3210c1ee0d2da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref><sp/><ref refid="classpybind11_1_1array__t_1a797040d736c5ac32ecd3210c1ee0d2da" kindref="member">ensure</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>reinterpret_steal&lt;array_t&gt;(raw_array_t(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903" refid="classpybind11_1_1array__t_1aa4dbec7371a6004f03970f7e43dd5b49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array__t_1aa4dbec7371a6004f03970f7e43dd5b49" kindref="member">check_</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;api<sp/>=<sp/>detail::npy_api::get();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api.PyArray_Check_(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>api.PyArray_EquivTypes_(<ref refid="namespacepybind11_1_1detail_1a3badde8a29569aa87fa299ea0b977518" kindref="member">detail::array_proxy</ref>(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1a4badff6a8059055f4002ef9959cb7106" kindref="member">descr</ref>,<sp/>dtype::of&lt;T&gt;().ptr());</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="911" refid="classpybind11_1_1array__t_1ae2761c4d634a2c31c19d9c221e069c0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*<ref refid="classpybind11_1_1array__t_1ae2761c4d634a2c31c19d9c221e069c0a" kindref="member">raw_array_t</ref>(PyObject<sp/>*ptr)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ValueError,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>a<sp/>pybind11::array_t<sp/>from<sp/>a<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::npy_api::get().PyArray_FromAny_(</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,<sp/>dtype::of&lt;T&gt;().release().ptr(),<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::npy_api::NPY_ARRAY_ENSUREARRAY_<sp/>|<sp/>ExtraFlags,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal">};</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="923" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1is__pod__2541c7600b5fc9094049e2495342ba9e" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;T,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;detail::is_pod_struct&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="924" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1is__pod__2541c7600b5fc9094049e2495342ba9e_1a0920e33e7d9bc307034cdb9ddc0d50b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1is__pod__2541c7600b5fc9094049e2495342ba9e_1a0920e33e7d9bc307034cdb9ddc0d50b7" kindref="member">format</ref>()<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">detail::npy_format_descriptor&lt;typename std::remove_cv&lt;T&gt;::type</ref>&gt;::format();</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal">};</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929" refid="structpybind11_1_1format__descriptor_3_01char_0f_n_0e_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;char[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="930" refid="structpybind11_1_1format__descriptor_3_01char_0f_n_0e_4_1a52e25d7fcc5cbb9320c760f5e00440e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01char_0f_n_0e_4_1a52e25d7fcc5cbb9320c760f5e00440e9" kindref="member">format</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(N)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal">};</highlight></codeline>
<codeline lineno="932" refid="structpybind11_1_1format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1array" kindref="compound">array</ref>&lt;char,<sp/>N&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="933" refid="structpybind11_1_1format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4_1a038418a745bff57c461155e1682d8895" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4_1a038418a745bff57c461155e1682d8895" kindref="member">format</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(N)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal">};</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="937" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;T,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;std::is_enum&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="938" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4_1a828bfe16901f2b3c58e80ab91b774adc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4_1a828bfe16901f2b3c58e80ab91b774adc" kindref="member">format</ref>()<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::remove_cv&lt;typename std::underlying_type&lt;T&gt;::type</ref>&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>&gt;::format();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal">};</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="945" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1array__indf15e44072e0df87924bd69ebdc6a173" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;T,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;detail::array_info&lt;T&gt;::is_array&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="946" refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1array__indf15e44072e0df87924bd69ebdc6a173_1a78830690c6797d68bfa7a3e94b0a1326" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01_t_00_01detail_1_1enable__if__t_3_01detail_1_1array__indf15e44072e0df87924bd69ebdc6a173_1a78830690c6797d68bfa7a3e94b0a1326" kindref="member">format</ref>()<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">detail::_</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/>extents<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">detail::array_info&lt;T&gt;::extents</ref>()<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extents.text()<sp/>+<sp/><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor&lt;detail::remove_all_extents_t&lt;T&gt;</ref>&gt;::format();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal">};</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExtraFlags&gt;</highlight></codeline>
<codeline lineno="955" refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1pyobject__caster" kindref="compound">pyobject_caster</ref>&lt;<ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref>&lt;T,<sp/>ExtraFlags&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="956" refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4_1a1fdb22210d281c37c71f03b6bd4a1bea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">type</ref><sp/>=<sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t&lt;T, ExtraFlags&gt;</ref>;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958" refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4_1a802304291a18c44b36c251ea9bcb4b16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4_1a802304291a18c44b36c251ea9bcb4b16" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert<sp/>&amp;&amp;<sp/>!type::check_(src))</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>type::ensure(src);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965" refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4_1a359e2d629db99b55a49aed5d197a4b93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4_1a359e2d629db99b55a49aed5d197a4b93" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>();</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968" refid="structpybind11_1_1detail_1_1pyobject__caster_3_01array__t_3_01_t_00_01_extra_flags_01_4_01_4_1a4368e01b14f7cd1b2c622865b67b1594" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(<ref refid="classpybind11_1_1array__t" kindref="compound">type</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name&lt;type&gt;::name</ref>());</highlight></codeline>
<codeline lineno="969"><highlight class="normal">};</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="972" refid="structpybind11_1_1detail_1_1compare__buffer__info_3_01_t_00_01detail_1_1enable__if__t_3_01detailc2a3113b5c72d60380b4bdbe72e7f95e" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1compare__buffer__info" kindref="compound">compare_buffer_info</ref>&lt;T,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;detail::is_pod_struct&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="973" refid="structpybind11_1_1detail_1_1compare__buffer__info_3_01_t_00_01detail_1_1enable__if__t_3_01detailc2a3113b5c72d60380b4bdbe72e7f95e_1a8e7e470f16d854d3609de738c541629c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1compare__buffer__info_3_01_t_00_01detail_1_1enable__if__t_3_01detailc2a3113b5c72d60380b4bdbe72e7f95e_1a8e7e470f16d854d3609de738c541629c" kindref="member">compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>npy_api::get().PyArray_EquivTypes_(dtype::of&lt;T&gt;().ptr(),<sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref>(b).ptr());</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal">};</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_any_of</ref>&lt;T,<sp/><ref refid="namespacestd" kindref="compound">std</ref>::is_arithmetic,<sp/><ref refid="structpybind11_1_1detail_1_1is__complex" kindref="compound">is_complex</ref>&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>the<sp/>order<sp/>here<sp/>must<sp/>match<sp/>the<sp/>one<sp/>in<sp/>common.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[15]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_api::NPY_BOOL_,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_api::NPY_BYTE_,<sp/><sp/><sp/>npy_api::NPY_UBYTE_,<sp/><sp/><sp/>npy_api::NPY_SHORT_,<sp/><sp/><sp/><sp/>npy_api::NPY_USHORT_,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_api::NPY_INT_,<sp/><sp/><sp/><sp/>npy_api::NPY_UINT_,<sp/><sp/><sp/><sp/>npy_api::NPY_LONGLONG_,<sp/>npy_api::NPY_ULONGLONG_,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_api::NPY_FLOAT_,<sp/><sp/>npy_api::NPY_DOUBLE_,<sp/><sp/>npy_api::NPY_LONGDOUBLE_,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_api::NPY_CFLOAT_,<sp/>npy_api::NPY_CDOUBLE_,<sp/>npy_api::NPY_CLONGDOUBLE_</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="990" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1aedd362231189df43e2006c157bdb926e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>values[<ref refid="structpybind11_1_1detail_1_1is__fmt__numeric" kindref="compound">detail::is_fmt_numeric&lt;T&gt;::index</ref>];</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a82de9b73e60ba21664c72384fd2a327c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a82de9b73e60ba21664c72384fd2a327c" kindref="member">dtype</ref>()<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>npy_api::get().PyArray_DescrFromType_(value))</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;pybind11::dtype&gt;(ptr);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>buffer<sp/>format!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T2<sp/>=<sp/>T,<sp/>enable_if_t&lt;std::is_integral&lt;T2&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="998" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a0db72c270c0f006f05a64e8a8b9abcfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a0db72c270c0f006f05a64e8a8b9abcfd" kindref="member">name</ref>()<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_&lt;std::is_same&lt;T,<sp/>bool&gt;::value&gt;(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_&lt;std::is_signed&lt;T&gt;::value&gt;(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;uint&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)*8&gt;());</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T2<sp/>=<sp/>T,<sp/>enable_if_t&lt;std::is_floating_point&lt;T2&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1003" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a0db72c270c0f006f05a64e8a8b9abcfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a0db72c270c0f006f05a64e8a8b9abcfd" kindref="member">name</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_&lt;std::is_same&lt;T,<sp/>float&gt;::value<sp/>||<sp/>std::is_same&lt;T,<sp/>double&gt;::value&gt;(</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">)<sp/>+<sp/>_&lt;sizeof(T)*8&gt;(),<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;longdouble&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T2<sp/>=<sp/>T,<sp/>enable_if_t&lt;is_complex&lt;T2&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1008" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a0db72c270c0f006f05a64e8a8b9abcfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01satisfies__any2d0d04460b817c6c3b2ee9b20dffcc39_1a0db72c270c0f006f05a64e8a8b9abcfd" kindref="member">name</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_&lt;std::is_same&lt;typename<sp/>T2::value_type,<sp/>float&gt;::value<sp/>||<sp/>std::is_same&lt;typename<sp/>T2::value_type,<sp/>double&gt;::value&gt;(</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">)<sp/>+<sp/>_&lt;sizeof(typename<sp/>T2::value_type)*16&gt;(),<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;longcomplex&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014" refid="numpy_8h_1a5d648509b51165aa56ed64b224aecb05" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_DECL_CHAR_FMT<sp/>\</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PYBIND11_DESCR<sp/>name()<sp/>{<sp/>return<sp/>_(&quot;S&quot;</highlight><highlight class="normal">)<sp/>+<sp/>_&lt;N&gt;();<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>pybind11::dtype<sp/>dtype()<sp/>{<sp/>return<sp/>pybind11::dtype(std::string(&quot;S&quot;)<sp/>+<sp/>std::to_string(N));<sp/>}</highlight></codeline>
<codeline lineno="1017" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01char_0f_n_0e_4_1ae78be98c34dd8de64751c34fa71701d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor</ref>&lt;char[N]&gt;<sp/>{<sp/><ref refid="numpy_8h_1a5d648509b51165aa56ed64b224aecb05" kindref="member">PYBIND11_DECL_CHAR_FMT</ref><sp/>};</highlight></codeline>
<codeline lineno="1018" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01std_1_1array_3_01char_00_01_n_01_4_01_4_1a89eca3f4a8b5e6f2f8a957923ebba21e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1array" kindref="compound">array</ref>&lt;char,<sp/>N&gt;&gt;<sp/>{<sp/><ref refid="numpy_8h_1a5d648509b51165aa56ed64b224aecb05" kindref="member">PYBIND11_DECL_CHAR_FMT</ref><sp/>};</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PYBIND11_DECL_CHAR_FMT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info</ref>&lt;T&gt;::is_array&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">base_descr</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor&lt;typename array_info&lt;T&gt;::type</ref>&gt;;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!<ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info&lt;T&gt;::is_empty</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Zero-sized<sp/>arrays<sp/>are<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e_1aecff151ebde06162835789ae87a09c96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e_1aecff151ebde06162835789ae87a09c96" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info&lt;T&gt;::extents</ref>()<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">base_descr::name</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1028" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e_1a6f394c2194d94ae54c23521c76732b55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01array__info_3_666238b354ea8e03d369c164ec43594e_1a6f394c2194d94ae54c23521c76732b55" kindref="member">dtype</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>shape;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1array__info" kindref="compound">array_info&lt;T&gt;::append_extents</ref>(shape);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype_1a742c7f76781541777fbd34c0ad4e8f8f" kindref="member">pybind11::dtype::from_args</ref>(<ref refid="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" kindref="member">pybind11::make_tuple</ref>(base_descr::dtype(),<sp/>shape));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_enum&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">base_descr</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor&lt;typename std::underlying_type&lt;T&gt;::type</ref>&gt;;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1039" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0_1afec9367ac9d67cca8e42cd2318ce9a8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0_1afec9367ac9d67cca8e42cd2318ce9a8d" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">base_descr::name</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1040" refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0_1a96f4eada7cc209c9eb30445526c11677" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_3_01_t_00_01enable__if__t_3_01std_1_1is__enu6797d74862325e780dd78364c5e99bf0_1a96f4eada7cc209c9eb30445526c11677" kindref="member">dtype</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_descr::dtype();<sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043" refid="structpybind11_1_1detail_1_1field__descriptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1field__descriptor" kindref="compound">field_descriptor</ref><sp/>{</highlight></codeline>
<codeline lineno="1044" refid="structpybind11_1_1detail_1_1field__descriptor_1a9ddee5db8406f405f4152b5078da15a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1field__descriptor_1a9ddee5db8406f405f4152b5078da15a2" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1045" refid="structpybind11_1_1detail_1_1field__descriptor_1a487c2e82a82e429f52a0242d9f2abdaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="structpybind11_1_1detail_1_1field__descriptor_1a487c2e82a82e429f52a0242d9f2abdaf" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="1046" refid="structpybind11_1_1detail_1_1field__descriptor_1a8759b1ed85bb58fc563bd9329093a5ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="structpybind11_1_1detail_1_1field__descriptor_1a8759b1ed85bb58fc563bd9329093a5ea" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="1047" refid="structpybind11_1_1detail_1_1field__descriptor_1ac445661c8490d3dec10604db5083a630" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structpybind11_1_1detail_1_1field__descriptor_1ac445661c8490d3dec10604db5083a630" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="1048" refid="structpybind11_1_1detail_1_1field__descriptor_1af57f6ac34b8fe4d0513e4a3e0a3cb023" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">dtype</ref><sp/><ref refid="structpybind11_1_1detail_1_1field__descriptor_1af57f6ac34b8fe4d0513e4a3e0a3cb023" kindref="member">descr</ref>;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>register_structured_dtype(</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;field_descriptor&gt;&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>tinfo,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>itemsize,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*direct_converter)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;))<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="structpybind11_1_1detail_1_1numpy__internals" kindref="compound">numpy_internals</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ad6e98161dfb25894460f7377e5d5744b" kindref="member">get_numpy_internals</ref>();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpybind11_1_1detail_1_1numpy__internals" kindref="compound">numpy_internals</ref>.<ref refid="structpybind11_1_1detail_1_1numpy__internals_1add5ec5f7aa60d121f100cc50ec978575" kindref="member">get_type_info</ref>(tinfo,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;NumPy:<sp/>dtype<sp/>is<sp/>already<sp/>registered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>names,<sp/>formats,<sp/>offsets;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>:<sp/>fields)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!field.descr)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(std::string(</highlight><highlight class="stringliteral">&quot;NumPy:<sp/>unsupported<sp/>field<sp/>dtype:<sp/>`&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field.name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;`<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>tinfo.name());</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.append(<ref refid="common_8h_1a2b41a4f15526b8c6346dc68f9998d0e7" kindref="member">PYBIND11_STR_TYPE</ref>(field.name));</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formats.append(field.descr);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets.append(<ref refid="classpybind11_1_1int__" kindref="compound">pybind11::int_</ref>(field.offset));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dtype_ptr<sp/>=<sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref>(names,<sp/>formats,<sp/>offsets,<sp/>itemsize).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>an<sp/>existing<sp/>bug<sp/>in<sp/>NumPy<sp/>(as<sp/>of<sp/>v1.11):<sp/>trailing<sp/>bytes<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>encoded<sp/>explicitly<sp/>into<sp/>the<sp/>format<sp/>string.<sp/>This<sp/>will<sp/>supposedly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>fixed<sp/>in<sp/>v1.12;<sp/>for<sp/>further<sp/>details,<sp/>see<sp/>these:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>https://github.com/numpy/numpy/issues/7797</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>https://github.com/numpy/numpy/pull/7798</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Because<sp/>of<sp/>this,<sp/>we<sp/>won&apos;t<sp/>use<sp/>numpy&apos;s<sp/>logic<sp/>to<sp/>generate<sp/>buffer<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strings<sp/>and<sp/>will<sp/>just<sp/>do<sp/>it<sp/>ourselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;field_descriptor&gt;<sp/>ordered_fields(fields);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(ordered_fields.begin(),<sp/>ordered_fields.end(),</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>field_descriptor<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>field_descriptor<sp/>&amp;b)<sp/>{<sp/>return<sp/>a.offset<sp/>&lt;<sp/>b.offset;<sp/>});</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>the<sp/>structure<sp/>as<sp/>unaligned<sp/>with<sp/>&apos;^&apos;,<sp/>because<sp/>numpy<sp/>and<sp/>C++<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>agree<sp/>about<sp/>alignment<sp/>(particularly<sp/>for<sp/>complex),<sp/>and<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>listing<sp/>all<sp/>our<sp/>padding.<sp/>This<sp/>depends<sp/>on<sp/>none<sp/>of<sp/>the<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overriding<sp/>the<sp/>endianness.<sp/>Putting<sp/>the<sp/>^<sp/>in<sp/>front<sp/>of<sp/>individual<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>guaranteed<sp/>to<sp/>work<sp/>due<sp/>to<sp/>https://github.com/numpy/numpy/issues/9049</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;^T{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>field<sp/>:<sp/>ordered_fields)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(field.offset<sp/>&gt;<sp/>offset)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>(field.offset<sp/>-<sp/>offset)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>field.format<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>field.name<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>field.offset<sp/>+<sp/>field.size;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemsize<sp/>&gt;<sp/>offset)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>(itemsize<sp/>-<sp/>offset)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_str<sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check:<sp/>verify<sp/>that<sp/>NumPy<sp/>properly<sp/>parses<sp/>our<sp/>buffer<sp/>format<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>api<sp/>=<sp/>npy_api::get();</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arr<sp/>=<sp/><sp/>array(buffer_info(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>itemsize,<sp/>format_str,<sp/>1));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!api.PyArray_EquivTypes_(dtype_ptr,<sp/>arr.dtype().ptr()))</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;NumPy:<sp/>invalid<sp/>buffer<sp/>descriptor!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tindex<sp/>=<sp/>std::type_index(tinfo);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>numpy_internals.registered_dtypes[tindex]<sp/>=<sp/>{<sp/>dtype_ptr,<sp/>format_str<sp/>};</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1aff8f17a57c8c8bc398a7bc14e0c1199d" kindref="member">direct_conversions</ref>[tindex].push_back(direct_converter);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111" refid="structpybind11_1_1detail_1_1npy__format__descriptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor</ref><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(<ref refid="namespacepybind11_1_1detail_1a1a4721eca1b368180b3bf47a59279a07" kindref="member">is_pod_struct&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>use<sp/>a<sp/>non-POD<sp/>or<sp/>unimplemented<sp/>POD<sp/>type<sp/>as<sp/>a<sp/>numpy<sp/>dtype&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114" refid="structpybind11_1_1detail_1_1npy__format__descriptor_1a467ecd9646d151731fb8c43718c9a6c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_1a467ecd9646d151731fb8c43718c9a6c0" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">make_caster&lt;T&gt;::name</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116" refid="structpybind11_1_1detail_1_1npy__format__descriptor_1ae5e87e6c9140f186cc16295d71929e2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dtype" kindref="compound">pybind11::dtype</ref><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_1ae5e87e6c9140f186cc16295d71929e2f" kindref="member">dtype</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;pybind11::dtype&gt;(dtype_ptr());</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="structpybind11_1_1detail_1_1npy__format__descriptor_1a7b2177563a5ae2e2bf1aa711ba6ca0a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_1a7b2177563a5ae2e2bf1aa711ba6ca0a2" kindref="member">format</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_str<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ad6e98161dfb25894460f7377e5d5744b" kindref="member">get_numpy_internals</ref>().<ref refid="structpybind11_1_1detail_1_1numpy__internals_1add5ec5f7aa60d121f100cc50ec978575" kindref="member">get_type_info</ref>&lt;T&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;format_str;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_str;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125" refid="structpybind11_1_1detail_1_1npy__format__descriptor_1ac82fed0c9a6093bfd137adcc920c8a34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor_1ac82fed0c9a6093bfd137adcc920c8a34" kindref="member">register_dtype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;field_descriptor&gt;&amp;<sp/>fields)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register_structured_dtype(fields,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::remove_cv&lt;T&gt;::type</ref>),</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>&amp;direct_converter);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>dtype_ptr()<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>ptr<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ad6e98161dfb25894460f7377e5d5744b" kindref="member">get_numpy_internals</ref>().<ref refid="structpybind11_1_1detail_1_1numpy__internals_1add5ec5f7aa60d121f100cc50ec978575" kindref="member">get_type_info</ref>&lt;T&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;dtype_ptr;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>direct_converter(PyObject<sp/>*obj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>api<sp/>=<sp/>npy_api::get();</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyObject_TypeCheck(obj,<sp/>api.PyVoidArrType_Type_))</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>descr<sp/>=<sp/>reinterpret_steal&lt;object&gt;(api.PyArray_DescrFromScalar_(obj)))<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(api.PyArray_EquivTypes_(dtype_ptr(),<sp/>descr.ptr()))<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>((PyVoidScalarObject_Proxy<sp/>*)<sp/>obj)-&gt;obval;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CLION_IDE__<sp/></highlight><highlight class="comment">//<sp/>replace<sp/>heavy<sp/>macro<sp/>with<sp/>dummy<sp/>code<sp/>for<sp/>the<sp/>IDE<sp/>(doesn&apos;t<sp/>affect<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>PYBIND11_NUMPY_DTYPE(Type,<sp/>...)<sp/>((void)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>PYBIND11_NUMPY_DTYPE_EX(Type,<sp/>...)<sp/>((void)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155" refid="numpy_8h_1aa52d99114d699c78373a120bbacdb04b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_FIELD_DESCRIPTOR_EX(T,<sp/>Field,<sp/>Name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::pybind11::detail::field_descriptor<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name,<sp/>offsetof(T,<sp/>Field),<sp/>sizeof(decltype(std::declval&lt;T&gt;().Field)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::pybind11::format_descriptor&lt;decltype(std::declval&lt;T&gt;().Field)&gt;::format(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::pybind11::detail::npy_format_descriptor&lt;decltype(std::declval&lt;T&gt;().Field)&gt;::dtype()<sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extract<sp/>name,<sp/>offset<sp/>and<sp/>format<sp/>descriptor<sp/>for<sp/>a<sp/>struct<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163" refid="numpy_8h_1aed753b33fb143320a3eb66bd0554ca66" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_FIELD_DESCRIPTOR(T,<sp/>Field)<sp/>PYBIND11_FIELD_DESCRIPTOR_EX(T,<sp/>Field,<sp/>#Field)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>idea<sp/>of<sp/>this<sp/>macro<sp/>is<sp/>borrowed<sp/>from<sp/>https://github.com/swansontec/map-macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>William<sp/>Swanson,<sp/>Paul<sp/>Fultz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167" refid="numpy_8h_1a9a3ded47231a64627addf93122841eed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EVAL0(...)<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168" refid="numpy_8h_1a2c2557648cbdc9de751b6127b463a475" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EVAL1(...)<sp/>PYBIND11_EVAL0<sp/>(PYBIND11_EVAL0<sp/>(PYBIND11_EVAL0<sp/>(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169" refid="numpy_8h_1a09a3f8ee6675c666b602b03fe38d073b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EVAL2(...)<sp/>PYBIND11_EVAL1<sp/>(PYBIND11_EVAL1<sp/>(PYBIND11_EVAL1<sp/>(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="numpy_8h_1a0ff3ffdb58263125972a650d39bed8c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EVAL3(...)<sp/>PYBIND11_EVAL2<sp/>(PYBIND11_EVAL2<sp/>(PYBIND11_EVAL2<sp/>(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171" refid="numpy_8h_1a2d1251a48706873cc318dca2fc1e175e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EVAL4(...)<sp/>PYBIND11_EVAL3<sp/>(PYBIND11_EVAL3<sp/>(PYBIND11_EVAL3<sp/>(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172" refid="numpy_8h_1a47afd6544b9955cd00aa43f10538dbcb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_EVAL(...)<sp/><sp/>PYBIND11_EVAL4<sp/>(PYBIND11_EVAL4<sp/>(PYBIND11_EVAL4<sp/>(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173" refid="numpy_8h_1a8b5223c102e58706ef0627349f519a99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_END(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174" refid="numpy_8h_1a0122b293b55c71589ed040982f80b2f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_OUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175" refid="numpy_8h_1ab0dfb33f84961be99d9f9a0cfdaf7e89" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_COMMA<sp/>,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176" refid="numpy_8h_1a9a3b5c5764c0f71cbcee0222b4bdd552" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_GET_END()<sp/>0,<sp/>PYBIND11_MAP_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177" refid="numpy_8h_1a999ada17df55e2c39ae98fb6331b4e38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_NEXT0(test,<sp/>next,<sp/>...)<sp/>next<sp/>PYBIND11_MAP_OUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178" refid="numpy_8h_1a00173dc66d819e18792e13a350453f13" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_NEXT1(test,<sp/>next)<sp/>PYBIND11_MAP_NEXT0<sp/>(test,<sp/>next,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179" refid="numpy_8h_1a2e11701c1004255d98d80746fec418a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_NEXT(test,<sp/>next)<sp/><sp/>PYBIND11_MAP_NEXT1<sp/>(PYBIND11_MAP_GET_END<sp/>test,<sp/>next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER<sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>is<sp/>not<sp/>as<sp/>eager<sp/>to<sp/>expand<sp/>macros,<sp/>hence<sp/>this<sp/>workaround</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_LIST_NEXT1(test,<sp/>next)<sp/>\</highlight></codeline>
<codeline lineno="1182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_EVAL0<sp/>(PYBIND11_MAP_NEXT0<sp/>(test,<sp/>PYBIND11_MAP_COMMA<sp/>next,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184" refid="numpy_8h_1ad8993f90eb6daaa72406d12ad857f4f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_LIST_NEXT1(test,<sp/>next)<sp/>\</highlight></codeline>
<codeline lineno="1185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_MAP_NEXT0<sp/>(test,<sp/>PYBIND11_MAP_COMMA<sp/>next,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187" refid="numpy_8h_1ad235bc1be441e4e6b367b5632db2713c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_LIST_NEXT(test,<sp/>next)<sp/>\</highlight></codeline>
<codeline lineno="1188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_MAP_LIST_NEXT1<sp/>(PYBIND11_MAP_GET_END<sp/>test,<sp/>next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="numpy_8h_1a252b823a9cd742afe937bad210f7e1a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_LIST0(f,<sp/>t,<sp/>x,<sp/>peek,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>f(t,<sp/>x)<sp/>PYBIND11_MAP_LIST_NEXT<sp/>(peek,<sp/>PYBIND11_MAP_LIST1)<sp/>(f,<sp/>t,<sp/>peek,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191" refid="numpy_8h_1a9c57ba8f5d6e432d74f28dd3776499b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_LIST1(f,<sp/>t,<sp/>x,<sp/>peek,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>f(t,<sp/>x)<sp/>PYBIND11_MAP_LIST_NEXT<sp/>(peek,<sp/>PYBIND11_MAP_LIST0)<sp/>(f,<sp/>t,<sp/>peek,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PYBIND11_MAP_LIST(f,<sp/>t,<sp/>a1,<sp/>a2,<sp/>...)<sp/>expands<sp/>to<sp/>f(t,<sp/>a1),<sp/>f(t,<sp/>a2),<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194" refid="numpy_8h_1a77fc031e547eb68a976b04c2878d171e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP_LIST(f,<sp/>t,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_EVAL<sp/>(PYBIND11_MAP_LIST1<sp/>(f,<sp/>t,<sp/>__VA_ARGS__,<sp/>(),<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197" refid="numpy_8h_1ae503a026e8bf3b93877cfcd3a18a38fa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_NUMPY_DTYPE(Type,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::pybind11::detail::npy_format_descriptor&lt;Type&gt;::register_dtype<sp/>\</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({PYBIND11_MAP_LIST<sp/>(PYBIND11_FIELD_DESCRIPTOR,<sp/>Type,<sp/>__VA_ARGS__)})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP2_LIST_NEXT1(test,<sp/>next)<sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_EVAL0<sp/>(PYBIND11_MAP_NEXT0<sp/>(test,<sp/>PYBIND11_MAP_COMMA<sp/>next,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205" refid="numpy_8h_1ae82b526b3faa9fb789a32a5eef7ad330" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP2_LIST_NEXT1(test,<sp/>next)<sp/>\</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_MAP_NEXT0<sp/>(test,<sp/>PYBIND11_MAP_COMMA<sp/>next,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208" refid="numpy_8h_1a150736d783cc092e21d3cdfa0d665991" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP2_LIST_NEXT(test,<sp/>next)<sp/>\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_MAP2_LIST_NEXT1<sp/>(PYBIND11_MAP_GET_END<sp/>test,<sp/>next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210" refid="numpy_8h_1a7e41d47d3df8c7a7a110553dcfd02f91" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP2_LIST0(f,<sp/>t,<sp/>x1,<sp/>x2,<sp/>peek,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>f(t,<sp/>x1,<sp/>x2)<sp/>PYBIND11_MAP2_LIST_NEXT<sp/>(peek,<sp/>PYBIND11_MAP2_LIST1)<sp/>(f,<sp/>t,<sp/>peek,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="numpy_8h_1a3a2806d1bf9fb5ad1fcd3e70e9721cde" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP2_LIST1(f,<sp/>t,<sp/>x1,<sp/>x2,<sp/>peek,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>f(t,<sp/>x1,<sp/>x2)<sp/>PYBIND11_MAP2_LIST_NEXT<sp/>(peek,<sp/>PYBIND11_MAP2_LIST0)<sp/>(f,<sp/>t,<sp/>peek,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PYBIND11_MAP2_LIST(f,<sp/>t,<sp/>a1,<sp/>a2,<sp/>...)<sp/>expands<sp/>to<sp/>f(t,<sp/>a1,<sp/>a2),<sp/>f(t,<sp/>a3,<sp/>a4),<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215" refid="numpy_8h_1a210ad8bd2ed78857a5d798e31bf28930" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAP2_LIST(f,<sp/>t,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_EVAL<sp/>(PYBIND11_MAP2_LIST1<sp/>(f,<sp/>t,<sp/>__VA_ARGS__,<sp/>(),<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218" refid="numpy_8h_1a552474514be342d6b440268c22684898" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_NUMPY_DTYPE_EX(Type,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::pybind11::detail::npy_format_descriptor&lt;Type&gt;::register_dtype<sp/>\</highlight></codeline>
<codeline lineno="1220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({PYBIND11_MAP2_LIST<sp/>(PYBIND11_FIELD_DESCRIPTOR_EX,<sp/>Type,<sp/>__VA_ARGS__)})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__CLION_IDE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1225" refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::add_pointer&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1228" refid="namespacepybind11_1_1detail_1a32f785f3d386723d928d48ec06ab1d52" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator&lt;T&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1a32f785f3d386723d928d48ec06ab1d52" kindref="member">array_begin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>&amp;<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator&lt;T&gt;</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1233" refid="namespacepybind11_1_1detail_1acc6607cde2ba1549271d27d83552d8f9" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator&lt;T&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1acc6607cde2ba1549271d27d83552d8f9" kindref="member">array_end</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>&amp;<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a649ed08113836235dc9a40870ba854b0" kindref="member">array_iterator&lt;T&gt;</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>)<sp/>+<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.size);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237" refid="classpybind11_1_1detail_1_1common__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1common__iterator" kindref="compound">common_iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1239" refid="classpybind11_1_1detail_1_1common__iterator_1a4dc612b96b449c1bd5b0940257c3b931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a4dc612b96b449c1bd5b0940257c3b931" kindref="member">container_type</ref><sp/>=<sp/>std::vector&lt;ssize_t&gt;;</highlight></codeline>
<codeline lineno="1240" refid="classpybind11_1_1detail_1_1common__iterator_1aec258828e713d856d1cca789ca4bd86c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1aec258828e713d856d1cca789ca4bd86c" kindref="member">value_type</ref><sp/>=<sp/>container_type::value_type;</highlight></codeline>
<codeline lineno="1241" refid="classpybind11_1_1detail_1_1common__iterator_1a477e82830438528cb662f22f33396c70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a477e82830438528cb662f22f33396c70" kindref="member">size_type</ref><sp/>=<sp/>container_type::size_type;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243" refid="classpybind11_1_1detail_1_1common__iterator_1a53ea940bf95ea2b18bdef22f9d1eab27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a53ea940bf95ea2b18bdef22f9d1eab27" kindref="member">common_iterator</ref>()<sp/>:<sp/>p_ptr(0),<sp/>m_strides()<sp/>{}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245" refid="classpybind11_1_1detail_1_1common__iterator_1a690752dac65c062566e68a40792b2a95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a690752dac65c062566e68a40792b2a95" kindref="member">common_iterator</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a4dc612b96b449c1bd5b0940257c3b931" kindref="member">container_type</ref>&amp;<sp/>strides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a4dc612b96b449c1bd5b0940257c3b931" kindref="member">container_type</ref>&amp;<sp/>shape)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>p_ptr(reinterpret_cast&lt;char*&gt;(ptr)),<sp/>m_strides(strides.size())<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_strides.back()<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1common__iterator_1aec258828e713d856d1cca789ca4bd86c" kindref="member">value_type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strides.back());</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1detail_1_1common__iterator_1a477e82830438528cb662f22f33396c70" kindref="member">size_type</ref><sp/>i<sp/>=<sp/>m_strides.size()<sp/>-<sp/>1;<sp/>i<sp/>!=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a477e82830438528cb662f22f33396c70" kindref="member">size_type</ref><sp/>j<sp/>=<sp/>i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1aec258828e713d856d1cca789ca4bd86c" kindref="member">value_type</ref><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1common__iterator_1aec258828e713d856d1cca789ca4bd86c" kindref="member">value_type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shape[i]);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_strides[j]<sp/>=<sp/>strides[j]<sp/>+<sp/>m_strides[i]<sp/>-<sp/>strides[i]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255" refid="classpybind11_1_1detail_1_1common__iterator_1ab7034f7446b74fe6b14aaeff5be8dbfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1ab7034f7446b74fe6b14aaeff5be8dbfc" kindref="member">increment</ref>(<ref refid="classpybind11_1_1detail_1_1common__iterator_1a477e82830438528cb662f22f33396c70" kindref="member">size_type</ref><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_ptr<sp/>+=<sp/>m_strides[dim];</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259" refid="classpybind11_1_1detail_1_1common__iterator_1a62b0790a899b60a7947d1b140bb50d4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classpybind11_1_1detail_1_1common__iterator_1a62b0790a899b60a7947d1b140bb50d4e" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_ptr;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p_ptr;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>container_type<sp/>m_strides;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268" refid="classpybind11_1_1detail_1_1multi__array__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1multi__array__iterator" kindref="compound">multi_array_iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1270" refid="classpybind11_1_1detail_1_1multi__array__iterator_1a6fcae019ab7e334f627a40b67443ed8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator_1a6fcae019ab7e334f627a40b67443ed8e" kindref="member">container_type</ref><sp/>=<sp/>std::vector&lt;ssize_t&gt;;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272" refid="classpybind11_1_1detail_1_1multi__array__iterator_1af42cb6906424dc8561c6cc552432d213" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator_1af42cb6906424dc8561c6cc552432d213" kindref="member">multi_array_iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;buffer_info,<sp/>N&gt;<sp/>&amp;buffers,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator_1a6fcae019ab7e334f627a40b67443ed8e" kindref="member">container_type</ref><sp/>&amp;shape)</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_shape(shape.size()),<sp/>m_index(shape.size(),<sp/>0),</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_common_iterator()<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manual<sp/>copy<sp/>to<sp/>avoid<sp/>conversion<sp/>warning<sp/>if<sp/>using<sp/>std::copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shape.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shape[i]<sp/>=<sp/>shape[i];</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator_1a6fcae019ab7e334f627a40b67443ed8e" kindref="member">container_type</ref><sp/>strides(shape.size());</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_common_iterator(buffers[i],<sp/>shape,<sp/>m_common_iterator[i],<sp/>strides);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286" refid="classpybind11_1_1detail_1_1multi__array__iterator_1a52deac93b5b0fbe0d20af01f177ff929" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator" kindref="compound">multi_array_iterator</ref>&amp;<sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator_1a52deac93b5b0fbe0d20af01f177ff929" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>m_index.size();<sp/>j<sp/>!=<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>j<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++m_index[i]<sp/>!=<sp/>m_shape[i])<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment_common_iterator(i);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_index[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299" refid="classpybind11_1_1detail_1_1multi__array__iterator_1a3f964b2a83e2ef953893052ef7533ef2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/>T*<sp/><ref refid="classpybind11_1_1detail_1_1multi__array__iterator_1a3f964b2a83e2ef953893052ef7533ef2" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_common_iterator[K].data());</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>common_iter<sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1common__iterator" kindref="compound">common_iterator</ref>;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_common_iterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref><sp/>&amp;<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>container_type<sp/>&amp;shape,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_iter<sp/>&amp;<ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref>,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container_type<sp/>&amp;strides)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buffer_shape_iter<sp/>=<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.shape.rbegin();</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buffer_strides_iter<sp/>=<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.strides.rbegin();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape_iter<sp/>=<sp/>shape.rbegin();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strides_iter<sp/>=<sp/>strides.rbegin();</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buffer_shape_iter<sp/>!=<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.shape.rend())<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*shape_iter<sp/>==<sp/>*buffer_shape_iter)</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*strides_iter<sp/>=<sp/>*buffer_strides_iter;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*strides_iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++buffer_shape_iter;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++buffer_strides_iter;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++shape_iter;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++strides_iter;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="alignment_8hpp_1a23b3ecc690a716b53e9d0146b78d5ef2" kindref="member">std::fill</ref>(strides_iter,<sp/>strides.rend(),<sp/>0);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/>=<sp/>common_iter(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>,<sp/>strides,<sp/>shape);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>increment_common_iterator(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref><sp/>:<sp/>m_common_iterator)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref>.increment(dim);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>container_type<sp/>m_shape;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>container_type<sp/>m_index;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;common_iter,<sp/>N&gt;<sp/>m_common_iterator;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342" refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1b" kindref="member">broadcast_trivial</ref><sp/>{<sp/><ref refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1bafdc3dd34f1eba5038fce1e7cd8ad2a50" kindref="member">non_trivial</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1bafaf7a4de81cc9f66f70a7927181a705d" kindref="member">c_trivial</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1baca83eef092559c5a8675600843fe62ae" kindref="member">f_trivial</ref><sp/>};</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populates<sp/>the<sp/>shape<sp/>and<sp/>number<sp/>of<sp/>dimensions<sp/>for<sp/>the<sp/>set<sp/>of<sp/>buffers.<sp/><sp/>Returns<sp/>a<sp/>broadcast_trivial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>indicating<sp/>whether<sp/>the<sp/>broadcast<sp/>is<sp/>&quot;trivial&quot;--that<sp/>is,<sp/>has<sp/>each<sp/>buffer<sp/>being<sp/>either<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>singleton<sp/>or<sp/>a<sp/>full-size,<sp/>C-contiguous<sp/>(`c_trivial`)<sp/>or<sp/>Fortran-contiguous<sp/>(`f_trivial`)<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer;<sp/>returns<sp/>`non_trivial`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1349" refid="namespacepybind11_1_1detail_1a4cc7d76e4e603f29131728d000e2ae2d" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a246ecfbad89b0434ba16dff387504a1b" kindref="member">broadcast_trivial</ref><sp/><ref refid="namespacepybind11_1_1detail_1a4cc7d76e4e603f29131728d000e2ae2d" kindref="member">broadcast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;buffer_info,<sp/>N&gt;<sp/>&amp;buffers,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>&amp;ndim,<sp/>std::vector&lt;ssize_t&gt;<sp/>&amp;shape)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>ndim<sp/>=<sp/>std::accumulate(buffers.begin(),<sp/>buffers.end(),<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(0),<sp/>[](<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref><sp/>&amp;buf)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1afb41b740bceeaa00b0232737e784385c" kindref="member">std::max</ref>(res,<sp/>buf.<ref refid="structpybind11_1_1buffer__info_1a3d1de61ded85de5f2bffa71c3f99b62c" kindref="member">ndim</ref>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>shape.clear();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>shape.resize((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ndim,<sp/>1);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Figure<sp/>out<sp/>the<sp/>output<sp/>size,<sp/>and<sp/>make<sp/>sure<sp/>all<sp/>input<sp/>arrays<sp/>conform<sp/>(i.e.<sp/>are<sp/>either<sp/>size<sp/>1<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>full<sp/>size).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res_iter<sp/>=<sp/>shape.rbegin();</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>=<sp/>buffers[i].shape.rend();</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape_iter<sp/>=<sp/>buffers[i].shape.rbegin();<sp/>shape_iter<sp/>!=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>;<sp/>++shape_iter,<sp/>++res_iter)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;dim_size_in<sp/>=<sp/>*shape_iter;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;dim_size_out<sp/>=<sp/>*res_iter;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>input<sp/>dimension<sp/>can<sp/>either<sp/>be<sp/>1<sp/>or<sp/>`n`,<sp/>but<sp/>`n`<sp/>values<sp/>must<sp/>match<sp/>across<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_size_out<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim_size_out<sp/>=<sp/>dim_size_in;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_size_in<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>dim_size_in<sp/>!=<sp/>dim_size_out)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;pybind11::vectorize:<sp/>incompatible<sp/>size/dimension<sp/>of<sp/>inputs!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trivial_broadcast_c<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trivial_broadcast_f<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N<sp/>&amp;&amp;<sp/>(trivial_broadcast_c<sp/>||<sp/>trivial_broadcast_f);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers[i].size<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Require<sp/>the<sp/>same<sp/>number<sp/>of<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers[i].ndim<sp/>!=<sp/>ndim)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>broadcast_trivial::non_trivial;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Require<sp/>all<sp/>dimensions<sp/>be<sp/>full-size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::equal(buffers[i].shape.cbegin(),<sp/>buffers[i].shape.cend(),<sp/>shape.cbegin()))</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>broadcast_trivial::non_trivial;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>C<sp/>contiguity<sp/>(but<sp/>only<sp/>if<sp/>previous<sp/>inputs<sp/>were<sp/>also<sp/>C<sp/>contiguous)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trivial_broadcast_c)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>expect_stride<sp/>=<sp/>buffers[i].itemsize;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>=<sp/>buffers[i].shape.crend();</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape_iter<sp/>=<sp/>buffers[i].shape.crbegin(),<sp/>stride_iter<sp/>=<sp/>buffers[i].strides.crbegin();</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trivial_broadcast_c<sp/>&amp;&amp;<sp/>shape_iter<sp/>!=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>;<sp/>++shape_iter,<sp/>++stride_iter)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expect_stride<sp/>==<sp/>*stride_iter)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect_stride<sp/>*=<sp/>*shape_iter;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trivial_broadcast_c<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>Fortran<sp/>contiguity<sp/>(if<sp/>previous<sp/>inputs<sp/>were<sp/>also<sp/>F<sp/>contiguous)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trivial_broadcast_f)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>expect_stride<sp/>=<sp/>buffers[i].itemsize;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>=<sp/>buffers[i].shape.cend();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape_iter<sp/>=<sp/>buffers[i].shape.cbegin(),<sp/>stride_iter<sp/>=<sp/>buffers[i].strides.cbegin();</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trivial_broadcast_f<sp/>&amp;&amp;<sp/>shape_iter<sp/>!=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>;<sp/>++shape_iter,<sp/>++stride_iter)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expect_stride<sp/>==<sp/>*stride_iter)</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect_stride<sp/>*=<sp/>*shape_iter;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trivial_broadcast_f<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trivial_broadcast_c<sp/>?<sp/>broadcast_trivial::c_trivial<sp/>:</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trivial_broadcast_f<sp/>?<sp/>broadcast_trivial::f_trivial<sp/>:</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>broadcast_trivial::non_trivial;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1422" refid="structpybind11_1_1detail_1_1vectorize__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1vectorize__arg" kindref="compound">vectorize_arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_rvalue_reference&lt;T&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Functions<sp/>with<sp/>rvalue<sp/>reference<sp/>arguments<sp/>cannot<sp/>be<sp/>vectorized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>wrapped<sp/>function<sp/>gets<sp/>called<sp/>with<sp/>this<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425" refid="structpybind11_1_1detail_1_1vectorize__arg_1ad0e803cb5a58e5e2bbf1775832e05d4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__arg_1ad0e803cb5a58e5e2bbf1775832e05d4e" kindref="member">call_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>a<sp/>vectorized<sp/>argument?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427" refid="structpybind11_1_1detail_1_1vectorize__arg_1ac664e915da6381e5e03c7a827c887141" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" kindref="member">vectorize</ref><sp/>=</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_any_of&lt;call_type, std::is_arithmetic, is_complex, std::is_pod&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_none_of&lt;call_type, std::is_pointer, std::is_array, is_std_array, std::is_enum&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!std::is_reference&lt;T&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_lvalue_reference&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_const&lt;call_type&gt;::value));</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>this<sp/>type:<sp/>an<sp/>array<sp/>for<sp/>vectorized<sp/>types,<sp/>otherwise<sp/>the<sp/>type<sp/>as-is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433" refid="structpybind11_1_1detail_1_1vectorize__arg_1aafc506aa905e8e3e2ccbfbe5a1b4aa3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__arg_1aafc506aa905e8e3e2ccbfbe5a1b4aa3a" kindref="member">type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;vectorize, array_t&lt;remove_cv_t&lt;call_type&gt;</ref>,<sp/>array::forcecast&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1437" refid="structpybind11_1_1detail_1_1vectorize__helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1vectorize__helper" kindref="compound">vectorize_helper</ref><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NVectorized<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" kindref="member">constexpr_sum</ref>(<ref refid="structpybind11_1_1detail_1_1vectorize__arg" kindref="compound">vectorize_arg&lt;Args&gt;::vectorize</ref>...);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(NVectorized<sp/>&gt;=<sp/>1,</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pybind11::vectorize(...)<sp/>requires<sp/>a<sp/>function<sp/>with<sp/>at<sp/>least<sp/>one<sp/>vectorizable<sp/>argument&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1446" refid="structpybind11_1_1detail_1_1vectorize__helper_1a1826dc1d1e8b5798f051587e94910b8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__helper_1a1826dc1d1e8b5798f051587e94910b8d" kindref="member">vectorize_helper</ref>(T<sp/>&amp;&amp;f)<sp/>:<sp/>f(<ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;T&gt;(f))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448" refid="structpybind11_1_1detail_1_1vectorize__helper_1a7a3f8a02bece1fcd24b79ebf323d9f90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__helper_1a7a3f8a02bece1fcd24b79ebf323d9f90" kindref="member">operator()</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__arg_1aafc506aa905e8e3e2ccbfbe5a1b4aa3a" kindref="member">vectorize_arg&lt;Args&gt;::type</ref>...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>run(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>...,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence&lt;N&gt;</ref>(),</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a87ae472e87544b8da6c2bf99a90387db" kindref="member">select_indices</ref>&lt;<ref refid="structpybind11_1_1detail_1_1vectorize__arg" kindref="compound">vectorize_arg&lt;Args&gt;::vectorize</ref>...&gt;(),</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence&lt;NVectorized&gt;</ref>());</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t&lt;Func&gt;</ref><sp/>f;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>param_n_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pack__element" kindref="compound">pack_element&lt;Index, typename vectorize_arg&lt;Args&gt;::call_type</ref>...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>a<sp/>vectorized<sp/>function<sp/>given<sp/>arguments<sp/>tuple<sp/>and<sp/>three<sp/>index<sp/>sequences:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>Index<sp/>is<sp/>the<sp/>full<sp/>set<sp/>of<sp/>0<sp/>...<sp/>(N-1)<sp/>argument<sp/>indices;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>VIndex<sp/>is<sp/>the<sp/>subset<sp/>of<sp/>argument<sp/>indices<sp/>with<sp/>vectorized<sp/>parameters,<sp/>letting<sp/>us<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorized<sp/>arguments<sp/>(anything<sp/>not<sp/>in<sp/>this<sp/>sequence<sp/>is<sp/>passed<sp/>through)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>BIndex<sp/>is<sp/>a<sp/>incremental<sp/>sequence<sp/>(beginning<sp/>at<sp/>0)<sp/>of<sp/>the<sp/>same<sp/>size<sp/>as<sp/>VIndex,<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>can<sp/>store<sp/>vectorized<sp/>buffer_infos<sp/>in<sp/>an<sp/>array<sp/>(argument<sp/>VIndex<sp/>has<sp/>its<sp/>buffer<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>BIndex<sp/>in<sp/>the<sp/>array).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>VIndex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>BIndex&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>run(</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__arg_1aafc506aa905e8e3e2ccbfbe5a1b4aa3a" kindref="member">vectorize_arg&lt;Args&gt;::type</ref><sp/>&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;Index...&gt;</ref><sp/>i_seq,<sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;VIndex...&gt;</ref><sp/>vi_seq,<sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;BIndex...&gt;</ref><sp/>bi_seq)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointers<sp/>to<sp/>values<sp/>the<sp/>function<sp/>was<sp/>called<sp/>with;<sp/>the<sp/>vectorized<sp/>ones<sp/>set<sp/>here<sp/>will<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>as<sp/>array_t&lt;T&gt;<sp/>pointers,<sp/>but<sp/>they<sp/>will<sp/>be<sp/>changed<sp/>them<sp/>to<sp/>T<sp/>pointers<sp/>before<sp/>we<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>wrapped<sp/>function.<sp/><sp/>Non-vectorized<sp/>pointers<sp/>are<sp/>left<sp/>as-is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;void<sp/>*,<sp/>N&gt;<sp/>params{{<sp/>&amp;<ref refid="classpybind11_1_1args" kindref="compound">args</ref>...<sp/>}};</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>array<sp/>of<sp/>`buffer_info`s<sp/>of<sp/>vectorized<sp/>arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;buffer_info,<sp/>NVectorized&gt;<sp/>buffers{{<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">array<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params[VIndex])-&gt;request()...<sp/>}};</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>dimensions<sp/>parameters<sp/>of<sp/>output<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ssize_t&gt;<sp/>shape(0);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trivial<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a4cc7d76e4e603f29131728d000e2ae2d" kindref="member">broadcast</ref>(buffers,<sp/>nd,<sp/>shape);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>nd;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>std::accumulate(shape.begin(),<sp/>shape.end(),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>1,<sp/>std::multiplies&lt;size_t&gt;());</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>all<sp/>arguments<sp/>are<sp/>0-dimension<sp/>arrays<sp/>(i.e.<sp/>single<sp/>values)<sp/>return<sp/>a<sp/>plain<sp/>value<sp/>(i.e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>wrapped<sp/>in<sp/>an<sp/>array).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>ndim<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a3d7c7853f6ac53a5a12c09c57dbf9ce4" kindref="member">PYBIND11_EXPAND_SIDE_EFFECTS</ref>(params[VIndex]<sp/>=<sp/>buffers[BIndex].ptr);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>(f(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">param_n_t&lt;Index&gt;<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params[Index])...));</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_t&lt;Return&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trivial<sp/>==<sp/>broadcast_trivial::f_trivial)<sp/>result<sp/>=<sp/>array_t&lt;Return,<sp/>array::f_style&gt;(shape);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>array_t&lt;Return&gt;(shape);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trivial<sp/>==<sp/>broadcast_trivial::non_trivial)</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply_broadcast(buffers,<sp/>params,<sp/>result,<sp/>i_seq,<sp/>vi_seq,<sp/>bi_seq);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply_trivial(buffers,<sp/>params,<sp/>result.mutable_data(),<sp/>size,<sp/>i_seq,<sp/>vi_seq,<sp/>bi_seq);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>VIndex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>BIndex&gt;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_trivial(std::array&lt;buffer_info,<sp/>NVectorized&gt;<sp/>&amp;buffers,</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;void<sp/>*,<sp/>N&gt;<sp/>&amp;params,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>*out,</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_sequence&lt;Index...&gt;,<sp/>index_sequence&lt;VIndex...&gt;,<sp/>index_sequence&lt;BIndex...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>an<sp/>array<sp/>of<sp/>mutable<sp/>byte<sp/>references<sp/>and<sp/>sizes<sp/>with<sp/>references<sp/>set<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>appropriate<sp/>pointer<sp/>in<sp/>`params`;<sp/>as<sp/>we<sp/>iterate,<sp/>we&apos;ll<sp/>increment<sp/>each<sp/>pointer<sp/>by<sp/>its<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(except<sp/>for<sp/>singletons,<sp/>which<sp/>get<sp/>an<sp/>increment<sp/>of<sp/>0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;std::pair&lt;unsigned<sp/>char<sp/>*&amp;,<sp/>const<sp/>size_t&gt;,<sp/>NVectorized&gt;<sp/>vecparams{{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;unsigned<sp/>char<sp/>*&amp;,<sp/>const<sp/>size_t&gt;(</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params[VIndex]<sp/>=<sp/>buffers[BIndex].ptr),</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers[BIndex].size<sp/>==<sp/>1<sp/>?<sp/>0<sp/>:<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(param_n_t&lt;VIndex&gt;)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)...</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>f(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">param_n_t&lt;Index&gt;<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params[Index])...);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>vecparams)<sp/>x.first<sp/>+=<sp/>x.second;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>VIndex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>BIndex&gt;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_broadcast(std::array&lt;buffer_info,<sp/>NVectorized&gt;<sp/>&amp;buffers,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;void<sp/>*,<sp/>N&gt;<sp/>&amp;params,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_t&lt;Return&gt;<sp/>&amp;output_array,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_sequence&lt;Index...&gt;,<sp/>index_sequence&lt;VIndex...&gt;,<sp/>index_sequence&lt;BIndex...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_info<sp/><ref refid="namespacemkdoc_1a6299c53cb772acb4a1cb315a21268404" kindref="member">output</ref><sp/>=<sp/>output_array.request();</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi_array_iterator&lt;NVectorized&gt;<sp/>input_iter(buffers,<sp/><ref refid="namespacemkdoc_1a6299c53cb772acb4a1cb315a21268404" kindref="member">output</ref>.shape);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(array_iterator&lt;Return&gt;<sp/><ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref><sp/>=<sp/>array_begin&lt;Return&gt;(<ref refid="namespacemkdoc_1a6299c53cb772acb4a1cb315a21268404" kindref="member">output</ref>),<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>=<sp/>array_end&lt;Return&gt;(<ref refid="namespacemkdoc_1a6299c53cb772acb4a1cb315a21268404" kindref="member">output</ref>);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref><sp/>!=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref>,<sp/>++input_iter)<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a3d7c7853f6ac53a5a12c09c57dbf9ce4" kindref="member">PYBIND11_EXPAND_SIDE_EFFECTS</ref>((</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params[VIndex]<sp/>=<sp/>input_iter.template<sp/>data&lt;BIndex&gt;()</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref><sp/>=<sp/>f(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">param_n_t&lt;Index&gt;<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::get&lt;Index&gt;(params))...);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">vectorize_helper&lt;Func,<sp/>Return,<sp/>Args...&gt;</highlight></codeline>
<codeline lineno="1554" refid="namespacepybind11_1_1detail_1a25c49715d64fc799eef5cfa04f20d119" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a25c49715d64fc799eef5cfa04f20d119" kindref="member">vectorize_extractor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f,<sp/>Return<sp/>(*)<sp/>(Args<sp/>...))<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__helper" kindref="compound">detail::vectorize_helper</ref>&lt;Func,<sp/>Return,<sp/>Args...&gt;(f);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558" refid="structpybind11_1_1detail_1_1handle__type__name_3_01array__t_3_01_t_00_01_flags_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name</ref>&lt;<ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref>&lt;T,<sp/>Flags&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1559" refid="structpybind11_1_1detail_1_1handle__type__name_3_01array__t_3_01_t_00_01_flags_01_4_01_4_1a81ea14f3921b88e7ab7db632ddca121e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name_3_01array__t_3_01_t_00_01_flags_01_4_01_4_1a81ea14f3921b88e7ab7db632ddca121e" kindref="member">name</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;numpy.ndarray[&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">npy_format_descriptor&lt;T&gt;::name</ref>()<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vanilla<sp/>pointer<sp/>vectorizer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1vectorize__helper" kindref="compound">detail::vectorize_helper</ref>&lt;Return<sp/>(*)(Args...),<sp/>Return,<sp/>Args...&gt;</highlight></codeline>
<codeline lineno="1569" refid="namespacepybind11_1a4ccb3d918a6c83f0ed93b7aae5e3dd77" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" kindref="member">vectorize</ref>(Return<sp/>(*f)<sp/>(Args<sp/>...))<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1vectorize__helper" kindref="compound">detail::vectorize_helper</ref>&lt;Return<sp/>(*)(Args...),<sp/>Return,<sp/>Args...&gt;(f);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lambda<sp/>vectorizer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FuncType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::remove_</highlight><highlight class="keyword">class</highlight><highlight class="normal">&lt;decltype(&amp;detail::remove_reference_t&lt;Func&gt;::operator())&gt;::type&gt;</highlight></codeline>
<codeline lineno="1575" refid="namespacepybind11_1a5a9b99aeffa23dc8596bc5ab46bdec99" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" kindref="member">vectorize</ref>(Func<sp/>&amp;&amp;f)<sp/>-&gt;<sp/>decltype(</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a25c49715d64fc799eef5cfa04f20d119" kindref="member">detail::vectorize_extractor</ref>(std::forward&lt;Func&gt;(f),<sp/>(FuncType<sp/>*)<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a25c49715d64fc799eef5cfa04f20d119" kindref="member">detail::vectorize_extractor</ref>(std::forward&lt;Func&gt;(f),<sp/>(FuncType<sp/>*)<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vectorize<sp/>a<sp/>class<sp/>method<sp/>(non-const):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Helper<sp/>=<sp/>detail::vectorize_helper&lt;decltype(std::mem_fn(std::declval&lt;Return<sp/>(Class::*)(Args...)&gt;())),<sp/>Return,<sp/>Class<sp/>*,<sp/>Args...&gt;&gt;</highlight></codeline>
<codeline lineno="1583" refid="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" refkind="member"><highlight class="normal">Helper<sp/><ref refid="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" kindref="member">vectorize</ref>(Return<sp/>(Class::*f)(Args...))<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Helper(std::mem_fn(f));</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vectorize<sp/>a<sp/>class<sp/>method<sp/>(non-const):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Helper<sp/>=<sp/>detail::vectorize_helper&lt;decltype(std::mem_fn(std::declval&lt;Return<sp/>(Class::*)(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;())),<sp/>Return,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class<sp/>*,<sp/>Args...&gt;&gt;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal">Helper<sp/><ref refid="namespacepybind11_1a1cb3c0b9044e0b0d3e8fc0324f485acf" kindref="member">vectorize</ref>(Return<sp/>(Class::*f)(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Helper(std::mem_fn(f));</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h"/>
  </compounddef>
</doxygen>
