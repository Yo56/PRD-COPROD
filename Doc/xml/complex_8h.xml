<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="complex_8h" kind="file" language="C++">
    <compoundname>complex.h</compoundname>
    <includes refid="pybind11_8h" local="yes">pybind11.h</includes>
    <includes local="no">complex</includes>
    <includedby refid="numpy_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>limits</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="21">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>frameobject.h</label>
      </node>
      <node id="24">
        <label>cstdio</label>
      </node>
      <node id="23">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>Python.h</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="9">
        <label>pythread.h</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="27">
        <label>array</label>
      </node>
      <node id="5">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="3">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="32">
        <label>complex</label>
      </node>
      <node id="12">
        <label>forward_list</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="19">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4" prot="public">pybind11::format_descriptor&lt; std::complex&lt; T &gt;, detail::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enabl5283fd49fb33f5c71da04f2a2f74708c" prot="public">pybind11::detail::is_fmt_numeric&lt; std::complex&lt; T &gt;, detail::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/complex.h:<sp/>Complex<sp/>number<sp/>support</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pybind11_8h" kindref="compound">pybind11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor">#ifdef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4" refkind="compound"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>struct<sp/><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::complex&lt;T&gt;,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_floating_point&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="23" refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4_1a7b2b09bd3ace4ba58eeda2dbc73dcd1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="structpybind11_1_1format__descriptor" kindref="compound">format_descriptor&lt;T&gt;::c</ref>;</highlight></codeline>
<codeline lineno="24" refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4_1aa2e79f96da983e153ff47f0e05dc0a4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value[3]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">,<sp/>c,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="25" refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4_1ab7231d2746899d060037368b8b9fc316" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structpybind11_1_1format__descriptor_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enable__if__tb4d0725a4aff8e133ba8b72ef20abea4_1ab7231d2746899d060037368b8b9fc316" kindref="member">format</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(value);<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>format_descriptor&lt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;T&gt;,<sp/>detail::enable_if_t&lt;std::is_floating_point&lt;T&gt;::value&gt;&gt;::value[3];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enabl5283fd49fb33f5c71da04f2a2f74708c" refkind="compound"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>struct<sp/><ref refid="structpybind11_1_1detail_1_1is__fmt__numeric" kindref="compound">is_fmt_numeric</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::complex&lt;T&gt;,<sp/>detail::<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_floating_point&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="34" refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enabl5283fd49fb33f5c71da04f2a2f74708c_1a0e6ebbe5c9b7e99ebb5e4939801afaef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35" refid="structpybind11_1_1detail_1_1is__fmt__numeric_3_01std_1_1complex_3_01_t_01_4_00_01detail_1_1enabl5283fd49fb33f5c71da04f2a2f74708c_1afd276fec2fdbc58756463194a2800e4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1is__fmt__numeric" kindref="compound">is_fmt_numeric&lt;T&gt;::index</ref><sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::complex&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4_1a68335e7033ac436b8c4c9420b2ddcdc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4_1a68335e7033ac436b8c4c9420b2ddcdc8" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert<sp/>&amp;&amp;<sp/>!PyComplex_Check(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_complex<sp/>result<sp/>=<sp/>PyComplex_AsCComplex(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.real<sp/>==<sp/>-1.0<sp/>&amp;&amp;<sp/>PyErr_Occurred())<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>std::complex&lt;T&gt;((T)<sp/>result.real,<sp/>(T)<sp/>result.imag);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4_1a3c9ccba03dcef3e295f547736b232eeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4_1a3c9ccba03dcef3e295f547736b232eeb" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;T&gt;<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyComplex_FromDoubles((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>src.real(),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>src.imag());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1complex_3_01_t_01_4_01_4_1ae04cbb249fa456811e0bd71bc9303ad1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(std::complex&lt;T&gt;,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h"/>
  </compounddef>
</doxygen>
