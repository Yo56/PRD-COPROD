<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="operators_8h" kind="file" language="C++">
    <compoundname>operators.h</compoundname>
    <includes refid="pybind11_8h" local="yes">pybind11.h</includes>
    <includedby refid="stl__bind_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>limits</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="21">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>frameobject.h</label>
      </node>
      <node id="24">
        <label>cstdio</label>
      </node>
      <node id="23">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>Python.h</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="9">
        <label>pythread.h</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="27">
        <label>array</label>
      </node>
      <node id="5">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="3">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>forward_list</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="19">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1self__t" prot="public">pybind11::detail::self_t</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1undefined__t" prot="public">pybind11::detail::undefined_t</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl" prot="public">pybind11::detail::op_impl</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__" prot="public">pybind11::detail::op_</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__sub_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_sub, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__sub_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_sub, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__add_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_add, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__add_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_add, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mul_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mul, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mul_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mul, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__truediv_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_truediv, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__truediv_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_truediv, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mod_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mod, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__mod_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_mod, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lshift_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lshift, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__rshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_rshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__rshift_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_rshift, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__and_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_and, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__and_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_and, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__xor_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_xor, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__xor_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_xor, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__eq_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_eq, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__eq_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_eq, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ne_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ne, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ne_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ne, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__or_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_or, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__or_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_or, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__gt_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_gt, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__gt_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_gt, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ge_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ge, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ge_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ge, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lt_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lt, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__lt_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_lt, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__le_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_le, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__le_00_01op__r_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_le, op_r, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__iadd_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_iadd, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__isub_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_isub, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__imul_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_imul, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__itruediv_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_itruediv, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__imod_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_imod, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ilshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ilshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__irshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_irshift, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__iand_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_iand, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ixor_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ixor, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__ior_00_01op__l_00_01_b_00_01_l_00_01_r_01_4" prot="public">pybind11::detail::op_impl&lt; op_ior, op_l, B, L, R &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__neg_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_neg, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__pos_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_pos, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__abs_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_abs, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__invert_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_invert, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__bool_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_bool, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__int_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_int, op_u, B, L, undefined_t &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1op__impl_3_01op__float_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4" prot="public">pybind11::detail::op_impl&lt; op_float, op_u, B, L, undefined_t &gt;</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" prot="public" static="no">
        <name>PYBIND11_BINARY_OPERATOR</name>
        <param><defname>id</defname></param>
        <param><defname>rid</defname></param>
        <param><defname>op</defname></param>
        <param><defname>expr</defname></param>
        <initializer>template &lt;typename B, typename L, typename R&gt; struct op_impl&lt;op_##id, op_l, B, L, R&gt; { \
    static char const* name() { return &quot;__&quot; #id &quot;__&quot;; }                                \
    static auto execute(const L &amp;l, const R &amp;r) -&gt; decltype(expr) { return (expr); }   \
    static B execute_cast(const L &amp;l, const R &amp;r) { return B(expr); }                  \
};                                                                                     \
template &lt;typename B, typename L, typename R&gt; struct op_impl&lt;op_##id, op_r, B, L, R&gt; { \
    static char const* name() { return &quot;__&quot; #rid &quot;__&quot;; }                               \
    static auto execute(const R &amp;r, const L &amp;l) -&gt; decltype(expr) { return (expr); }   \
    static B execute_cast(const R &amp;r, const L &amp;l) { return B(expr); }                  \
};                                                                                     \
<ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref> op_&lt;op_##id, op_l, self_t, self_t&gt; op(const self_t &amp;, const self_t &amp;) {         \
    return op_&lt;op_##id, op_l, self_t, self_t&gt;();                                       \
}                                                                                      \
template &lt;typename T&gt; op_&lt;op_##id, op_l, self_t, T&gt; op(const self_t &amp;, const T &amp;) {    \
    return op_&lt;op_##id, op_l, self_t, T&gt;();                                            \
}                                                                                      \
template &lt;typename T&gt; op_&lt;op_##id, op_r, T, self_t&gt; op(const T &amp;, const self_t &amp;) {    \
    return op_&lt;op_##id, op_r, T, self_t&gt;();                                            \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="80" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" prot="public" static="no">
        <name>PYBIND11_INPLACE_OPERATOR</name>
        <param><defname>id</defname></param>
        <param><defname>op</defname></param>
        <param><defname>expr</defname></param>
        <initializer>template &lt;typename B, typename L, typename R&gt; struct op_impl&lt;op_##id, op_l, B, L, R&gt; { \
    static char const* name() { return &quot;__&quot; #id &quot;__&quot;; }                                \
    static auto execute(L &amp;l, const R &amp;r) -&gt; decltype(expr) { return expr; }           \
    static B execute_cast(L &amp;l, const R &amp;r) { return B(expr); }                        \
};                                                                                     \
template &lt;typename T&gt; op_&lt;op_##id, op_l, self_t, T&gt; op(const self_t &amp;, const T &amp;) {    \
    return op_&lt;op_##id, op_l, self_t, T&gt;();                                            \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="101" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" prot="public" static="no">
        <name>PYBIND11_UNARY_OPERATOR</name>
        <param><defname>id</defname></param>
        <param><defname>op</defname></param>
        <param><defname>expr</defname></param>
        <initializer>template &lt;typename B, typename L&gt; struct op_impl&lt;op_##id, op_u, B, L, undefined_t&gt; {   \
    static char const* name() { return &quot;__&quot; #id &quot;__&quot;; }                                \
    static auto execute(const L &amp;l) -&gt; decltype(expr) { return expr; }                 \
    static B execute_cast(const L &amp;l) { return B(expr); }                              \
};                                                                                     \
<ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref> op_&lt;op_##id, op_u, self_t, undefined_t&gt; op(const self_t &amp;) {                    \
    return op_&lt;op_##id, op_u, self_t, undefined_t&gt;();                                  \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" line="111" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/operator.h:<sp/>Metatemplates<sp/>for<sp/>operator<sp/>overloading</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pybind11_8h" kindref="compound">pybind11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunsequenced&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>unsequenced<sp/>modifications<sp/>to<sp/>&apos;self&apos;<sp/>(when<sp/>using<sp/>def(py::self<sp/>OP<sp/>Type()))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4127)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4127:<sp/>Conditional<sp/>expression<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111" kindref="member">op_id</ref><sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a470fe6220e876c4ebc2b64ccfefe272c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a470fe6220e876c4ebc2b64ccfefe272c" kindref="member">op_add</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aa35606ea5aa408d358b831c1166ee14d" kindref="member">op_sub</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111adbb4297b7572bbc63c99b0931a1350f0" kindref="member">op_mul</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111abe0c2dcac1f678d828f9c3c9ebd93082" kindref="member">op_div</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0bcbf062451914e9c3952acb18e9aa7b" kindref="member">op_mod</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8a6b2a03e3fd644cb238781f70db93f5" kindref="member">op_divmod</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ace62a8cabb08f4610ecea4776f8cf54a" kindref="member">op_pow</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a5213265fd4e8341836af608cd582b7eb" kindref="member">op_lshift</ref>,</highlight></codeline>
<codeline lineno="27" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2a6aef482b2afa4b6f2c0dfce5735016" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3c8a1fe4da217303a0da168ff30bb433" kindref="member">op_rshift</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a8aaa389799047e1707f6baf12e5f5823" kindref="member">op_and</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111aba57e871afbea7cb5c4c0e6c03664388" kindref="member">op_xor</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4f91c9e7ccb3d5b1f33e64256223fd09" kindref="member">op_or</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a10967d02a21bc01dfcd86fb5637b074f" kindref="member">op_neg</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111acf429cbb13fc03f3aefd8a1b91df15b0" kindref="member">op_pos</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2a6aef482b2afa4b6f2c0dfce5735016" kindref="member">op_abs</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae9bf41774fcb09c29dac33815c462bd6" kindref="member">op_invert</ref>,</highlight></codeline>
<codeline lineno="28" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111af5941c78ed8e958cdbbcf65959ef9679" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6916b0edb673290480067933104651a7" kindref="member">op_int</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a858ca6cbafee2ac3d460eadecabe1cd4" kindref="member">op_long</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a1868d4eac5f6a7410d991327ee9f72fd" kindref="member">op_float</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6621601bccd3103b31c5b91299c9d523" kindref="member">op_str</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111af5941c78ed8e958cdbbcf65959ef9679" kindref="member">op_cmp</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab132f328158cd977facabb032216c0e5" kindref="member">op_gt</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad96c9b793d3066ea0bfaa1c69ae7015d" kindref="member">op_ge</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a840dff8f78c9a5d04e75f5081770466f" kindref="member">op_lt</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61366ca80a86d929fe8cdc1aff462978" kindref="member">op_le</ref>,</highlight></codeline>
<codeline lineno="29" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a95b027089c3f903ebf6eff6f20f33857" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a95b027089c3f903ebf6eff6f20f33857" kindref="member">op_eq</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a88c62cadf3a6b2a097509ab4da63f9cf" kindref="member">op_ne</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a6c22240c620ae8ad7088b9433b47611e" kindref="member">op_iadd</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a4c366b40fdda341e398d774cf2da377c" kindref="member">op_isub</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a2817d127afaeefc19e621bd96fd45cda" kindref="member">op_imul</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a378a817dee5261db865c292c359fc29a" kindref="member">op_idiv</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab408eb8a0b02d58a933a0241bdae1f26" kindref="member">op_imod</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a9c8c1321a0e321fe16f265012ca7c0e2" kindref="member">op_ilshift</ref>,</highlight></codeline>
<codeline lineno="30" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae96c455d4d20836c2646cb5b9cef17b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a0e7857a94c8daedb1100dfee8696a250" kindref="member">op_irshift</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ad609efc14d511ab47f7f6c28a097adc1" kindref="member">op_iand</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ac00548bfe4254699a041b2a4eb9b3ace" kindref="member">op_ixor</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ab7560e54732a74de5be6f1718245c199" kindref="member">op_ior</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a61fc59a9a4870673bc6a1b9e9e72a522" kindref="member">op_complex</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111ae96c455d4d20836c2646cb5b9cef17b3" kindref="member">op_bool</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a3e78b5e0ef453a67ebea8d3c84cfa74e" kindref="member">op_nonzero</ref>,</highlight></codeline>
<codeline lineno="31" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a47a5929acd6bd00206a871960366a4d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a47a5929acd6bd00206a871960366a4d8" kindref="member">op_repr</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" kindref="member">op_truediv</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" kindref="member">op_itruediv</ref></highlight></codeline>
<codeline lineno="32" refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53" kindref="member">op_type</ref><sp/>:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35" refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref>,<sp/></highlight><highlight class="comment">/*<sp/>base<sp/>type<sp/>on<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53a437a40f7580fb7a0d51a5b256a949b37" kindref="member">op_r</ref>,<sp/></highlight><highlight class="comment">/*<sp/>base<sp/>type<sp/>on<sp/>right<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" kindref="member">op_u</ref><sp/><sp/></highlight><highlight class="comment">/*<sp/>unary<sp/>operator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53acf71f03d926dc4d086b63e4aeefb76c1" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structpybind11_1_1detail_1_1self__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structpybind11_1_1detail_1_1undefined__t" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="namespacepybind11_1_1detail_1af668c2d777879646e5f3e905b6dc4de2" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1self__t" kindref="compound">self_t</ref><sp/><ref refid="namespacepybind11_1_1detail_1af668c2d777879646e5f3e905b6dc4de2" kindref="member">__self</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structpybind11_1_1detail_1_1op__impl" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;op_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>op_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1op__impl" kindref="compound">op_impl</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structpybind11_1_1detail_1_1op__" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;op_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>op_type<sp/>ot,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref><sp/>{</highlight></codeline>
<codeline lineno="54" refid="structpybind11_1_1detail_1_1op___1a0cb4b4b660a2ef48f47af54cbb848c82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1op___1a0cb4b4b660a2ef48f47af54cbb848c82" kindref="member">execute</ref>(Class<sp/>&amp;cl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">Class::type</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>L_type<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_same&lt;L, self_t&gt;::value</ref>,<sp/>Base,<sp/>L&gt;;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>R_type<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_same&lt;R, self_t&gt;::value</ref>,<sp/>Base,<sp/>R&gt;;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>op<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1op__impl" kindref="compound">op_impl&lt;id, ot, Base, L_type, R_type&gt;</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">op::name</ref>(),<sp/>&amp;op::execute,<sp/><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref>(),<sp/>extra...);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" kindref="member">op_truediv</ref><sp/>||<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" kindref="member">op_itruediv</ref>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" kindref="member">op_itruediv</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;__idiv__&quot;</highlight><highlight class="normal"><sp/>:<sp/>ot<sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;__div__&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;__rdiv__&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;op::execute,<sp/><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref>(),<sp/>extra...);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66" refid="structpybind11_1_1detail_1_1op___1a6b73c1131c972318e761528eb4c89e0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1op___1a6b73c1131c972318e761528eb4c89e0c" kindref="member">execute_cast</ref>(Class<sp/>&amp;cl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">Class::type</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>L_type<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_same&lt;L, self_t&gt;::value</ref>,<sp/>Base,<sp/>L&gt;;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>R_type<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_same&lt;R, self_t&gt;::value</ref>,<sp/>Base,<sp/>R&gt;;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>op<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1op__impl" kindref="compound">op_impl&lt;id, ot, Base, L_type, R_type&gt;</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">op::name</ref>(),<sp/>&amp;op::execute_cast,<sp/><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref>(),<sp/>extra...);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a78173de81cd74dc634bf6d6cfcecc489" kindref="member">op_truediv</ref><sp/>||<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" kindref="member">op_itruediv</ref>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111a70e0ec805d7588447b29791477dccd13" kindref="member">op_itruediv</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;__idiv__&quot;</highlight><highlight class="normal"><sp/>:<sp/>ot<sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53aa80398f3a2f99f473ca8aad604477f04" kindref="member">op_l</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;__div__&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;__rdiv__&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;op::execute,<sp/><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref>(),<sp/>extra...);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_BINARY_OPERATOR(id,<sp/>rid,<sp/>op,<sp/>expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor">template<sp/>&lt;typename<sp/>B,<sp/>typename<sp/>L,<sp/>typename<sp/>R&gt;<sp/>struct<sp/>op_impl&lt;op_##id,<sp/>op_l,<sp/>B,<sp/>L,<sp/>R&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>char<sp/>const*<sp/>name()<sp/>{<sp/>return<sp/>&quot;__&quot;</highlight><highlight class="normal"><sp/>#id<sp/>&quot;__&quot;;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>execute(const<sp/>L<sp/>&amp;l,<sp/>const<sp/>R<sp/>&amp;r)<sp/>-&gt;<sp/>decltype(expr)<sp/>{<sp/>return<sp/>(expr);<sp/>}<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>B<sp/>execute_cast(const<sp/>L<sp/>&amp;l,<sp/>const<sp/>R<sp/>&amp;r)<sp/>{<sp/>return<sp/>B(expr);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="normal">template<sp/>&lt;typename<sp/>B,<sp/>typename<sp/>L,<sp/>typename<sp/>R&gt;<sp/>struct<sp/>op_impl&lt;op_##id,<sp/>op_r,<sp/>B,<sp/>L,<sp/>R&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>char<sp/>const*<sp/>name()<sp/>{<sp/>return<sp/>&quot;__&quot;<sp/>#rid<sp/>&quot;__&quot;;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>execute(const<sp/>R<sp/>&amp;r,<sp/>const<sp/>L<sp/>&amp;l)<sp/>-&gt;<sp/>decltype(expr)<sp/>{<sp/>return<sp/>(expr);<sp/>}<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>B<sp/>execute_cast(const<sp/>R<sp/>&amp;r,<sp/>const<sp/>L<sp/>&amp;l)<sp/>{<sp/>return<sp/>B(expr);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="normal">inline<sp/>op_&lt;op_##id,<sp/>op_l,<sp/>self_t,<sp/>self_t&gt;<sp/>op(const<sp/>self_t<sp/>&amp;,<sp/>const<sp/>self_t<sp/>&amp;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>op_&lt;op_##id,<sp/>op_l,<sp/>self_t,<sp/>self_t&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>op_&lt;op_##id,<sp/>op_l,<sp/>self_t,<sp/>T&gt;<sp/>op(const<sp/>self_t<sp/>&amp;,<sp/>const<sp/>T<sp/>&amp;)<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>op_&lt;op_##id,<sp/>op_l,<sp/>self_t,<sp/>T&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>op_&lt;op_##id,<sp/>op_r,<sp/>T,<sp/>self_t&gt;<sp/>op(const<sp/>T<sp/>&amp;,<sp/>const<sp/>self_t<sp/>&amp;)<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>op_&lt;op_##id,<sp/>op_r,<sp/>T,<sp/>self_t&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_INPLACE_OPERATOR(id,<sp/>op,<sp/>expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor">template<sp/>&lt;typename<sp/>B,<sp/>typename<sp/>L,<sp/>typename<sp/>R&gt;<sp/>struct<sp/>op_impl&lt;op_##id,<sp/>op_l,<sp/>B,<sp/>L,<sp/>R&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>char<sp/>const*<sp/>name()<sp/>{<sp/>return<sp/>&quot;__&quot;</highlight><highlight class="normal"><sp/>#id<sp/>&quot;__&quot;;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>execute(L<sp/>&amp;l,<sp/>const<sp/>R<sp/>&amp;r)<sp/>-&gt;<sp/>decltype(expr)<sp/>{<sp/>return<sp/>expr;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>B<sp/>execute_cast(L<sp/>&amp;l,<sp/>const<sp/>R<sp/>&amp;r)<sp/>{<sp/>return<sp/>B(expr);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>op_&lt;op_##id,<sp/>op_l,<sp/>self_t,<sp/>T&gt;<sp/>op(const<sp/>self_t<sp/>&amp;,<sp/>const<sp/>T<sp/>&amp;)<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>op_&lt;op_##id,<sp/>op_l,<sp/>self_t,<sp/>T&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_UNARY_OPERATOR(id,<sp/>op,<sp/>expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">template<sp/>&lt;typename<sp/>B,<sp/>typename<sp/>L&gt;<sp/>struct<sp/>op_impl&lt;op_##id,<sp/>op_u,<sp/>B,<sp/>L,<sp/>undefined_t&gt;<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>char<sp/>const*<sp/>name()<sp/>{<sp/>return<sp/>&quot;__&quot;</highlight><highlight class="normal"><sp/>#id<sp/>&quot;__&quot;;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>execute(const<sp/>L<sp/>&amp;l)<sp/>-&gt;<sp/>decltype(expr)<sp/>{<sp/>return<sp/>expr;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>B<sp/>execute_cast(const<sp/>L<sp/>&amp;l)<sp/>{<sp/>return<sp/>B(expr);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="normal">inline<sp/>op_&lt;op_##id,<sp/>op_u,<sp/>self_t,<sp/>undefined_t&gt;<sp/>op(const<sp/>self_t<sp/>&amp;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>op_&lt;op_##id,<sp/>op_u,<sp/>self_t,<sp/>undefined_t&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structpybind11_1_1detail_1_1op__impl_3_01op__sub_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a04fe307690ec4084bec15f8e34a27f5e" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(sub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">-,<sp/><sp/><sp/><sp/>l<sp/>-<sp/>r)</highlight></codeline>
<codeline lineno="122" refid="structpybind11_1_1detail_1_1op__impl_3_01op__add_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1af617a6e4fddd489c78cc8af42f563aa1" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(add,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>radd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator+,<sp/><sp/><sp/><sp/>l<sp/>+<sp/>r)</highlight></codeline>
<codeline lineno="123" refid="structpybind11_1_1detail_1_1op__impl_3_01op__mul_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1aa53a74baa7da7113fd1e60d9618797cb" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(mul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator*,<sp/><sp/><sp/><sp/>l<sp/>*<sp/>r)</highlight></codeline>
<codeline lineno="124" refid="structpybind11_1_1detail_1_1op__impl_3_01op__truediv_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1acc5da1e4764145cb938a98d3d581d902" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(truediv,<sp/><sp/><sp/>rtruediv,<sp/><sp/><sp/><sp/><sp/>operator/,<sp/><sp/><sp/><sp/>l<sp/>/<sp/>r)</highlight></codeline>
<codeline lineno="125" refid="structpybind11_1_1detail_1_1op__impl_3_01op__mod_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a6bcaaf8834c08f17edeed00c72b21538" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(mod,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmod,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator%,<sp/><sp/><sp/><sp/>l<sp/>%<sp/>r)</highlight></codeline>
<codeline lineno="126" refid="structpybind11_1_1detail_1_1op__impl_3_01op__lshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a65f218e634f1e40a55fbe864d7d8b852" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(lshift,<sp/><sp/><sp/><sp/>rlshift,<sp/><sp/><sp/><sp/><sp/><sp/>operator&lt;&lt;,<sp/><sp/><sp/>l<sp/>&lt;&lt;<sp/>r)</highlight></codeline>
<codeline lineno="127" refid="structpybind11_1_1detail_1_1op__impl_3_01op__rshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1af9b634f8bcacba2350b23c393992d8da" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(rshift,<sp/><sp/><sp/><sp/>rrshift,<sp/><sp/><sp/><sp/><sp/><sp/>operator&gt;&gt;,<sp/><sp/><sp/>l<sp/>&gt;&gt;<sp/>r)</highlight></codeline>
<codeline lineno="128" refid="structpybind11_1_1detail_1_1op__impl_3_01op__and_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1ad3b461eea5c221deb15b749d918ab215" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(and,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator&amp;,<sp/><sp/><sp/><sp/>l<sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="129" refid="structpybind11_1_1detail_1_1op__impl_3_01op__xor_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a914ffeb5f5298a973dc515179a749a54" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(xor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator^,<sp/><sp/><sp/><sp/>l<sp/>^<sp/>r)</highlight></codeline>
<codeline lineno="130" refid="structpybind11_1_1detail_1_1op__impl_3_01op__eq_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a5c34c05d1f88b5b1717375f5b456638a" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(eq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator==,<sp/><sp/><sp/>l<sp/>==<sp/>r)</highlight></codeline>
<codeline lineno="131" refid="structpybind11_1_1detail_1_1op__impl_3_01op__ne_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a1761d72b0259df11ba3020361a041426" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(ne,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ne,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator!=,<sp/><sp/><sp/>l<sp/>!=<sp/>r)</highlight></codeline>
<codeline lineno="132" refid="structpybind11_1_1detail_1_1op__impl_3_01op__or_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a487cd6adbd5a601b702ffcbe908a4607" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(or,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ror,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator|,<sp/><sp/><sp/><sp/>l<sp/>|<sp/>r)</highlight></codeline>
<codeline lineno="133" refid="structpybind11_1_1detail_1_1op__impl_3_01op__gt_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a026d95727b0e9d435ea9bdeea2e72445" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(gt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator&gt;,<sp/><sp/><sp/><sp/>l<sp/>&gt;<sp/>r)</highlight></codeline>
<codeline lineno="134" refid="structpybind11_1_1detail_1_1op__impl_3_01op__ge_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a5a9f92c35e0e389423882606291f4752" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(ge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>le,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator&gt;=,<sp/><sp/><sp/>l<sp/>&gt;=<sp/>r)</highlight></codeline>
<codeline lineno="135" refid="structpybind11_1_1detail_1_1op__impl_3_01op__lt_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a4038775a5848454ad5f48325ece96326" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(lt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator&lt;,<sp/><sp/><sp/><sp/>l<sp/>&lt;<sp/>r)</highlight></codeline>
<codeline lineno="136" refid="structpybind11_1_1detail_1_1op__impl_3_01op__le_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1af5b98b0bf888ee29763c9800e39c6e72" refkind="member"><highlight class="normal"><ref refid="operators_8h_1ae0ae1ae0678152d452b6ceaaa2fc8c1d" kindref="member">PYBIND11_BINARY_OPERATOR</ref>(le,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator&lt;=,<sp/><sp/><sp/>l<sp/>&lt;=<sp/>r)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//PYBIND11_BINARY_OPERATOR(pow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(l,<sp/><sp/>r))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structpybind11_1_1detail_1_1op__impl_3_01op__iadd_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a73919911e21bc19365ffbc1f498f818c" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(iadd,<sp/><sp/><sp/><sp/><sp/>operator+=,<sp/><sp/><sp/>l<sp/>+=<sp/>r)</highlight></codeline>
<codeline lineno="139" refid="structpybind11_1_1detail_1_1op__impl_3_01op__isub_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a81f90a1174877508368d1afd50e8c916" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(isub,<sp/><sp/><sp/><sp/><sp/>operator-=,<sp/><sp/><sp/>l<sp/>-=<sp/>r)</highlight></codeline>
<codeline lineno="140" refid="structpybind11_1_1detail_1_1op__impl_3_01op__imul_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1ae6ae258988267f0b7e5cc9714db4a895" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(imul,<sp/><sp/><sp/><sp/><sp/>operator*=,<sp/><sp/><sp/>l<sp/>*=<sp/>r)</highlight></codeline>
<codeline lineno="141" refid="structpybind11_1_1detail_1_1op__impl_3_01op__itruediv_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a2f826da16ed8973b0fa5356879d6bc15" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(itruediv,<sp/>operator/=,<sp/><sp/><sp/>l<sp/>/=<sp/>r)</highlight></codeline>
<codeline lineno="142" refid="structpybind11_1_1detail_1_1op__impl_3_01op__imod_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a89a5272737da4856aa446829ef1b1c7d" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(imod,<sp/><sp/><sp/><sp/><sp/>operator%=,<sp/><sp/><sp/>l<sp/>%=<sp/>r)</highlight></codeline>
<codeline lineno="143" refid="structpybind11_1_1detail_1_1op__impl_3_01op__ilshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a7cfa10fb9e9e7f28caa9855bc50b3358" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(ilshift,<sp/><sp/>operator&lt;&lt;=,<sp/><sp/>l<sp/>&lt;&lt;=<sp/>r)</highlight></codeline>
<codeline lineno="144" refid="structpybind11_1_1detail_1_1op__impl_3_01op__irshift_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1aec98e6d6dea57d1348e203bcd046443d" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(irshift,<sp/><sp/>operator&gt;&gt;=,<sp/><sp/>l<sp/>&gt;&gt;=<sp/>r)</highlight></codeline>
<codeline lineno="145" refid="structpybind11_1_1detail_1_1op__impl_3_01op__iand_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a509a33263056ab7247c1cf6183af46a6" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(iand,<sp/><sp/><sp/><sp/><sp/>operator&amp;=,<sp/><sp/><sp/>l<sp/>&amp;=<sp/>r)</highlight></codeline>
<codeline lineno="146" refid="structpybind11_1_1detail_1_1op__impl_3_01op__ixor_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a326de56efb95c7466942b1b0e5d67cfd" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(ixor,<sp/><sp/><sp/><sp/><sp/>operator^=,<sp/><sp/><sp/>l<sp/>^=<sp/>r)</highlight></codeline>
<codeline lineno="147" refid="structpybind11_1_1detail_1_1op__impl_3_01op__ior_00_01op__l_00_01_b_00_01_l_00_01_r_01_4_1a830185b9982d721739fe936bfcae4334" refkind="member"><highlight class="normal"><ref refid="operators_8h_1a9a0c6e2407d7ea49f4cfc61acf48db59" kindref="member">PYBIND11_INPLACE_OPERATOR</ref>(ior,<sp/><sp/><sp/><sp/><sp/><sp/>operator|=,<sp/><sp/><sp/>l<sp/>|=<sp/>r)</highlight></codeline>
<codeline lineno="148" refid="structpybind11_1_1detail_1_1op__impl_3_01op__neg_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1af392a7c6869992b556a761cae8154604" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(neg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator-,<sp/><sp/><sp/><sp/>-l)</highlight></codeline>
<codeline lineno="149" refid="structpybind11_1_1detail_1_1op__impl_3_01op__pos_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1a2aad34ab7e6c075abdc354d51d23da49" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator+,<sp/><sp/><sp/><sp/>+l)</highlight></codeline>
<codeline lineno="150" refid="structpybind11_1_1detail_1_1op__impl_3_01op__abs_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1acbb69977f1c1de4465ece1a51435c2cc" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(<ref refid="namespacepybind11_1_1detail_1ac475f67e781e0c607a75072acb5d11d2" kindref="member">abs</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ac475f67e781e0c607a75072acb5d11d2" kindref="member">abs</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1_1detail_1ac475f67e781e0c607a75072acb5d11d2" kindref="member">abs</ref>(l))</highlight></codeline>
<codeline lineno="151" refid="structpybind11_1_1detail_1_1op__impl_3_01op__invert_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1a25ee93eb3a3421a44ebb9905decf3f49" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(invert,<sp/><sp/><sp/><sp/><sp/>operator~,<sp/><sp/><sp/><sp/>(~l))</highlight></codeline>
<codeline lineno="152" refid="structpybind11_1_1detail_1_1op__impl_3_01op__bool_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1a1113fd5434b2837805d3ff14fb9828e2" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator!,<sp/><sp/><sp/><sp/>!!l)</highlight></codeline>
<codeline lineno="153" refid="structpybind11_1_1detail_1_1op__impl_3_01op__int_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1a01c096f7e764e67022ba54ccd1ca54e2" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1int__" kindref="compound">int_</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>l)</highlight></codeline>
<codeline lineno="154" refid="structpybind11_1_1detail_1_1op__impl_3_01op__float_00_01op__u_00_01_b_00_01_l_00_01undefined__t_01_4_1a974bfe0930b3a87b0b899243a205a344" refkind="member"><highlight class="normal"><ref refid="operators_8h_1acc5a7d37ef285c22f7b3ca856a3646d9" kindref="member">PYBIND11_UNARY_OPERATOR</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1float__" kindref="compound">float_</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>l)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PYBIND11_BINARY_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PYBIND11_INPLACE_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PYBIND11_UNARY_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::self;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h"/>
  </compounddef>
</doxygen>
