<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="cell__test__suite_8cpp" kind="file" language="C++">
    <compoundname>cell_test_suite.cpp</compoundname>
    <includes local="no">sstream</includes>
    <includes refid="assertions_8hpp" local="no">helpers/assertions.hpp</includes>
    <includes refid="test__suite_8hpp" local="no">helpers/test_suite.hpp</includes>
    <includes refid="cell_8hpp" local="no">xlnt/cell/cell.hpp</includes>
    <includes refid="comment_8hpp" local="no">xlnt/cell/comment.hpp</includes>
    <includes refid="hyperlink_8hpp" local="no">xlnt/cell/hyperlink.hpp</includes>
    <includes refid="alignment_8hpp" local="no">xlnt/styles/alignment.hpp</includes>
    <includes refid="border_8hpp" local="no">xlnt/styles/border.hpp</includes>
    <includes refid="fill_8hpp" local="no">xlnt/styles/fill.hpp</includes>
    <includes refid="format_8hpp" local="no">xlnt/styles/format.hpp</includes>
    <includes refid="number__format_8hpp" local="no">xlnt/styles/number_format.hpp</includes>
    <includes refid="protection_8hpp" local="no">xlnt/styles/protection.hpp</includes>
    <includes refid="style_8hpp" local="no">xlnt/styles/style.hpp</includes>
    <includes refid="date_8hpp" local="no">xlnt/utils/date.hpp</includes>
    <includes refid="datetime_8hpp" local="no">xlnt/utils/datetime.hpp</includes>
    <includes refid="time_8hpp" local="no">xlnt/utils/time.hpp</includes>
    <includes refid="timedelta_8hpp" local="no">xlnt/utils/timedelta.hpp</includes>
    <includes refid="workbook_8hpp" local="no">xlnt/workbook/workbook.hpp</includes>
    <includes refid="range_8hpp" local="no">xlnt/worksheet/range.hpp</includes>
    <includes refid="worksheet_8hpp" local="no">xlnt/worksheet/worksheet.hpp</includes>
    <incdepgraph>
      <node id="6">
        <label>xlnt/utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>xlnt/xlnt_config.hpp</label>
        <link refid="xlnt__config_8hpp"/>
      </node>
      <node id="24">
        <label>helpers/xml_helper.hpp</label>
        <link refid="xml__helper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>functional</label>
      </node>
      <node id="96">
        <label>xlnt/worksheet/major_order.hpp</label>
        <link refid="major__order_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>limits</label>
      </node>
      <node id="54">
        <label>libstudxml/details/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>xlnt/worksheet/phonetic_pr.hpp</label>
        <link refid="phonetic__pr_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>iterator</label>
      </node>
      <node id="89">
        <label>xlnt/utils/timedelta.hpp</label>
        <link refid="timedelta_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>libstudxml/version.hxx</label>
        <link refid="version_8hxx"/>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="98">
        <label>xlnt/worksheet/worksheet.hpp</label>
        <link refid="worksheet_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>xlnt/cell/phonetic_run.hpp</label>
        <link refid="phonetic__run_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>xlnt/worksheet/cell_vector.hpp</label>
        <link refid="cell__vector_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>xlnt/utils/numeric.hpp</label>
        <link refid="numeric_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>xlnt/cell/cell_type.hpp</label>
        <link refid="cell__type_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>helpers/assertions.hpp</label>
        <link refid="assertions_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>libstudxml/details/expat/expat.h</label>
        <link refid="expat_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>xlnt/worksheet/range_iterator.hpp</label>
        <link refid="range__iterator_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="41">
        <label>cassert</label>
      </node>
      <node id="58">
        <label>libstudxml/details/expat/expat_external.h</label>
        <link refid="expat__external_8h"/>
      </node>
      <node id="10">
        <label>xlnt/cell/index_types.hpp</label>
        <link refid="index__types_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdexcept</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="32">
        <label>map</label>
      </node>
      <node id="62">
        <label>libstudxml/details/export.hxx</label>
        <link refid="export_8hxx"/>
      </node>
      <node id="90">
        <label>xlnt/worksheet/range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>xlnt/cell/rich_text.hpp</label>
        <link refid="rich__text_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>xlnt/styles/border.hpp</label>
        <link refid="border_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>libstudxml/forward.hxx</label>
        <link refid="forward_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>unordered_set</label>
      </node>
      <node id="48">
        <label>libstudxml/details/pre.hxx</label>
        <link refid="pre_8hxx"/>
      </node>
      <node id="61">
        <label>libstudxml/qname.hxx</label>
        <link refid="qname_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>xlnt/styles/color.hpp</label>
        <link refid="color_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>libstudxml/content.hxx</label>
        <link refid="content_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/tests/cell/cell_test_suite.cpp</label>
        <link refid="cell__test__suite_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>detail/external/include_libstudxml.hpp</label>
        <link refid="include__libstudxml_8hpp"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>exception</label>
      </node>
      <node id="70">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>fstream</label>
      </node>
      <node id="45">
        <label>ostream</label>
      </node>
      <node id="39">
        <label>xlnt/utils/optional.hpp</label>
        <link refid="optional_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>libstudxml/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>xlnt/worksheet/page_margins.hpp</label>
        <link refid="page__margins_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>xlnt/workbook/workbook.hpp</label>
        <link refid="workbook_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>xlnt/worksheet/pane.hpp</label>
        <link refid="pane_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>xlnt/worksheet/selection.hpp</label>
        <link refid="selection_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>xlnt/packaging/uri.hpp</label>
        <link refid="uri_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>xlnt/cell/cell.hpp</label>
        <link refid="cell_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>libstudxml/value-traits.hxx</label>
        <link refid="value-traits_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>xlnt/utils/datetime.hpp</label>
        <link refid="datetime_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>xlnt/utils/date.hpp</label>
        <link refid="date_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>tuple</label>
      </node>
      <node id="77">
        <label>xlnt/cell/hyperlink.hpp</label>
        <link refid="hyperlink_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>sys/param.h</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
      <node id="91">
        <label>xlnt/styles/conditional_format.hpp</label>
        <link refid="conditional__format_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>xlnt/worksheet/page_setup.hpp</label>
        <link refid="page__setup_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>libstudxml/details/post.hxx</label>
        <link refid="post_8hxx"/>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="69">
        <label>libstudxml/details/genx/genx.h</label>
        <link refid="genx_8h"/>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>array</label>
      </node>
      <node id="18">
        <label>helpers/path_helper.hpp</label>
        <link refid="path__helper_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>libstudxml/serializer.ixx</label>
        <link refid="serializer_8ixx"/>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sstream</label>
      </node>
      <node id="84">
        <label>xlnt/styles/style.hpp</label>
        <link refid="style_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>libstudxml/details/config.hxx</label>
        <link refid="config_8hxx"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>detail/serialization/zstream.hpp</label>
        <link refid="zstream_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>libstudxml/parser.ixx</label>
        <link refid="parser_8ixx"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>xlnt/styles/font.hpp</label>
        <link refid="font_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>libstudxml/parser.txx</label>
      </node>
      <node id="51">
        <label>iosfwd</label>
      </node>
      <node id="66">
        <label>libstudxml/value-traits.txx</label>
      </node>
      <node id="15">
        <label>iostream</label>
      </node>
      <node id="52">
        <label>cstddef</label>
      </node>
      <node id="86">
        <label>xlnt/utils/calendar.hpp</label>
        <link refid="calendar_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>xlnt/cell/rich_text_run.hpp</label>
        <link refid="rich__text__run_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>unordered_map</label>
      </node>
      <node id="83">
        <label>xlnt/styles/protection.hpp</label>
        <link refid="protection_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>detail/serialization/vector_streambuf.hpp</label>
        <link refid="vector__streambuf_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>xlnt/styles/fill.hpp</label>
        <link refid="fill_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>xlnt/worksheet/range_reference.hpp</label>
        <link refid="range__reference_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>chrono</label>
      </node>
      <node id="50">
        <label>libstudxml/parser.hxx</label>
        <link refid="parser_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>xlnt/styles/number_format.hpp</label>
        <link refid="number__format_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>xlnt/styles/alignment.hpp</label>
        <link refid="alignment_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>helpers/timing.hpp</label>
        <link refid="timing_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>xlnt/cell/cell_reference.hpp</label>
        <link refid="cell__reference_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>xlnt/utils/time.hpp</label>
        <link refid="time_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>xlnt/worksheet/sheet_view.hpp</label>
        <link refid="sheet__view_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>xlnt/styles/format.hpp</label>
        <link refid="format_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>type_traits</label>
      </node>
      <node id="28">
        <label>xlnt/packaging/relationship.hpp</label>
        <link refid="relationship_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>libstudxml/exception.hxx</label>
        <link refid="exception_8hxx"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="26">
        <label>xlnt/packaging/manifest.hpp</label>
        <link refid="manifest_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>xlnt/utils/path.hpp</label>
        <link refid="path_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>memory</label>
      </node>
      <node id="76">
        <label>xlnt/cell/comment.hpp</label>
        <link refid="comment_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>helpers/test_suite.hpp</label>
        <link refid="test__suite_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>xlnt/worksheet/cell_iterator.hpp</label>
        <link refid="cell__iterator_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classcell__test__suite" prot="public">cell_test_suite</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cell__test__suite_8cpp_1a4e3235ad08445673ada4e5d1c60ae8b0" prot="public" static="yes" mutable="no">
        <type><ref refid="classcell__test__suite" kindref="compound">cell_test_suite</ref></type>
        <definition>cell_test_suite x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/tests/cell/cell_test_suite.cpp" line="838" column="24" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/tests/cell/cell_test_suite.cpp" bodystart="838" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2020<sp/>Thomas<sp/>Fussell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>WRISING<sp/>FROM,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THE<sp/>SOFTWARE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@license:<sp/>http://www.opensource.org/licenses/mit-license.php</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@author:<sp/>see<sp/>AUTHORS<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="assertions_8hpp" kindref="compound">helpers/assertions.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="test__suite_8hpp" kindref="compound">helpers/test_suite.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cell_8hpp" kindref="compound">xlnt/cell/cell.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="comment_8hpp" kindref="compound">xlnt/cell/comment.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hyperlink_8hpp" kindref="compound">xlnt/cell/hyperlink.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="alignment_8hpp" kindref="compound">xlnt/styles/alignment.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="border_8hpp" kindref="compound">xlnt/styles/border.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fill_8hpp" kindref="compound">xlnt/styles/fill.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="format_8hpp" kindref="compound">xlnt/styles/format.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="number__format_8hpp" kindref="compound">xlnt/styles/number_format.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="protection_8hpp" kindref="compound">xlnt/styles/protection.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="style_8hpp" kindref="compound">xlnt/styles/style.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="date_8hpp" kindref="compound">xlnt/utils/date.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datetime_8hpp" kindref="compound">xlnt/utils/datetime.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="time_8hpp" kindref="compound">xlnt/utils/time.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="timedelta_8hpp" kindref="compound">xlnt/utils/timedelta.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="workbook_8hpp" kindref="compound">xlnt/workbook/workbook.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="range_8hpp" kindref="compound">xlnt/worksheet/range.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="worksheet_8hpp" kindref="compound">xlnt/worksheet/worksheet.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classcell__test__suite" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcell__test__suite" kindref="compound">cell_test_suite</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtest__suite" kindref="compound">test_suite</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcell__test__suite_1ab7ac50868446afd20b18ee14d1707cff" kindref="member">cell_test_suite</ref>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_infer_numeric);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_constructor);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_null);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_string);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_formula1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_formula2);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_formula3);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_not_formula);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_boolean);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_error_codes);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_insert_datetime);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_insert_date);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_insert_time);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_cell_formatted_as_date1);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_cell_formatted_as_date2);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_cell_formatted_as_date3);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_illegal_characters);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_timedelta);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_cell_offset);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_font);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_fill);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_border);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_number_format);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_alignment);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_protection);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_style);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_print);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_values);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_reference);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_anchor);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_hyperlink);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_comment);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_copy_and_compare);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__suite_8hpp_1a0bd0895f1a8ed5f61f9a64af5eec83f0" kindref="member">register_test</ref>(test_cell_phonetic_properties);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_infer_numeric()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;4.2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a53bea0adf95652a03f86f2242f57ea65" kindref="member">xlnt_assert_delta</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(),<sp/>4.2,<sp/>1E-9);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;-42.000&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>==<sp/>-42);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;0.9999&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>==<sp/>0.9999);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;99E-02&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>==<sp/>0.99);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;-1E3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>==<sp/>-1000);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;2e+2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>==<sp/>200);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;3.1%&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a53bea0adf95652a03f86f2242f57ea65" kindref="member">xlnt_assert_delta</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(),<sp/>0.031,<sp/>1E-9);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;03:40:16&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;<ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>&gt;()<sp/>==<sp/><ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>(3,<sp/>40,<sp/>16));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;03:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;03:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;03:40&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;<ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>&gt;()<sp/>==<sp/><ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>(3,<sp/>40));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;30:33.865633336&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;<ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>&gt;()<sp/>==<sp/><ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>(0,<sp/>30,<sp/>33,<sp/>865633));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_constructor()</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a7d665d9fa18a26df451d111b34afd89f" kindref="member">xlnt::cell::type::empty</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.column()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.column_index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.row()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.reference()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_value());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_null()</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>datatypes<sp/>=</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cell__type_8hpp_1a7d665d9fa18a26df451d111b34afd89f" kindref="member">xlnt::cell::type::empty</ref>,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cell__type_8hpp_1a7c6368b321bd9acd0149b030bb8275ed" kindref="member">xlnt::cell::type::boolean</ref>,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cell__type_8hpp_1af10dacfa214e2575bb2e0ee407c242e0" kindref="member">xlnt::cell::type::error</ref>,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlnt::cell::type::formula_string,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cell__type_8hpp_1af31813e2131200936cf54234db95808d" kindref="member">xlnt::cell::type::number</ref>,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cell__type_8hpp_1a03c1cffbb6f0fc9a6b979862c102d5a8" kindref="member">xlnt::cell::type::shared_string</ref>};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;datatype<sp/>:<sp/>datatypes)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.data_type(datatype);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/>datatype);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a7d665d9fa18a26df451d111b34afd89f" kindref="member">xlnt::cell::type::empty</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_string()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a03c1cffbb6f0fc9a6b979862c102d5a8" kindref="member">xlnt::cell::type::shared_string</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a03c1cffbb6f0fc9a6b979862c102d5a8" kindref="member">xlnt::cell::type::shared_string</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;0800&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a03c1cffbb6f0fc9a6b979862c102d5a8" kindref="member">xlnt::cell::type::shared_string</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_formula1()</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;=42&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xlnt_assert(cell.data_type()<sp/>==<sp/>xlnt::cell::type::number);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_formula());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_formula2()</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;=if(A1&lt;4;-1;1)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xlnt_assert(cell.data_type()<sp/>==<sp/>xlnt::cell::type::number);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_formula());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_formula3()</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_formula());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a5d2756df44b343fcb3bdfaf9b0b46440" kindref="member">xlnt_assert_throws_nothing</ref>(cell.formula(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_formula());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.formula(</highlight><highlight class="stringliteral">&quot;=42&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_formula());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.formula(),<sp/></highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_formula();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_formula());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_not_formula()</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a03c1cffbb6f0fc9a6b979862c102d5a8" kindref="member">xlnt::cell::type::shared_string</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;std::string&gt;()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_formula());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_boolean()</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>:<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(value);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1a7c6368b321bd9acd0149b030bb8275ed" kindref="member">xlnt::cell::type::boolean</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_error_codes()</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>string<sp/>can&apos;t<sp/>be<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.error(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>string<sp/>has<sp/>to<sp/>have<sp/>a<sp/>leading<sp/>&apos;#&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.error(</highlight><highlight class="stringliteral">&quot;not<sp/>an<sp/>error&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>error_code<sp/>:<sp/><ref refid="classxlnt_1_1cell_1a36cc29dac8046caeac23b602bc3a1d51" kindref="member">xlnt::cell::error_codes</ref>())</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>type<sp/>from<sp/>the<sp/>string<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(error_code.first,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1af10dacfa214e2575bb2e0ee407c242e0" kindref="member">xlnt::cell::type::error</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="cell__type_8hpp_1af10dacfa214e2575bb2e0ee407c242e0" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a5d2756df44b343fcb3bdfaf9b0b46440" kindref="member">xlnt_assert_throws_nothing</ref>(<ref refid="cell__type_8hpp_1af10dacfa214e2575bb2e0ee407c242e0" kindref="member">error</ref><sp/>=<sp/>cell.error());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(<ref refid="cell__type_8hpp_1af10dacfa214e2575bb2e0ee407c242e0" kindref="member">error</ref>,<sp/>error_code.first);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clearing<sp/>the<sp/>value<sp/>clears<sp/>the<sp/>error<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.error(),<sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>explicitly<sp/>set<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a5d2756df44b343fcb3bdfaf9b0b46440" kindref="member">xlnt_assert_throws_nothing</ref>(cell.error(error_code.first));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error2;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a5d2756df44b343fcb3bdfaf9b0b46440" kindref="member">xlnt_assert_throws_nothing</ref>(error2<sp/>=<sp/>cell.error());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(error2,<sp/>error_code.first);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_insert_datetime()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1datetime" kindref="compound">xlnt::datetime</ref>(2010,<sp/>7,<sp/>13,<sp/>6,<sp/>37,<sp/>41));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1af31813e2131200936cf54234db95808d" kindref="member">xlnt::cell::type::number</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a53bea0adf95652a03f86f2242f57ea65" kindref="member">xlnt_assert_delta</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(),<sp/>40372.27616898148,<sp/>1E-9);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.is_date());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.number_format().format_string()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yyyy-mm-dd<sp/>h:mm:ss&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_insert_date()</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1date" kindref="compound">xlnt::date</ref>(2010,<sp/>7,<sp/>13));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1af31813e2131200936cf54234db95808d" kindref="member">xlnt::cell::type::number</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>==<sp/>40372.0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.is_date());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.number_format().format_string()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yyyy-mm-dd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_insert_time()</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1time" kindref="compound">xlnt::time</ref>(1,<sp/>3));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1af31813e2131200936cf54234db95808d" kindref="member">xlnt::cell::type::number</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a53bea0adf95652a03f86f2242f57ea65" kindref="member">xlnt_assert_delta</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(),<sp/>0.04375,<sp/>1E-9);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.is_date());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.number_format().format_string()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;h:mm:ss&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_cell_formatted_as_date1()</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1datetime_1acda56e3033b42c71795d425d75207a76" kindref="member">xlnt::datetime::today</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.is_date());<sp/></highlight><highlight class="comment">//<sp/>disagree<sp/>with<sp/>openpyxl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_value());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_cell_formatted_as_date2()</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1datetime_1acda56e3033b42c71795d425d75207a76" kindref="member">xlnt::datetime::today</ref>());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;testme&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.is_date());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;std::string&gt;()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testme&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_cell_formatted_as_date3()</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1datetime_1acda56e3033b42c71795d425d75207a76" kindref="member">xlnt::datetime::today</ref>());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.is_date());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_illegal_characters()</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bytes<sp/>0x00<sp/>through<sp/>0x1F<sp/>inclusive<sp/>must<sp/>be<sp/>manually<sp/>escaped<sp/>in<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>illegal_chrs<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>11,<sp/>12,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,<sp/>24,<sp/>25,<sp/>26,<sp/>27,<sp/>28,<sp/>29,<sp/>30,<sp/>31};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>illegal_chrs)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(1,<sp/>i);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.value(str),<sp/><ref refid="classxlnt_1_1illegal__character" kindref="compound">xlnt::illegal_character</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(std::string(1,<sp/>33));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(std::string(1,<sp/>9));<sp/></highlight><highlight class="comment">//<sp/>Tab</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(std::string(1,<sp/>10));<sp/></highlight><highlight class="comment">//<sp/>Newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(std::string(1,<sp/>13));<sp/></highlight><highlight class="comment">//<sp/>Carriage<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;<sp/>Leading<sp/>and<sp/>trailing<sp/>spaces<sp/>are<sp/>legal<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>void<sp/>test_time_regex()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_timedelta()</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(<ref refid="structxlnt_1_1timedelta" kindref="compound">xlnt::timedelta</ref>(1,<sp/>3,<sp/>0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>==<sp/>1.125);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.data_type()<sp/>==<sp/><ref refid="cell__type_8hpp_1af31813e2131200936cf54234db95808d" kindref="member">xlnt::cell::type::number</ref>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.is_date());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.number_format().format_string()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[hh]:mm:ss&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_cell_offset()</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.offset(1,<sp/>2).reference()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_font()</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>font<sp/>=<sp/><ref refid="classxlnt_1_1font" kindref="compound">xlnt::font</ref>().<ref refid="classxlnt_1_1font_1af020e6a88b5c54897a1e51419c387716" kindref="member">bold</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.<ref refid="classxlnt_1_1font_1a93f5d76614cc39b7115e479f9374b748" kindref="member">font</ref>(font);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.format().font_applied());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.font(),<sp/>font);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_fill()</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1fill" kindref="compound">xlnt::fill</ref><sp/><ref refid="alignment_8hpp_1a23b3ecc690a716b53e9d0146b78d5ef2" kindref="member">fill</ref>(<ref refid="classxlnt_1_1pattern__fill" kindref="compound">xlnt::pattern_fill</ref>()</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>(<ref refid="fill_8hpp_1aeed30ac0624bf2e32be6fc5242eeb995" kindref="member">xlnt::pattern_fill_type::solid</ref>)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.foreground(<ref refid="classxlnt_1_1color_1a119bbab92440f4f4512423a8d1094e34" kindref="member">xlnt::color::red</ref>()));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.fill(<ref refid="alignment_8hpp_1a23b3ecc690a716b53e9d0146b78d5ef2" kindref="member">fill</ref>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.format().fill_applied());</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.fill(),<sp/><ref refid="alignment_8hpp_1a23b3ecc690a716b53e9d0146b78d5ef2" kindref="member">fill</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_border()</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1border" kindref="compound">xlnt::border</ref><sp/>border;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.<ref refid="classxlnt_1_1border_1a15918a1b698a3c66f6d5aef7a77a3427" kindref="member">border</ref>(border);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.format().border_applied());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.border(),<sp/>border);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_number_format()</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1number__format" kindref="compound">xlnt::number_format</ref><sp/>format(</highlight><highlight class="stringliteral">&quot;dd--hh--mm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.number_format(format);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.format().number_format_applied());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.number_format().format_string(),<sp/></highlight><highlight class="stringliteral">&quot;dd--hh--mm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_alignment()</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1alignment" kindref="compound">xlnt::alignment</ref><sp/>align;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align.<ref refid="classxlnt_1_1alignment_1aa4aa469b689cb63c2814db180d90ca5b" kindref="member">wrap</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.alignment(align);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.format().alignment_applied());</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.alignment(),<sp/>align);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_protection()</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_format());</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>protection<sp/>=<sp/><ref refid="classxlnt_1_1protection" kindref="compound">xlnt::protection</ref>().<ref refid="classxlnt_1_1protection_1aa36b344195cbfaa4def03d288484d08b" kindref="member">locked</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">).hidden(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.protection(protection);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.format().protection_applied());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.protection(),<sp/>protection);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_format());</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_format();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_format());</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_style()</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_style());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_style<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a5bff992e2fdc47cbf80ef242c95adf50" kindref="member">create_style</ref>(</highlight><highlight class="stringliteral">&quot;test_style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_style.number_format(<ref refid="classxlnt_1_1number__format_1ae4df0884a89566b2cedcd5fc404f5497" kindref="member">xlnt::number_format::date_ddmmyyyy</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.style(test_style);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_style());</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.style().number_format(),<sp/><ref refid="classxlnt_1_1number__format_1ae4df0884a89566b2cedcd5fc404f5497" kindref="member">xlnt::number_format::date_ddmmyyyy</ref>());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.style(),<sp/>test_style);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>other_style<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a5bff992e2fdc47cbf80ef242c95adf50" kindref="member">create_style</ref>(</highlight><highlight class="stringliteral">&quot;other_style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other_style.<ref refid="classxlnt_1_1style_1ab5f966638d2afb8adc01670656f55573" kindref="member">number_format</ref>(<ref refid="classxlnt_1_1number__format_1afeb4e4d39e0bef1568f132bc66e34dc0" kindref="member">xlnt::number_format::date_time2</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.style(</highlight><highlight class="stringliteral">&quot;other_style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.style().number_format(),<sp/><ref refid="classxlnt_1_1number__format_1afeb4e4d39e0bef1568f132bc66e34dc0" kindref="member">xlnt::number_format::date_time2</ref>());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.style(),<sp/>other_style);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last_style<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a5bff992e2fdc47cbf80ef242c95adf50" kindref="member">create_style</ref>(</highlight><highlight class="stringliteral">&quot;last_style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_style.<ref refid="classxlnt_1_1style_1ab5f966638d2afb8adc01670656f55573" kindref="member">number_format</ref>(<ref refid="classxlnt_1_1number__format_1a58d6ee69884870f8cd5a63a2e760f3bf" kindref="member">xlnt::number_format::percentage</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.style(last_style);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.style().number_format(),<sp/><ref refid="classxlnt_1_1number__format_1a58d6ee69884870f8cd5a63a2e760f3bf" kindref="member">xlnt::number_format::percentage</ref>());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.style(),<sp/>last_style);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.style(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1key__not__found" kindref="compound">xlnt::key_not_found</ref>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_style();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_style());</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.style(),<sp/><ref refid="classxlnt_1_1invalid__attribute" kindref="compound">xlnt::invalid_attribute</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_print()</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_string<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.to_string(),<sp/>stream_string);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(stream_string,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_string<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.to_string(),<sp/>stream_string);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(stream_string,<sp/></highlight><highlight class="stringliteral">&quot;FALSE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_string<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.to_string(),<sp/>stream_string);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(stream_string,<sp/></highlight><highlight class="stringliteral">&quot;TRUE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(1.234);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_string<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.to_string(),<sp/>stream_string);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(stream_string,<sp/></highlight><highlight class="stringliteral">&quot;1.234&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.error(</highlight><highlight class="stringliteral">&quot;#REF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_string<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.to_string(),<sp/>stream_string);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(stream_string,<sp/></highlight><highlight class="stringliteral">&quot;#REF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_string<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.to_string(),<sp/>stream_string);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(stream_string,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_values()</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(4));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(),<sp/>4);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;(),<sp/>3);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(4));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;(),<sp/>4);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(),<sp/>3);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3.14));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a53bea0adf95652a03f86f2242f57ea65" kindref="member">xlnt_assert_delta</ref>(cell.value&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),<sp/>3.14,<sp/>0.001);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(3.141592));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(),<sp/>3.141592);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell2<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell2.value(std::string(100000,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(cell2);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;std::string&gt;(),<sp/>std::string(32767,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_reference()</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structxlnt_1_1cell__reference__hash" kindref="compound">xlnt::cell_reference_hash</ref><sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1ad026cf5049f92f630821e78608fc0ce9" kindref="member">xlnt_assert_differs</ref>(<ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">)),<sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>1)));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(<ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">)),<sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(1,<sp/>2)));</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>((<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;B2&quot;</highlight><highlight class="normal">)),<sp/><ref refid="classxlnt_1_1range__reference" kindref="compound">xlnt::range_reference</ref>(</highlight><highlight class="stringliteral">&quot;A1:B2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A1&amp;&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1invalid__cell__reference" kindref="compound">xlnt::invalid_cell_reference</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1invalid__cell__reference" kindref="compound">xlnt::invalid_cell_reference</ref>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/><ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;$B$7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(ref.row_absolute(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(ref.column_absolute(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/><ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;$B7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(ref.row_absolute(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(ref.column_absolute(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/><ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;B$7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(ref.row_absolute(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(ref.column_absolute(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(<ref refid="classxlnt_1_1cell__reference" kindref="compound">xlnt::cell_reference</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_anchor()</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>().<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>anchor<sp/>=<sp/>cell.anchor();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(anchor.first,<sp/>0);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(anchor.second,<sp/>0);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_hyperlink()</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>().<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_hyperlink());</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.hyperlink(),<sp/><ref refid="classxlnt_1_1invalid__attribute" kindref="compound">xlnt::invalid_attribute</ref>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.hyperlink(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/><ref refid="classxlnt_1_1invalid__parameter" kindref="compound">xlnt::invalid_parameter</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>without<sp/>optional<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>link1(</highlight><highlight class="stringliteral">&quot;http://example.com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(link1);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.hyperlink().external());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().url(),<sp/>link1);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().relationship().target().to_string(),<sp/>link1);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>link1);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>with<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>link2(</highlight><highlight class="stringliteral">&quot;http://example2.com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>display_txt(</highlight><highlight class="stringliteral">&quot;notaurl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(link2,<sp/>display_txt);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.hyperlink().external());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().url(),<sp/>link2);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().relationship().target().to_string(),<sp/>link2);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>display_txt);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relative<sp/>(local)<sp/>url</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>local(</highlight><highlight class="stringliteral">&quot;../test_local&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(local);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.hyperlink().external());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().url(),<sp/>local);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().relationship().target().to_string(),<sp/>local);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cell_test_val<sp/>=<sp/>123;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(cell_test_val);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cell_value_str<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(cell_test_val);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(link2,<sp/>display_txt);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(),<sp/>123);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>cell_value_str);<sp/></highlight><highlight class="comment">//<sp/>display<sp/>text<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cell<sp/>overload<sp/>without<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>cell_target_str(</highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell_target<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>().<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(cell_target_str);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>link3<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>().<ref refid="classxlnt_1_1worksheet_1ad6b664b8fd51d88bb50b6aca9870ac07" kindref="member">title</ref>()<sp/>+<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal"><sp/>+<sp/>cell_target_str;<sp/></highlight><highlight class="comment">//<sp/>Sheet1!A2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(cell_target);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.hyperlink().external());</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().target_range(),<sp/>link3);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>link3);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cell<sp/>overload<sp/>with<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(cell_target,<sp/>display_txt);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.hyperlink().external());</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().target_range(),<sp/>link3);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>display_txt);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(cell_test_val);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(cell_target,<sp/>display_txt);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(),<sp/>123);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>cell_value_str);<sp/></highlight><highlight class="comment">//<sp/>display<sp/>text<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>overload<sp/>without<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>range_target_str(</highlight><highlight class="stringliteral">&quot;A2:A5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1range" kindref="compound">xlnt::range</ref><sp/>range_target(wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>(),<sp/><ref refid="classxlnt_1_1range__reference" kindref="compound">xlnt::range_reference</ref>(range_target_str));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>link4<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>().<ref refid="classxlnt_1_1worksheet_1ad6b664b8fd51d88bb50b6aca9870ac07" kindref="member">title</ref>()<sp/>+<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal"><sp/>+<sp/>range_target_str;<sp/></highlight><highlight class="comment">//<sp/>Sheet1!A2:A5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(range_target);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.hyperlink().external());</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().target_range(),<sp/>link4);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>link4);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>overload<sp/>with<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(range_target,<sp/>display_txt);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_hyperlink());</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.hyperlink().external());</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().target_range(),<sp/>link4);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>display_txt);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.value(cell_test_val);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.hyperlink(range_target,<sp/>display_txt);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.value&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(),<sp/>123);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.hyperlink().display(),<sp/>cell_value_str);<sp/></highlight><highlight class="comment">//<sp/>display<sp/>text<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_value();</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_comment()</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_comment());</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.comment(),<sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.comment(<ref refid="classxlnt_1_1comment" kindref="compound">xlnt::comment</ref>(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;author&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell.has_comment());</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.comment(),<sp/><ref refid="classxlnt_1_1comment" kindref="compound">xlnt::comment</ref>(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;author&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.clear_comment();</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!cell.has_comment());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aae9b7a77c74300ef311f9fb705f46ebb" kindref="member">xlnt_assert_throws</ref>(cell.comment(),<sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1comment" kindref="compound">xlnt::comment</ref><sp/>comment_with_size(</highlight><highlight class="stringliteral">&quot;test<sp/>comment&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;author&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment_with_size.<ref refid="classxlnt_1_1comment_1a671bf5e9bdaaa0f4103450d600fffc75" kindref="member">size</ref>(1000,<sp/>30);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.comment(comment_with_size);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell.comment(),<sp/>comment_with_size);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copy_and_compare()</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell1<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell2<sp/>=<sp/>ws.cell(</highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell1,<sp/>cell1);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell2,<sp/>cell2);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1ad026cf5049f92f630821e78608fc0ce9" kindref="member">xlnt_assert_differs</ref>(cell1,<sp/>cell2);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1ad026cf5049f92f630821e78608fc0ce9" kindref="member">xlnt_assert_differs</ref>(cell2,<sp/>cell1);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nullptr<sp/>equality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>cell1);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(cell1<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell1.value(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>cell1));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1a8a16888c2ad6a9ed395f0178f96d2aaa" kindref="member">xlnt_assert</ref>(!(cell1<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1cell" kindref="compound">xlnt::cell</ref><sp/>cell3(cell1);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell1,<sp/>cell3);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell3<sp/>=<sp/>cell2;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell2,<sp/>cell3);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_cell_phonetic_properties()</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1workbook" kindref="compound">xlnt::workbook</ref><sp/>wb;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>wb.<ref refid="classxlnt_1_1workbook_1a611b6b2587e8530a81dd086d0eb0b11b" kindref="member">active_sheet</ref>();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell1<sp/>=<sp/>ws.<ref refid="classxlnt_1_1worksheet_1aae88f49f4ddcc1e24b2e6c1841c35018" kindref="member">cell</ref>(</highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell1.phonetics_visible(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell1.show_phonetics(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell1.phonetics_visible(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell1.show_phonetics(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions_8hpp_1aa52c020774e7cdb15a789ad2711b1779" kindref="member">xlnt_assert_equals</ref>(cell1.phonetics_visible(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal">};</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classcell__test__suite" kindref="compound">cell_test_suite</ref><sp/>x{};</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/tests/cell/cell_test_suite.cpp"/>
  </compounddef>
</doxygen>
