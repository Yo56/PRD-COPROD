<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell" kind="page">
    <compoundname>md_C__Users_nouet_Documents_Cours_5A_Dev_PRD_PrdCoprod_PrdCoprod_libs_xlnt_1_5_0_docs_api_cell</compoundname>
    <title>cell</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md23">
<title>&lt;tt&gt;using xlnt::cell::type =  cell_typeundefined&lt;/tt&gt;</title>
<para>Alias xlnt::cell_type to <ref refid="classxlnt_1_1cell_1a982e2b7d6cba0829f1f77631840f957e" kindref="member">xlnt::cell::type</ref> since it looks nicer. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md24">
<title>&lt;tt&gt;friend class detail::xlsx_consumerundefined&lt;/tt&gt;</title>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md25">
<title>&lt;tt&gt;friend class detail::xlsx_producerundefined&lt;/tt&gt;</title>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md26">
<title>&lt;tt&gt;friend struct detail::cell_implundefined&lt;/tt&gt;</title>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md27">
<title>&lt;tt&gt;static const std::unordered_map&lt;std::string, int&gt;&amp; xlnt::cell::error_codes()&lt;/tt&gt;</title>
<para>Returns a map of error strings such as #DIV/0! and their associated indices. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md28">
<title>&lt;tt&gt;xlnt::cell::cell(const cell &amp;)=default&lt;/tt&gt;</title>
<para>Default copy constructor. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md29">
<title>&lt;tt&gt;bool xlnt::cell::has_value() const&lt;/tt&gt;</title>
<para>Returns true if value has been set and has not been cleared using cell::clear_value(). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md30">
<title>&lt;tt&gt;T xlnt::cell::value() const&lt;/tt&gt;</title>
<para>Returns the value of this cell as an instance of type T. Overloads exist for most C++ fundamental types like bool, int, etc. as well as for std::string and xlnt datetime types: date, time, datetime, and timedelta. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md31">
<title>&lt;tt&gt;void xlnt::cell::clear_value()&lt;/tt&gt;</title>
<para>Makes this cell have a value of type null. All other cell attributes are retained. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md32">
<title>&lt;tt&gt;void xlnt::cell::value(std::nullptr_t)&lt;/tt&gt;</title>
<para>Sets the type of this cell to null. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md33">
<title>&lt;tt&gt;void xlnt::cell::value(bool boolean_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given boolean value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md34">
<title>&lt;tt&gt;void xlnt::cell::value(int int_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md35">
<title>&lt;tt&gt;void xlnt::cell::value(unsigned int int_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md36">
<title>&lt;tt&gt;void xlnt::cell::value(long long int int_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md37">
<title>&lt;tt&gt;void xlnt::cell::value(unsigned long long int int_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md38">
<title>&lt;tt&gt;void xlnt::cell::value(float float_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md39">
<title>&lt;tt&gt;void xlnt::cell::value(double float_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md40">
<title>&lt;tt&gt;void xlnt::cell::value(long double float_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md41">
<title>&lt;tt&gt;void xlnt::cell::value(const date &amp;date_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md42">
<title>&lt;tt&gt;void xlnt::cell::value(const time &amp;time_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md43">
<title>&lt;tt&gt;void xlnt::cell::value(const datetime &amp;datetime_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md44">
<title>&lt;tt&gt;void xlnt::cell::value(const timedelta &amp;timedelta_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md45">
<title>&lt;tt&gt;void xlnt::cell::value(const std::string &amp;string_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md46">
<title>&lt;tt&gt;void xlnt::cell::value(const char *string_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md47">
<title>&lt;tt&gt;void xlnt::cell::value(const rich_text &amp;text_value)&lt;/tt&gt;</title>
<para>Sets the value of this cell to the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md48">
<title>&lt;tt&gt;void xlnt::cell::value(const cell other_cell)&lt;/tt&gt;</title>
<para>Sets the value and formatting of this cell to that of other_cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md49">
<title>&lt;tt&gt;void xlnt::cell::value(const std::string &amp;string_value, bool infer_type)&lt;/tt&gt;</title>
<para>Analyzes string_value to determine its type, convert it to that type, and set the value of this cell to that converted value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md50">
<title>&lt;tt&gt;type xlnt::cell::data_type() const&lt;/tt&gt;</title>
<para>Returns the type of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md51">
<title>&lt;tt&gt;void xlnt::cell::data_type(type t)&lt;/tt&gt;</title>
<para>Sets the type of this cell. This should usually be done indirectly by setting the value of the cell to a value of that type. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md52">
<title>&lt;tt&gt;bool xlnt::cell::garbage_collectible() const&lt;/tt&gt;</title>
<para>There&apos;s no reason to keep a cell which has no value and is not a placeholder. Returns true if this cell has no value, style, isn&apos;t merged, etc. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md53">
<title>&lt;tt&gt;bool xlnt::cell::is_date() const&lt;/tt&gt;</title>
<para>Returns true iff this cell&apos;s number format matches a date format. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md54">
<title>&lt;tt&gt;cell_reference xlnt::cell::reference() const&lt;/tt&gt;</title>
<para>Returns a cell_reference that points to the location of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md55">
<title>&lt;tt&gt;column_t xlnt::cell::column() const&lt;/tt&gt;</title>
<para>Returns the column of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md56">
<title>&lt;tt&gt;row_t xlnt::cell::row() const&lt;/tt&gt;</title>
<para>Returns the row of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md57">
<title>&lt;tt&gt;std::pair&lt;int, int&gt; xlnt::cell::anchor() const&lt;/tt&gt;</title>
<para>Returns the location of this cell as an ordered pair (left, top). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md58">
<title>&lt;tt&gt;std::string xlnt::cell::hyperlink() const&lt;/tt&gt;</title>
<para>Returns the URL of this cell&apos;s hyperlink. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md59">
<title>&lt;tt&gt;void xlnt::cell::hyperlink(const std::string &amp;url)&lt;/tt&gt;</title>
<para>Adds a hyperlink to this cell pointing to the URL of the given value. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md60">
<title>&lt;tt&gt;void xlnt::cell::hyperlink(const std::string &amp;url, const std::string &amp;display)&lt;/tt&gt;</title>
<para>Adds a hyperlink to this cell pointing to the URI of the given value and sets the text value of the cell to the given parameter. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md61">
<title>&lt;tt&gt;void xlnt::cell::hyperlink(xlnt::cell target)&lt;/tt&gt;</title>
<para>Adds an internal hyperlink to this cell pointing to the given cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md62">
<title>&lt;tt&gt;bool xlnt::cell::has_hyperlink() const&lt;/tt&gt;</title>
<para>Returns true if this cell has a hyperlink set. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md63">
<title>&lt;tt&gt;class alignment xlnt::cell::computed_alignment() const&lt;/tt&gt;</title>
<para>Returns the alignment that should be used when displaying this cell graphically based on the workbook default, the cell-level format, and the named style applied to the cell in that order. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md64">
<title>&lt;tt&gt;class border xlnt::cell::computed_border() const&lt;/tt&gt;</title>
<para>Returns the border that should be used when displaying this cell graphically based on the workbook default, the cell-level format, and the named style applied to the cell in that order. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md65">
<title>&lt;tt&gt;class fill xlnt::cell::computed_fill() const&lt;/tt&gt;</title>
<para>Returns the fill that should be used when displaying this cell graphically based on the workbook default, the cell-level format, and the named style applied to the cell in that order. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md66">
<title>&lt;tt&gt;class font xlnt::cell::computed_font() const&lt;/tt&gt;</title>
<para>Returns the font that should be used when displaying this cell graphically based on the workbook default, the cell-level format, and the named style applied to the cell in that order. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md67">
<title>&lt;tt&gt;class number_format xlnt::cell::computed_number_format() const&lt;/tt&gt;</title>
<para>Returns the number format that should be used when displaying this cell graphically based on the workbook default, the cell-level format, and the named style applied to the cell in that order. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md68">
<title>&lt;tt&gt;class protection xlnt::cell::computed_protection() const&lt;/tt&gt;</title>
<para>Returns the protection that should be used when displaying this cell graphically based on the workbook default, the cell-level format, and the named style applied to the cell in that order. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md69">
<title>&lt;tt&gt;bool xlnt::cell::has_format() const&lt;/tt&gt;</title>
<para>Returns true if this cell has had a format applied to it. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md70">
<title>&lt;tt&gt;const class format xlnt::cell::format() const&lt;/tt&gt;</title>
<para>Returns the format applied to this cell. If this cell has no format, an invalid_attribute exception will be thrown. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md71">
<title>&lt;tt&gt;void xlnt::cell::format(const class format new_format)&lt;/tt&gt;</title>
<para>Applies the cell-level formatting of new_format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md72">
<title>&lt;tt&gt;void xlnt::cell::clear_format()&lt;/tt&gt;</title>
<para>Removes the cell-level formatting from this cell. This doesn&apos;t affect the style that may also be applied to the cell. Throws an invalid_attribute exception if no format is applied. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md73">
<title>&lt;tt&gt;class number_format xlnt::cell::number_format() const&lt;/tt&gt;</title>
<para>Returns the number format of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md74">
<title>&lt;tt&gt;void xlnt::cell::number_format(const class number_format &amp;format)&lt;/tt&gt;</title>
<para>Creates a new format in the workbook, sets its number_format to the given format, and applies the format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md75">
<title>&lt;tt&gt;class font xlnt::cell::font() const&lt;/tt&gt;</title>
<para>Returns the font applied to the text in this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md76">
<title>&lt;tt&gt;void xlnt::cell::font(const class font &amp;font_)&lt;/tt&gt;</title>
<para>Creates a new format in the workbook, sets its font to the given font, and applies the format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md77">
<title>&lt;tt&gt;class fill xlnt::cell::fill() const&lt;/tt&gt;</title>
<para>Returns the fill applied to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md78">
<title>&lt;tt&gt;void xlnt::cell::fill(const class fill &amp;fill_)&lt;/tt&gt;</title>
<para>Creates a new format in the workbook, sets its fill to the given fill, and applies the format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md79">
<title>&lt;tt&gt;class border xlnt::cell::border() const&lt;/tt&gt;</title>
<para>Returns the border of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md80">
<title>&lt;tt&gt;void xlnt::cell::border(const class border &amp;border_)&lt;/tt&gt;</title>
<para>Creates a new format in the workbook, sets its border to the given border, and applies the format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md81">
<title>&lt;tt&gt;class alignment xlnt::cell::alignment() const&lt;/tt&gt;</title>
<para>Returns the alignment of the text in this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md82">
<title>&lt;tt&gt;void xlnt::cell::alignment(const class alignment &amp;alignment_)&lt;/tt&gt;</title>
<para>Creates a new format in the workbook, sets its alignment to the given alignment, and applies the format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md83">
<title>&lt;tt&gt;class protection xlnt::cell::protection() const&lt;/tt&gt;</title>
<para>Returns the protection of this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md84">
<title>&lt;tt&gt;void xlnt::cell::protection(const class protection &amp;protection_)&lt;/tt&gt;</title>
<para>Creates a new format in the workbook, sets its protection to the given protection, and applies the format to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md85">
<title>&lt;tt&gt;bool xlnt::cell::has_style() const&lt;/tt&gt;</title>
<para>Returns true if this cell has had a style applied to it. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md86">
<title>&lt;tt&gt;class style xlnt::cell::style()&lt;/tt&gt;</title>
<para>Returns a wrapper pointing to the named style applied to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md87">
<title>&lt;tt&gt;const class style xlnt::cell::style() const&lt;/tt&gt;</title>
<para>Returns a wrapper pointing to the named style applied to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md88">
<title>&lt;tt&gt;void xlnt::cell::style(const class style &amp;new_style)&lt;/tt&gt;</title>
<para>Sets the named style applied to this cell to a style named style_name. Equivalent to style(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">new_style.name()</ref>). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md89">
<title>&lt;tt&gt;void xlnt::cell::style(const std::string &amp;style_name)&lt;/tt&gt;</title>
<para>Sets the named style applied to this cell to a style named style_name. If this style has not been previously created in the workbook, a key_not_found exception will be thrown. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md90">
<title>&lt;tt&gt;void xlnt::cell::clear_style()&lt;/tt&gt;</title>
<para>Removes the named style from this cell. An invalid_attribute exception will be thrown if this cell has no style. This will not affect the cell format of the cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md91">
<title>&lt;tt&gt;std::string xlnt::cell::formula() const&lt;/tt&gt;</title>
<para>Returns the string representation of the formula applied to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md92">
<title>&lt;tt&gt;void xlnt::cell::formula(const std::string &amp;formula)&lt;/tt&gt;</title>
<para>Sets the formula of this cell to the given value. This formula string should begin with &apos;=&apos;. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md93">
<title>&lt;tt&gt;void xlnt::cell::clear_formula()&lt;/tt&gt;</title>
<para>Removes the formula from this cell. After this is called, has_formula() will return false. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md94">
<title>&lt;tt&gt;bool xlnt::cell::has_formula() const&lt;/tt&gt;</title>
<para>Returns true if this cell has had a formula applied to it. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md95">
<title>&lt;tt&gt;std::string xlnt::cell::to_string() const&lt;/tt&gt;</title>
<para>Returns a string representing the value of this cell. If the data type is not a string, it will be converted according to the number format. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md96">
<title>&lt;tt&gt;bool xlnt::cell::is_merged() const&lt;/tt&gt;</title>
<para>Returns true iff this cell has been merged with one or more surrounding cells. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md97">
<title>&lt;tt&gt;void xlnt::cell::merged(bool merged)&lt;/tt&gt;</title>
<para>Makes this a merged cell iff merged is true. Generally, this shouldn&apos;t be called directly. Instead, use worksheet::merge_cells on its parent worksheet. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md98">
<title>&lt;tt&gt;std::string xlnt::cell::error() const&lt;/tt&gt;</title>
<para>Returns the error string that is stored in this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md99">
<title>&lt;tt&gt;void xlnt::cell::error(const std::string &amp;error)&lt;/tt&gt;</title>
<para>Directly assigns the value of this cell to be the given error. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md100">
<title>&lt;tt&gt;cell xlnt::cell::offset(int column, int row)&lt;/tt&gt;</title>
<para>Returns a cell from this cell&apos;s parent workbook at a relative offset given by the parameters. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md101">
<title>&lt;tt&gt;class worksheet xlnt::cell::worksheet()&lt;/tt&gt;</title>
<para>Returns the worksheet that owns this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md102">
<title>&lt;tt&gt;const class worksheet xlnt::cell::worksheet() const&lt;/tt&gt;</title>
<para>Returns the worksheet that owns this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md103">
<title>&lt;tt&gt;class workbook&amp; xlnt::cell::workbook()&lt;/tt&gt;</title>
<para>Returns the workbook of the worksheet that owns this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md104">
<title>&lt;tt&gt;const class workbook&amp; xlnt::cell::workbook() const&lt;/tt&gt;</title>
<para>Returns the workbook of the worksheet that owns this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md105">
<title>&lt;tt&gt;calendar xlnt::cell::base_date() const&lt;/tt&gt;</title>
<para>Returns the base date of the parent workbook. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md106">
<title>&lt;tt&gt;std::string xlnt::cell::check_string(const std::string &amp;to_check)&lt;/tt&gt;</title>
<para>Returns to_check after verifying and fixing encoding, size, and illegal characters. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md107">
<title>&lt;tt&gt;bool xlnt::cell::has_comment()&lt;/tt&gt;</title>
<para>Returns true if this cell has a comment applied. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md108">
<title>&lt;tt&gt;void xlnt::cell::clear_comment()&lt;/tt&gt;</title>
<para>Deletes the comment applied to this cell if it exists. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md109">
<title>&lt;tt&gt;class comment xlnt::cell::comment()&lt;/tt&gt;</title>
<para>Gets the comment applied to this cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md110">
<title>&lt;tt&gt;void xlnt::cell::comment(const std::string &amp;text, const std::string &amp;author=&quot;Microsoft Office User&quot;)&lt;/tt&gt;</title>
<para>Creates a new comment with the given text and optional author and applies it to the cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md111">
<title>&lt;tt&gt;void xlnt::cell::comment(const std::string &amp;comment_text, const class font &amp;comment_font, const std::string &amp;author=&quot;Microsoft Office User&quot;)&lt;/tt&gt;</title>
<para>Creates a new comment with the given text, formatting, and optional author and applies it to the cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md112">
<title>&lt;tt&gt;void xlnt::cell::comment(const class comment &amp;new_comment)&lt;/tt&gt;</title>
<para>Apply the comment provided as the only argument to the cell. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md113">
<title>&lt;tt&gt;double xlnt::cell::width() const&lt;/tt&gt;</title>
<para>Returns the width of this cell in pixels. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md114">
<title>&lt;tt&gt;double xlnt::cell::height() const&lt;/tt&gt;</title>
<para>Returns the height of this cell in pixels. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md115">
<title>&lt;tt&gt;cell&amp; xlnt::cell::operator=(const cell &amp;rhs)&lt;/tt&gt;</title>
<para>Makes this cell interally point to rhs. The cell data originally pointed to by this cell will be unchanged. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md116">
<title>&lt;tt&gt;bool xlnt::cell::operator==(const cell &amp;comparand) const&lt;/tt&gt;</title>
<para>Returns true if this cell the same cell as comparand (compared by reference). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_1autotoc_md117">
<title>&lt;tt&gt;bool xlnt::cell::operator==(std::nullptr_t) const&lt;/tt&gt;</title>
<para>Returns true if this cell is uninitialized. </para>
</sect1>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/docs/api/cell.md"/>
  </compounddef>
</doxygen>
