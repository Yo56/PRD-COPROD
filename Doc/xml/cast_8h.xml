<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="cast_8h" kind="file" language="C++">
    <compoundname>cast.h</compoundname>
    <includes refid="pytypes_8h" local="yes">pytypes.h</includes>
    <includes refid="typeid_8h" local="yes">typeid.h</includes>
    <includes refid="descr_8h" local="yes">descr.h</includes>
    <includes local="no">array</includes>
    <includes local="no">limits</includes>
    <includes local="no">tuple</includes>
    <includedby refid="attr_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</includedby>
    <incdepgraph>
      <node id="25">
        <label>limits</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="23">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="18">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>frameobject.h</label>
      </node>
      <node id="21">
        <label>cstdio</label>
      </node>
      <node id="20">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tuple</label>
      </node>
      <node id="4">
        <label>Python.h</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="6">
        <label>pythread.h</label>
      </node>
      <node id="19">
        <label>utility</label>
      </node>
      <node id="24">
        <label>array</label>
      </node>
      <node id="2">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="9">
        <label>forward_list</label>
      </node>
      <node id="8">
        <label>cstring</label>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
      <node id="16">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="15">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="14">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1type__info" prot="public">pybind11::detail::type_info</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1loader__life__support" prot="public">pybind11::detail::loader_life_support</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1value__and__holder" prot="public">pybind11::detail::value_and_holder</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1values__and__holders" prot="public">pybind11::detail::values_and_holders</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" prot="public">pybind11::detail::values_and_holders::iterator</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster__generic" prot="public">pybind11::detail::type_caster_generic</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__copy__constructible" prot="public">pybind11::detail::is_copy_constructible</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__copy__constructible_3_01_container_00_01enable__if__t_3_01std_1_9ff39b5048caffb73cf754c26d3885c0" prot="public">pybind11::detail::is_copy_constructible&lt; Container, enable_if_t&lt; std::is_copy_constructible&lt; Container &gt;::value &amp;&amp;std::is_same&lt; typename Container::value_type &amp;, typename Container::reference &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster__base" prot="public">pybind11::detail::type_caster_base</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster" prot="public">pybind11::detail::type_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::reference_wrapper&lt; type &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad" prot="public">pybind11::detail::type_caster&lt; T, enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value &amp;&amp;!is_std_char_type&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1void__caster" prot="public">pybind11::detail::void_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01void__type_01_4" prot="public">pybind11::detail::type_caster&lt; void_type &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4" prot="public">pybind11::detail::type_caster&lt; void &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1nullptr__t_01_4" prot="public">pybind11::detail::type_caster&lt; std::nullptr_t &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4" prot="public">pybind11::detail::type_caster&lt; bool &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1string__caster" prot="public">pybind11::detail::string_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1basic__string_3_01_char_t_00_01_traits_00_0191d9cb07ed4985c792573463c150208f" prot="public">pybind11::detail::type_caster&lt; std::basic_string&lt; CharT, Traits, Allocator &gt;, enable_if_t&lt; is_std_char_type&lt; CharT &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33" prot="public">pybind11::detail::type_caster&lt; CharT, enable_if_t&lt; is_std_char_type&lt; CharT &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1tuple__caster" prot="public">pybind11::detail::tuple_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1holder__helper" prot="public">pybind11::detail::holder_helper</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1copyable__holder__caster" prot="public">pybind11::detail::copyable_holder_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__only__holder__caster" prot="public">pybind11::detail::move_only_holder_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1unique__ptr_3_01type_00_01deleter_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; std::unique_ptr&lt; type, deleter &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1always__construct__holder" prot="public">pybind11::detail::always_construct_holder</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__holder__type" prot="public">pybind11::detail::is_holder_type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1is__holder__type_3_01base_00_01std_1_1unique__ptr_3_01base_00_01deleter_01_4_01_4" prot="public">pybind11::detail::is_holder_type&lt; base, std::unique_ptr&lt; base, deleter &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name" prot="public">pybind11::detail::handle_type_name</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01bytes_01_4" prot="public">pybind11::detail::handle_type_name&lt; bytes &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01args_01_4" prot="public">pybind11::detail::handle_type_name&lt; args &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1handle__type__name_3_01kwargs_01_4" prot="public">pybind11::detail::handle_type_name&lt; kwargs &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1pyobject__caster" prot="public">pybind11::detail::pyobject_caster</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; T, enable_if_t&lt; is_pyobject&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__always" prot="public">pybind11::detail::move_always</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__always_3_01_t_00_01enable__if__t_3_01all__of_3_01move__is__pla1a566c301e5c8e35e666d20f06691d43" prot="public">pybind11::detail::move_always&lt; T, enable_if_t&lt; all_of&lt; move_is_plain_type&lt; T &gt;, negation&lt; std::is_copy_constructible&lt; T &gt; &gt;, std::is_move_constructible&lt; T &gt;, std::is_same&lt; decltype(std::declval&lt; make_caster&lt; T &gt;&gt;().operator T&amp;()), T &amp; &gt;&gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__if__unreferenced" prot="public">pybind11::detail::move_if_unreferenced</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1move__if__unreferenced_3_01_t_00_01enable__if__t_3_01all__of_3_01movedeb75add531442492ce7b7efbb662fd" prot="public">pybind11::detail::move_if_unreferenced&lt; T, enable_if_t&lt; all_of&lt; move_is_plain_type&lt; T &gt;, negation&lt; move_always&lt; T &gt; &gt;, std::is_move_constructible&lt; T &gt;, std::is_same&lt; decltype(std::declval&lt; make_caster&lt; T &gt;&gt;().operator T&amp;()), T &amp; &gt;&gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1return__value__policy__override" prot="public">pybind11::detail::return_value_policy_override</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1overload__unused" prot="public">pybind11::detail::overload_unused</innerclass>
    <innerclass refid="structpybind11_1_1arg" prot="public">pybind11::arg</innerclass>
    <innerclass refid="structpybind11_1_1arg__v" prot="public">pybind11::arg_v</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1function__call" prot="public">pybind11::detail::function_call</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1argument__loader" prot="public">pybind11::detail::argument_loader</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1simple__collector" prot="public">pybind11::detail::simple_collector</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1unpacking__collector" prot="public">pybind11::detail::unpacking_collector</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <innernamespace refid="namespacepybind11_1_1literals" inline="yes">pybind11::literals</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="cast_8h_1a026b55873d04f38f5ae026c900d16160" prot="public" static="no">
        <name>PYBIND11_TYPE_CASTER</name>
        <param><defname>type</defname></param>
        <param><defname>py_name</defname></param>
        <initializer>    protected: \
        type value; \
    public: \
        static <ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref> name() { return type_descr(py_name); } \
        template &lt;typename T_, enable_if_t&lt;std::is_same&lt;type, remove_cv_t&lt;T_&gt;&gt;::value, int&gt; = 0&gt; \
        static handle cast(T_ *src, return_value_policy policy, handle parent) { \
            if (!src) return <ref refid="page__setup_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>().release(); \
            if (policy == return_value_policy::take_ownership) { \
                auto h = cast(std::move(*src), policy, parent); delete src; return h; \
            } else { \
                return cast(*src, policy, parent); \
            } \
        } \
        operator type*() { return &amp;value; } \
        operator type&amp;() { return value; } \
        operator type&amp;&amp;() &amp;&amp; { return std::move(value); } \
        template &lt;typename T_&gt; using cast_op_type = <ref refid="namespacepybind11_1_1detail_1a3e4f52c827f0391c3ca8166590c559c9" kindref="member">pybind11::detail::movable_cast_op_type</ref>&lt;T_&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="890" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cast_8h_1a5711cbddf22538bf081fba49042adea9" prot="public" static="no">
        <name>PYBIND11_DECLARE_HOLDER_TYPE</name>
        <param><defname>type</defname></param>
        <param><defname>holder_type</defname></param>
        <param><defname>...</defname></param>
        <initializer>    namespace pybind11 { namespace detail { \
    template &lt;typename type&gt; \
    struct always_construct_holder&lt;holder_type&gt; : always_construct_holder&lt;void, ##__VA_ARGS__&gt;  { }; \
    template &lt;typename type&gt; \
    class type_caster&lt;holder_type, enable_if_t&lt;!is_shared_ptr&lt;holder_type&gt;::value&gt;&gt; \
        : public type_caster_holder&lt;type, holder_type&gt; { }; \
    }}</initializer>
        <briefdescription>
<para>Create a specialization for custom holder types (silently ignores std::shared_ptr) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="1444" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="1444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cast_8h_1a33ae1fb2eabdbe5d3a6d62435ce8d0a5" prot="public" static="no">
        <name>PYBIND11_MAKE_OPAQUE</name>
        <param><defname>Type</defname></param>
        <initializer>    namespace pybind11 { namespace detail { \
        template&lt;&gt; class type_caster&lt;Type&gt; : public type_caster_base&lt;Type&gt; { }; \
    }}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" line="2010" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h" bodystart="2010" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/cast.h:<sp/>Partial<sp/>template<sp/>specializations<sp/>to<sp/>cast<sp/>between</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>C++<sp/>and<sp/>Python<sp/>types</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pytypes_8h" kindref="compound">pytypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="typeid_8h" kindref="compound">typeid.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="descr_8h" kindref="compound">descr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYBIND11_CPP17)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__has_include)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>__has_include(&lt;string_view&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PYBIND11_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PYBIND11_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PYBIND11_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1aee7739636a3f44597b68656d476bb41e" kindref="member">make_static_property_type</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1ae99453a6a2f0d9cfa4bc1500a150e016" kindref="member">make_default_metaclass</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PyObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a4aad17fe209f5c6187910481e33654f1" kindref="member">make_object_base_type</ref>(PyTypeObject<sp/>*metaclass);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">value_and_holder;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structpybind11_1_1detail_1_1type__info" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref><sp/>{</highlight></codeline>
<codeline lineno="43" refid="structpybind11_1_1detail_1_1type__info_1a99cc6ada480e9088a9c9b1d1e5e98480" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*<ref refid="structpybind11_1_1detail_1_1type__info_1a99cc6ada480e9088a9c9b1d1e5e98480" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="44" refid="structpybind11_1_1detail_1_1type__info_1a0f1662694ef977531d38386c1cbb4423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<ref refid="structpybind11_1_1detail_1_1type__info_1a0f1662694ef977531d38386c1cbb4423" kindref="member">cpptype</ref>;</highlight></codeline>
<codeline lineno="45" refid="structpybind11_1_1detail_1_1type__info_1a14b9bb2f87ba247377362d191cb841bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>type_size,<sp/><ref refid="structpybind11_1_1detail_1_1type__info_1a14b9bb2f87ba247377362d191cb841bc" kindref="member">holder_size_in_ptrs</ref>;</highlight></codeline>
<codeline lineno="46" refid="structpybind11_1_1detail_1_1type__info_1a68b343d8b2a5643ee0a164cbae04fee7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*operator_new)(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>);</highlight></codeline>
<codeline lineno="47" refid="structpybind11_1_1detail_1_1type__info_1a45e773df98848981ad62ddf2e0f43d29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*init_holder)(<ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="48" refid="structpybind11_1_1detail_1_1type__info_1ac2d391b653920f0b0506001042dffed2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*dealloc)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>&amp;v_h);</highlight></codeline>
<codeline lineno="49" refid="structpybind11_1_1detail_1_1type__info_1ad3d633639578683fa632798b1b10e7dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PyObject<sp/>*(*)(PyObject<sp/>*,<sp/>PyTypeObject<sp/>*)&gt;<sp/><ref refid="structpybind11_1_1detail_1_1type__info_1ad3d633639578683fa632798b1b10e7dc" kindref="member">implicit_conversions</ref>;</highlight></codeline>
<codeline lineno="50" refid="structpybind11_1_1detail_1_1type__info_1adb3468fb4277748bf2c6d38c2ea78564" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&gt;&gt;<sp/><ref refid="structpybind11_1_1detail_1_1type__info_1adb3468fb4277748bf2c6d38c2ea78564" kindref="member">implicit_casts</ref>;</highlight></codeline>
<codeline lineno="51" refid="structpybind11_1_1detail_1_1type__info_1a2a80b7c9d9fb2689b4337cb358e02bcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool<sp/>(*)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;)&gt;<sp/>*direct_conversions;</highlight></codeline>
<codeline lineno="52" refid="structpybind11_1_1detail_1_1type__info_1abdcdf07a7a705cd030d51c0a6630bd69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref><sp/>*(*get_buffer)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53" refid="structpybind11_1_1detail_1_1type__info_1a3fbbb3a3a5b8547ebfa5d44ea8362baa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*get_buffer_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>simple<sp/>type<sp/>never<sp/>occurs<sp/>as<sp/>a<sp/>(direct<sp/>or<sp/>indirect)<sp/>parent</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>a<sp/>class<sp/>that<sp/>makes<sp/>use<sp/>of<sp/>multiple<sp/>inheritance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structpybind11_1_1detail_1_1type__info_1a71e89bf681bfd89635fb82502b515a5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info_1a71e89bf681bfd89635fb82502b515a5a" kindref="member">simple_type</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>True<sp/>if<sp/>there<sp/>is<sp/>no<sp/>multiple<sp/>inheritance<sp/>in<sp/>this<sp/>type&apos;s<sp/>inheritance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structpybind11_1_1detail_1_1type__info_1ad4612f2c54e08f420e9112cfc899cfc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info_1ad4612f2c54e08f420e9112cfc899cfc1" kindref="member">simple_ancestors</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>base<sp/>vs<sp/>derived<sp/>holder_type<sp/>checks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structpybind11_1_1detail_1_1type__info_1a0e7c470db1bd445ea92006573f5bb274" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info_1a0e7c470db1bd445ea92006573f5bb274" kindref="member">default_holder</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>static<sp/>internals<sp/>pointer<sp/>in<sp/>a<sp/>version-specific<sp/>function<sp/>so<sp/>that<sp/>we&apos;re<sp/>guaranteed<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>distinct<sp/>for<sp/>modules<sp/>compiled<sp/>for<sp/>different<sp/>pybind11<sp/>versions.<sp/><sp/>Without<sp/>this,<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compilers<sp/>(i.e.<sp/>gcc)<sp/>can<sp/>use<sp/>the<sp/>same<sp/>static<sp/>pointer<sp/>storage<sp/>location<sp/>across<sp/>different<sp/>.so&apos;s,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>though<sp/>the<sp/>`get_internals()`<sp/>function<sp/>itself<sp/>is<sp/>local<sp/>to<sp/>each<sp/>shared<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>=<sp/>PYBIND11_VERSION_MAJOR,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>=<sp/>PYBIND11_VERSION_MINOR&gt;</highlight></codeline>
<codeline lineno="68" refid="namespacepybind11_1_1detail_1a5e1f5d819b0c2dfe52442c919296a3e3" refkind="member"><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>*&amp;<ref refid="namespacepybind11_1_1detail_1a5e1f5d819b0c2dfe52442c919296a3e3" kindref="member">get_internals_ptr</ref>()<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>*internals_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internals_ptr;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="namespacepybind11_1_1detail_1a467e32cfb22b4efc77c489b9d4663164" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>*&amp;internals_ptr<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a5e1f5d819b0c2dfe52442c919296a3e3" kindref="member">get_internals_ptr</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internals_ptr)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*internals_ptr;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>builtins(PyEval_GetBuiltins());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="common_8h_1ad4044f737821eb5e0398e5f0139d621e" kindref="member">PYBIND11_INTERNALS_ID</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(builtins.<ref refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" kindref="member">contains</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>isinstance&lt;capsule&gt;(builtins[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]))<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr<sp/>=<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref>(builtins[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(WITH_THREAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyEval_InitThreads();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate<sp/>=<sp/>PyThreadState_Get();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr-&gt;tstate<sp/>=<sp/>PyThread_create_key();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_set_key_value(internals_ptr-&gt;tstate,<sp/>tstate);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr-&gt;istate<sp/>=<sp/>tstate-&gt;interp;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtins[id]<sp/>=<sp/><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref>(&amp;internals_ptr);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr-&gt;<ref refid="structpybind11_1_1detail_1_1internals_1a3d4d8868728159a959ad949e276df796" kindref="member">registered_exception_translators</ref>.push_front(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](std::exception_ptr<sp/>p)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>std::rethrow_exception(p);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>e.<ref refid="classpybind11_1_1error__already__set_1aeb06507f47f77f7b3a196620ecf5b6fa" kindref="member">restore</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1builtin__exception" kindref="compound">builtin_exception</ref><sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/>{<sp/>e.set_error();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_alloc<sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>PyErr_SetString(PyExc_MemoryError,<sp/><sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::domain_error<sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/>{<sp/>PyErr_SetString(PyExc_ValueError,<sp/><sp/><sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument<sp/>&amp;e)<sp/>{<sp/>PyErr_SetString(PyExc_ValueError,<sp/><sp/><sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::length_error<sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/>{<sp/>PyErr_SetString(PyExc_ValueError,<sp/><sp/><sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range<sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/>{<sp/>PyErr_SetString(PyExc_IndexError,<sp/><sp/><sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::range_error<sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>PyErr_SetString(PyExc_ValueError,<sp/><sp/><sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>PyErr_SetString(PyExc_RuntimeError,<sp/><sp/>e.what());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,<sp/></highlight><highlight class="stringliteral">&quot;Caught<sp/>an<sp/>unknown<sp/>exception!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr-&gt;<ref refid="structpybind11_1_1detail_1_1internals_1a3fb3b0e6b890c1f11b3e85b061a0023a" kindref="member">static_property_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aee7739636a3f44597b68656d476bb41e" kindref="member">make_static_property_type</ref>();</highlight></codeline>
<codeline lineno="108" refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr-&gt;<ref refid="structpybind11_1_1detail_1_1internals_1a19dc621a948379dcd41195d906211de4" kindref="member">default_metaclass</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ae99453a6a2f0d9cfa4bc1500a150e016" kindref="member">make_default_metaclass</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internals_ptr-&gt;<ref refid="structpybind11_1_1detail_1_1internals_1ab8f874364d8be98700e06109e38542d5" kindref="member">instance_base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a4aad17fe209f5c6187910481e33654f1" kindref="member">make_object_base_type</ref>(internals_ptr-&gt;<ref refid="structpybind11_1_1detail_1_1internals_1a19dc621a948379dcd41195d906211de4" kindref="member">default_metaclass</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*internals_ptr;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classpybind11_1_1detail_1_1loader__life__support" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1loader__life__support" kindref="compound">loader_life_support</ref><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119" refid="classpybind11_1_1detail_1_1loader__life__support_1a4dd75aa088c3fd9147b00257ed15a0db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1loader__life__support_1a4dd75aa088c3fd9147b00257ed15a0db" kindref="member">loader_life_support</ref>()<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1abd1e008d90435e3f43622d78751a9dda" kindref="member">loader_patient_stack</ref>.push_back(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classpybind11_1_1detail_1_1loader__life__support_1af2ffe24159bd640c25bf58cee296074b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1loader__life__support_1af2ffe24159bd640c25bf58cee296074b" kindref="member">~loader_life_support</ref>()<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stack<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1abd1e008d90435e3f43622d78751a9dda" kindref="member">loader_patient_stack</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack.empty())</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;loader_life_support:<sp/>internal<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>stack.back();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack.pop_back();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(ptr);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>heuristic<sp/>to<sp/>reduce<sp/>the<sp/>stack&apos;s<sp/>capacity<sp/>(e.g.<sp/>after<sp/>long<sp/>recursive<sp/>calls)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack.capacity()<sp/>&gt;<sp/>16<sp/>&amp;&amp;<sp/>stack.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>stack.capacity()<sp/>/<sp/>stack.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack.shrink_to_fit();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classpybind11_1_1detail_1_1loader__life__support_1a241f87608861e56fbb8c132413437dbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1af62c3b270c006fce8eb96756ca0c3979" kindref="member">add_patient</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stack<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1abd1e008d90435e3f43622d78751a9dda" kindref="member">loader_patient_stack</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack.empty())</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;When<sp/>called<sp/>outside<sp/>a<sp/>bound<sp/>function,<sp/>py::cast()<sp/>cannot<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;do<sp/>Python<sp/>-&gt;<sp/>C++<sp/>conversions<sp/>which<sp/>require<sp/>the<sp/>creation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>temporary<sp/>values&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;list_ptr<sp/>=<sp/>stack.back();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_ptr<sp/>=<sp/>PyList_New(1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_ptr)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;loader_life_support:<sp/>error<sp/>allocating<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyList_SET_ITEM(list_ptr,<sp/>0,<sp/>h.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>PyList_Append(list_ptr,<sp/>h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;loader_life_support:<sp/>error<sp/>adding<sp/>patient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>cache<sp/>entry<sp/>for<sp/>the<sp/>given<sp/>type,<sp/>creating<sp/>it<sp/>if<sp/>necessary.<sp/><sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returned<sp/>by<sp/>emplace,<sp/>i.e.<sp/>an<sp/>iterator<sp/>for<sp/>the<sp/>entry<sp/>and<sp/>a<sp/>bool<sp/>set<sp/>to<sp/>`true`<sp/>if<sp/>the<sp/>entry<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;decltype(internals::registered_types_py)::<ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref>,<sp/>bool&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a7920862bbd224b2e0a9a2b02325b4b39" kindref="member">all_type_info_get_cache</ref>(PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populates<sp/>a<sp/>just-created<sp/>cache<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>all_type_info_populate(PyTypeObject<sp/>*t,<sp/>std::vector&lt;type_info<sp/>*&gt;<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PyTypeObject<sp/>*&gt;<sp/>check;</highlight></codeline>
<codeline lineno="169" refid="namespacepybind11_1_1detail_1a624a1a1288a51bfa1150e642694eca0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent<sp/>:<sp/>reinterpret_borrow&lt;tuple&gt;(t-&gt;tp_bases))</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check.push_back((PyTypeObject<sp/>*)<sp/>parent.ptr());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="namespacepybind11_1_1detail_1ad934593cede2b58973c87c2f870e1c2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad934593cede2b58973c87c2f870e1c2b" kindref="member">type_dict</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" kindref="member">registered_types_py</ref>;</highlight></codeline>
<codeline lineno="173" refid="namespacepybind11_1_1detail_1a0c68ebde37b018a1356b5c66148dd9a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>check.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>=<sp/>check[i];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>Python2<sp/>old-style<sp/>class<sp/>super<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyType_Check((PyObject<sp/>*)<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>`type`<sp/>in<sp/>the<sp/>current<sp/>set<sp/>of<sp/>registered<sp/>python<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ad934593cede2b58973c87c2f870e1c2b" kindref="member">type_dict</ref>.find(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="namespacepybind11_1_1detail_1ad934593cede2b58973c87c2f870e1c2b" kindref="member">type_dict</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>found<sp/>a<sp/>cache<sp/>entry<sp/>for<sp/>it,<sp/>so<sp/>it&apos;s<sp/>either<sp/>pybind-registered<sp/>or<sp/>has<sp/>pre-computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pybind<sp/>bases,<sp/>but<sp/>we<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>haven&apos;t<sp/>already<sp/>seen<sp/>the<sp/>type(s)<sp/>before:<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>follow<sp/>Python/virtual<sp/>C++<sp/>rules<sp/>that<sp/>there<sp/>should<sp/>only<sp/>be<sp/>one<sp/>instance<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>common<sp/>base.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*tinfo<sp/>:<sp/>it-&gt;second)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>Could<sp/>use<sp/>a<sp/>second<sp/>set<sp/>here,<sp/>rather<sp/>than<sp/>doing<sp/>a<sp/>linear<sp/>search,<sp/>but<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>having<sp/>a<sp/>large<sp/>number<sp/>of<sp/>immediate<sp/>pybind11-registered<sp/>types<sp/>seems<sp/>fairly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlikely,<sp/>that<sp/>probably<sp/>isn&apos;t<sp/>worthwhile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*known<sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(known<sp/>==<sp/>tinfo)<sp/>{<sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/><ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.push_back(tinfo);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>-&gt;tp_bases)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>some<sp/>python<sp/>type,<sp/>so<sp/>keep<sp/>follow<sp/>its<sp/>bases<sp/>classes<sp/>to<sp/>look<sp/>for<sp/>one<sp/>or<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>registered<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>==<sp/>check.size())<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we&apos;re<sp/>at<sp/>the<sp/>end,<sp/>we<sp/>can<sp/>pop<sp/>off<sp/>the<sp/>current<sp/>element<sp/>to<sp/>avoid<sp/>growing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`check`<sp/>when<sp/>adding<sp/>just<sp/>one<sp/>base<sp/>(which<sp/>is<sp/>typical--.e.<sp/>when<sp/>there<sp/>is<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>inheritance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check.pop_back();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent<sp/>:<sp/>reinterpret_borrow&lt;tuple&gt;(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>-&gt;tp_bases))</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check.push_back((PyTypeObject<sp/>*)<sp/>parent.ptr());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;detail::type_info<sp/>*&gt;<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>(PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ins<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a7920862bbd224b2e0a9a2b02325b4b39" kindref="member">all_type_info_get_cache</ref>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ins.second)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>cache<sp/>entry:<sp/>populate<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_type_info_populate(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>ins.first-&gt;second);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ins.first-&gt;second;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="namespacepybind11_1_1detail_1aeb4a9b9dcaab655056540151fa1da0e6" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref>*<sp/>get_type_info(PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;pybind11::detail::get_type_info:<sp/>type<sp/>has<sp/>multiple<sp/>pybind11-registered<sp/>bases&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.front();</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*get_type_info(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_if_missing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;types<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>types.find(std::type_index(<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>types.end())</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*)<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(throw_if_missing)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tname<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>.name();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">detail::clean_type_id</ref>(tname);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;pybind11::detail::get_type_info:<sp/>unable<sp/>to<sp/>find<sp/>type<sp/>info<sp/>for<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>tname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>get_type_handle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throw_if_missing)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::type_info<sp/>*type_info<sp/>=<sp/>get_type_info(<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>,<sp/>throw_if_missing);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(type_info<sp/>?<sp/>((PyObject<sp/>*)<sp/>type_info-&gt;type)<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="structpybind11_1_1detail_1_1value__and__holder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>{</highlight></codeline>
<codeline lineno="266" refid="structpybind11_1_1detail_1_1value__and__holder_1a2db1b4af1921e00e213f2fe6da7ed2f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a2db1b4af1921e00e213f2fe6da7ed2f7" kindref="member">inst</ref>;</highlight></codeline>
<codeline lineno="267" refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="268" refid="structpybind11_1_1detail_1_1value__and__holder_1a8d557cd8e932795a9e6444d05b96512a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a8d557cd8e932795a9e6444d05b96512a" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="269" refid="structpybind11_1_1detail_1_1value__and__holder_1a4e1955610ce493fbf404a40e4a0e8d8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a4e1955610ce493fbf404a40e4a0e8d8e" kindref="member">vh</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="structpybind11_1_1detail_1_1value__and__holder_1ac46faf52ea6afab928785801682ae7ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder_1ac46faf52ea6afab928785801682ae7ad" kindref="member">value_and_holder</ref>(<ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vpos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inst{i},<sp/>index{index},<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>{<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>},</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vh{inst-&gt;simple_layout<sp/>?<sp/>inst-&gt;simple_value_holder<sp/>:<sp/>&amp;inst-&gt;nonsimple.<ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">values_and_holders</ref>[vpos]}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>past-the-end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="structpybind11_1_1detail_1_1value__and__holder_1a06f8eb17493288f466a867e39b4d6ea1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder_1a06f8eb17493288f466a867e39b4d6ea1" kindref="member">value_and_holder</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>:<sp/>index{index}<sp/>{}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/>V<sp/>*&amp;<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">V<sp/>*&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vh[0]);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>this<sp/>`value_and_holder`<sp/>has<sp/>a<sp/>non-null<sp/>value<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="structpybind11_1_1detail_1_1value__and__holder_1a99633fae695eb69e022447bf310730ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_ptr();<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="structpybind11_1_1detail_1_1value__and__holder_1a3720f1824e005bfc837853a3fb21ace2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>H&gt;<sp/>H<sp/>&amp;<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a3720f1824e005bfc837853a3fb21ace2" kindref="member">holder</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">H<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vh[1]);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288" refid="structpybind11_1_1detail_1_1value__and__holder_1abf77ff9d83a347ddf41379cd85e564f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder_1abf77ff9d83a347ddf41379cd85e564f8" kindref="member">holder_constructed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" kindref="member">simple_layout</ref></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1acad9708259eee278d8f2743794acd71e" kindref="member">simple_holder_constructed</ref></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a6f2189faa41ccf0bb0a88d89b431cb50" kindref="member">nonsimple</ref>.holder_constructed[index];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293" refid="structpybind11_1_1detail_1_1value__and__holder_1a0f3ceb07bb2ec928b386e4b4fdf6c62d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder_1a0f3ceb07bb2ec928b386e4b4fdf6c62d" kindref="member">set_holder_constructed</ref>()<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" kindref="member">simple_layout</ref>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1acad9708259eee278d8f2743794acd71e" kindref="member">simple_holder_constructed</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a6f2189faa41ccf0bb0a88d89b431cb50" kindref="member">nonsimple</ref>.holder_constructed[index]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Container<sp/>for<sp/>accessing<sp/>and<sp/>iterating<sp/>over<sp/>an<sp/>instance&apos;s<sp/>values/holders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="structpybind11_1_1detail_1_1values__and__holders" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">values_and_holders</ref><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*inst;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type_vec<sp/>=<sp/>std::vector&lt;detail::type_info<sp/>*&gt;;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_vec<sp/>&amp;tinfo;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309" refid="structpybind11_1_1detail_1_1values__and__holders_1a304b036786d7aed14e03780a3b219da0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1a304b036786d7aed14e03780a3b219da0" kindref="member">values_and_holders</ref>(<ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*inst)<sp/>:<sp/>inst{inst},<sp/>tinfo(<ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>(Py_TYPE(inst)))<sp/>{}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*inst;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_vec<sp/>*types;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>curr;</highlight></codeline>
<codeline lineno="316" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1a69240ad74e4283727c7dcb5c6fea589e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">values_and_holders</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref>(<ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*inst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_vec<sp/>*tinfo)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>inst{inst},<sp/>types{tinfo},</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr(inst<sp/></highlight><highlight class="comment">/*<sp/>instance<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>types-&gt;<ref refid="cell__type_8hpp_1a7d665d9fa18a26df451d111b34afd89f" kindref="member">empty</ref>()<sp/>?<sp/>nullptr<sp/>:<sp/>(*types)[0]<sp/></highlight><highlight class="comment">/*<sp/>type<sp/>info<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>vpos:<sp/>(non-simple<sp/>types<sp/>only):<sp/>the<sp/>first<sp/>vptr<sp/>comes<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/></highlight><highlight class="comment">/*<sp/>index<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Past-the-end<sp/>iterator:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>)<sp/>:<sp/>curr(<ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1a6293e095309f13f9d0fd6ae1ff863aa0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1a6293e095309f13f9d0fd6ae1ff863aa0" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref><sp/>==<sp/>other.curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref>;<sp/>}</highlight></codeline>
<codeline lineno="328" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1a55f13ee791496656321ff9dea8d61fb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1a55f13ee791496656321ff9dea8d61fb9" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref><sp/>!=<sp/>other.curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref>;<sp/>}</highlight></codeline>
<codeline lineno="329" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1aa0efc33986f64cf4046777a6b7667362" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;<ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1aa0efc33986f64cf4046777a6b7667362" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" kindref="member">simple_layout</ref>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a4e1955610ce493fbf404a40e4a0e8d8e" kindref="member">vh</ref><sp/>+=<sp/>1<sp/>+<sp/>(*types)[curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref>]-&gt;holder_size_in_ptrs;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a8d557cd8e932795a9e6444d05b96512a" kindref="member">type</ref><sp/>=<sp/>curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref><sp/>&lt;<sp/>types-&gt;size()<sp/>?<sp/>(*types)[curr.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1af85d508c90a3ac5004a901ace866be61" kindref="member">index</ref>]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1aecdc743d4442cf1d1eeffc3c1881c93a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>&amp;<ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1aecdc743d4442cf1d1eeffc3c1881c93a" kindref="member">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curr;<sp/>}</highlight></codeline>
<codeline lineno="337" refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1abc93ec482ab0eeb90f9cef5fcc157e1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>*<ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator_1abc93ec482ab0eeb90f9cef5fcc157e1f" kindref="member">operator-&gt;</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;curr;<sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structpybind11_1_1detail_1_1values__and__holders_1a4b382c700ff741e113251a71eee1c464" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1a4b382c700ff741e113251a71eee1c464" kindref="member">begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref>(inst,<sp/>&amp;tinfo);<sp/>}</highlight></codeline>
<codeline lineno="341" refid="structpybind11_1_1detail_1_1values__and__holders_1a114f13813df4bc510ae01d258d61f751" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1a114f13813df4bc510ae01d258d61f751" kindref="member">end</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref>(tinfo.size());<sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="structpybind11_1_1detail_1_1values__and__holders_1ab65edd6f0543eddfbc77b68c8851b575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1ab65edd6f0543eddfbc77b68c8851b575" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref><sp/>*find_type)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>begin(),<sp/>endit<sp/>=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>endit<sp/>&amp;&amp;<sp/>it-&gt;type<sp/>!=<sp/>find_type)<sp/>++it;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="structpybind11_1_1detail_1_1values__and__holders_1a8a0f078e88c3d92587a9cdac15b301b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders_1a8a0f078e88c3d92587a9cdac15b301b4" kindref="member">size</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tinfo.size();<sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal">};</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>value_and_holder<sp/>instance::get_value_and_holder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_info<sp/>*find_type<sp/></highlight><highlight class="comment">/*=<sp/>nullptr<sp/>default<sp/>in<sp/>common.h*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optimize<sp/>common<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!find_type<sp/>||<sp/>Py_TYPE(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>==<sp/>find_type-&gt;type)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_and_holder(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>find_type,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">detail::values_and_holders</ref><sp/>vhs(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>vhs.find(find_type);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>vhs.end())</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;pybind11::detail::instance::get_value_and_holder:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type<sp/>is<sp/>not<sp/>a<sp/>pybind11<sp/>base<sp/>of<sp/>the<sp/>given<sp/>instance<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>type<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;pybind11::detail::instance::get_value_and_holder:<sp/>`&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(find_type-&gt;type-&gt;tp_name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>not<sp/>a<sp/>pybind11<sp/>base<sp/>of<sp/>the<sp/>given<sp/>`&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(Py_TYPE(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;tp_name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>instance::allocate_layout()<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;tinfo<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>(Py_TYPE(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_types<sp/>=<sp/>tinfo.size();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_types<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;instance<sp/>allocation<sp/>failed:<sp/>new<sp/>instance<sp/>has<sp/>no<sp/>pybind11-registered<sp/>base<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>simple_layout<sp/>=</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_types<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>tinfo.front()-&gt;holder_size_in_ptrs<sp/>&lt;=<sp/><ref refid="namespacepybind11_1_1detail_1a4917e6f04e358a58f42892a941be3ce3" kindref="member">instance_simple_holder_in_ptrs</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>path:<sp/>no<sp/>python-side<sp/>multiple<sp/>inheritance,<sp/>and<sp/>a<sp/>small-enough<sp/>holder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simple_layout)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simple_value_holder[0]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simple_holder_constructed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>base<sp/>types<sp/>or<sp/>a<sp/>too-large<sp/>holder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>space<sp/>to<sp/>hold:<sp/>[v1*][h1][v2*][h2]...[bb...]<sp/>where<sp/>[vN*]<sp/>is<sp/>a<sp/>value<sp/>pointer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[hN]<sp/>is<sp/>the<sp/>(uninitialized)<sp/>holder<sp/>instance<sp/>for<sp/>value<sp/>N,<sp/>and<sp/>[bb...]<sp/>is<sp/>a<sp/>set<sp/>of<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>that<sp/>tracks<sp/>whether<sp/>each<sp/>associated<sp/>holder<sp/>has<sp/>been<sp/>initialized.<sp/><sp/>Each<sp/>[block]<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>padded,<sp/>if<sp/>necessary,<sp/>to<sp/>an<sp/>integer<sp/>multiple<sp/>of<sp/>sizeof(void<sp/>*).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>space<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>:<sp/>tinfo)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>+=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>value<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>+=<sp/>t-&gt;holder_size_in_ptrs;<sp/></highlight><highlight class="comment">//<sp/>holder<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>flags_at<sp/>=<sp/>space;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>+=<sp/>size_in_ptrs(n_types<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>holder<sp/>constructed<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>space<sp/>for<sp/>flags,<sp/>values,<sp/>and<sp/>holders,<sp/>and<sp/>initialize<sp/>it<sp/>to<sp/>0<sp/>(flags<sp/>and<sp/>values,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>particular,<sp/>need<sp/>to<sp/>be<sp/>0).<sp/><sp/>Use<sp/>Python&apos;s<sp/>memory<sp/>allocation<sp/>functions:<sp/>in<sp/>Python<sp/>3.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>default<sp/>to<sp/>using<sp/>pymalloc,<sp/>which<sp/>is<sp/>designed<sp/>to<sp/>be<sp/>efficient<sp/>for<sp/>small<sp/>allocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>like<sp/>the<sp/>one<sp/>we&apos;re<sp/>doing<sp/>here;<sp/>in<sp/>earlier<sp/>versions<sp/>(and<sp/>for<sp/>larger<sp/>allocations)<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>wrappers<sp/>around<sp/>malloc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonsimple.values_and_holders<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>PyMem_Calloc(space,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nonsimple.values_and_holders)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonsimple.values_and_holders<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>PyMem_New(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>space);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nonsimple.values_and_holders)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memset(nonsimple.values_and_holders,<sp/>0,<sp/>space<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonsimple.holder_constructed<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;nonsimple.values_and_holders[flags_at]);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>owned<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>instance::deallocate_layout()<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!simple_layout)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyMem_Free(nonsimple.values_and_holders);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ace76e2e23e6cd12004ba88779c973ed9" kindref="member">isinstance_generic</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>=<sp/>detail::get_type_handle(<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437" refid="namespacepybind11_1_1detail_1a18e02562143ea02421e635c169e2b8c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439" refid="namespacepybind11_1_1detail_1ab4876e0a1d4c619f690c6fdbc3216e6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ab4876e0a1d4c619f690c6fdbc3216e6d" kindref="member">isinstance</ref>(obj,<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacepybind11_1_1detail_1af3a790a9d6af602df7dad7c64d9c539b" kindref="member">error_string</ref>()<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_Occurred())<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>internal<sp/>error<sp/>occurred&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>internal<sp/>error<sp/>occurred&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>error_scope<sp/>scope;<sp/></highlight><highlight class="comment">//<sp/>Preserve<sp/>error<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>errorString;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope.type)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorString<sp/>+=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(scope.type).attr(</highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">).cast&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorString<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope.value)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorString<sp/>+=<sp/>(std::string)<sp/>str(scope.value);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_NormalizeException(&amp;scope.type,<sp/>&amp;scope.value,<sp/>&amp;scope.trace);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope.trace<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyException_SetTraceback(scope.value,<sp/>scope.trace);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope.trace)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTracebackObject<sp/>*trace<sp/>=<sp/>(PyTracebackObject<sp/>*)<sp/>scope.trace;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>deepest<sp/>trace<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string__to__double_8cpp_1a99f0ea2bf528324076935572afedd82a" kindref="member">while</ref><sp/>(trace-&gt;tb_next)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace<sp/>=<sp/>trace-&gt;tb_next;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyFrameObject<sp/>*frame<sp/>=<sp/>trace-&gt;tb_frame;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorString<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n\nAt:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(frame)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno<sp/>=<sp/>PyFrame_GetLineNumber(frame);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorString<sp/>+=</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(frame-&gt;f_code-&gt;co_filename).cast&lt;std::string&gt;()<sp/>+</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(lineno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(frame-&gt;f_code-&gt;co_name).cast&lt;std::string&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frame-&gt;f_back;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace<sp/>=<sp/>trace-&gt;tb_next;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errorString;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>get_object_handle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;instances<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1a52c01de2ba25ab667539a9fb01e7defe" kindref="member">registered_instances</ref>;</highlight></codeline>
<codeline lineno="492" refid="namespacepybind11_1_1detail_1a33c4d7ef0a3ea3fc3c06ec4e58ee050c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a33c4d7ef0a3ea3fc3c06ec4e58ee050c" kindref="member">range</ref><sp/>=<sp/>instances.equal_range(ptr);</highlight></codeline>
<codeline lineno="493" refid="namespacepybind11_1_1detail_1a27872f6f51ebf251a562b55c43e5c902" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a33c4d7ef0a3ea3fc3c06ec4e58ee050c" kindref="member">range</ref>.first;<sp/>it<sp/>!=<sp/><ref refid="namespacepybind11_1_1detail_1a33c4d7ef0a3ea3fc3c06ec4e58ee050c" kindref="member">range</ref>.second;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vh<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">values_and_holders</ref>(it-&gt;second))<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vh.type<sp/>==<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>((PyObject<sp/>*)<sp/>it-&gt;second);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499" refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>();</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="namespacepybind11_1_1detail_1a258682afd9a02ea6c742f2032d923ee8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PyThreadState<sp/>*<ref refid="namespacepybind11_1_1detail_1a258682afd9a02ea6c742f2032d923ee8" kindref="member">get_thread_state_unchecked</ref>()<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyThreadState_GET();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_PyThreadState_Current;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyThreadState*)<sp/>_Py_atomic_load_relaxed(&amp;_PyThreadState_Current);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03050200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyThreadState*)<sp/>_PyThreadState_Current.value;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_PyThreadState_UncheckedGet();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3ad1aba5f911230062de8c796afa9d47" kindref="member">keep_alive_impl</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>nurse,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>patient);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a9c191f1b7b78275ca2aaec29008f3b02" kindref="member">register_instance</ref>(instance<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_info<sp/>*tinfo);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PyObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a6295a3814da747beecb99da3095ddb00" kindref="member">make_new_instance</ref>(PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allocate_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="classpybind11_1_1detail_1_1type__caster__generic" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="523" refid="classpybind11_1_1detail_1_1type__caster__generic_1a10796f8999edcdb3d6e4a658c2cca73e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;<ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:<sp/>typeinfo(get_type_info(<ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref>))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load_impl&lt;type_caster_generic&gt;(src,<sp/>convert);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="classpybind11_1_1detail_1_1type__caster__generic_1a89236503bc93c9d9cadda35831f6af36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent,</highlight></codeline>
<codeline lineno="531" refid="classpybind11_1_1detail_1_1type__caster__generic_1a647882c53b3120f6e031d8657d6c4c11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*tinfo,</highlight></codeline>
<codeline lineno="532" refid="classpybind11_1_1detail_1_1type__caster__generic_1a655767dd596ec032eec7740328f3fe84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*copy_constructor)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="533" refid="classpybind11_1_1detail_1_1type__caster__generic_1a951ed06cb81e22e3b106b3e23cecfd05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*move_constructor)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="534" refid="classpybind11_1_1detail_1_1type__caster__generic_1a8c3a1017a1539f916dc2b0b65231a88f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*existing_holder<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tinfo)<sp/></highlight><highlight class="comment">//<sp/>no<sp/>type<sp/>info:<sp/>error<sp/>will<sp/>be<sp/>set<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_src);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>().release();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_instances<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1a52c01de2ba25ab667539a9fb01e7defe" kindref="member">registered_instances</ref>.equal_range(src);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_i<sp/>=<sp/>it_instances.first;<sp/>it_i<sp/>!=<sp/>it_instances.second;<sp/>++it_i)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance_type<sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">detail::all_type_info</ref>(Py_TYPE(it_i-&gt;second)))<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance_type<sp/>&amp;&amp;<sp/>instance_type<sp/>==<sp/>tinfo)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>((PyObject<sp/>*)<sp/>it_i-&gt;second).inc_ref();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inst<sp/>=<sp/>reinterpret_steal&lt;object&gt;(<ref refid="namespacepybind11_1_1detail_1a6295a3814da747beecb99da3095ddb00" kindref="member">make_new_instance</ref>(tinfo-&gt;<ref refid="structpybind11_1_1detail_1_1type__info_1a99cc6ada480e9088a9c9b1d1e5e98480" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>allocate<sp/>value<sp/>*/</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrapper<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst.ptr());</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a8a2005f2b03490c24273ac666219fe90" kindref="member">owned</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;valueptr<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">values_and_holders</ref>(wrapper).<ref refid="structpybind11_1_1detail_1_1values__and__holders_1a4b382c700ff741e113251a71eee1c464" kindref="member">begin</ref>()-&gt;<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(policy)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::automatic:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::take_ownership:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueptr<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;owned<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::automatic_reference:</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::reference:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueptr<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;owned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::copy:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy_constructor)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueptr<sp/>=<sp/>copy_constructor(src);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;return_value_policy<sp/>=<sp/>copy,<sp/>but<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;object<sp/>is<sp/>non-copyable!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;owned<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">return_value_policy::move</ref>:</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(move_constructor)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueptr<sp/>=<sp/>move_constructor(src);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy_constructor)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueptr<sp/>=<sp/>copy_constructor(src);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;return_value_policy<sp/>=<sp/>move,<sp/>but<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;object<sp/>is<sp/>neither<sp/>movable<sp/>nor<sp/>copyable!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;owned<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::reference_internal:</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueptr<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;owned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a3ad1aba5f911230062de8c796afa9d47" kindref="member">keep_alive_impl</ref>(inst,<sp/>parent);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;unhandled<sp/>return_value_policy:<sp/>should<sp/>not<sp/>happen!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a9c191f1b7b78275ca2aaec29008f3b02" kindref="member">register_instance</ref>(wrapper,<sp/>valueptr,<sp/>tinfo);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;<ref refid="structpybind11_1_1detail_1_1type__info_1a45e773df98848981ad62ddf2e0f43d29" kindref="member">init_holder</ref>(wrapper,<sp/>existing_holder);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inst.release();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>methods<sp/>for<sp/>generic<sp/>caster;<sp/>there<sp/>are<sp/>overridden<sp/>in<sp/>copyable_holder_caster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>load_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>&amp;v_h)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>try_implicit_casts(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref><sp/>:<sp/>typeinfo-&gt;implicit_casts)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_caster_generic<sp/>sub_caster(*<ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>.first);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_caster.load(src,<sp/>convert))<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>.second(sub_caster.value);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>try_direct_conversions(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;converter<sp/>:<sp/>*typeinfo-&gt;direct_conversions)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(converter(src.ptr(),<sp/>value))</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_holder_compat()<sp/>{}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>`load`;<sp/>this<sp/>takes<sp/>the<sp/>type<sp/>of<sp/>`this`<sp/>so<sp/>that<sp/>it<sp/>can<sp/>dispatch<sp/>the<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>of<sp/>code<sp/>between<sp/>here<sp/>and<sp/>copyable_holder_caster<sp/>where<sp/>the<sp/>two<sp/>classes<sp/>need<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logic<sp/>(without<sp/>having<sp/>to<sp/>resort<sp/>to<sp/>virtual<sp/>inheritance).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ThisT&gt;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_impl(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src<sp/>||<sp/>!typeinfo)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src.is_none())<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defer<sp/>accepting<sp/>None<sp/>to<sp/>other<sp/>overloads<sp/>(if<sp/>we<sp/>aren&apos;t<sp/>in<sp/>convert<sp/>mode):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;this_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ThisT<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_.check_holder_compat();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*srctype<sp/>=<sp/>Py_TYPE(src.ptr());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>1:<sp/>If<sp/>src<sp/>is<sp/>an<sp/>exact<sp/>type<sp/>match<sp/>for<sp/>the<sp/>target<sp/>type<sp/>then<sp/>we<sp/>can<sp/>reinterpret_cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>instance&apos;s<sp/>value<sp/>pointer<sp/>to<sp/>the<sp/>target<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srctype<sp/>==<sp/>typeinfo-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_.load_value(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">instance<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src.ptr())-&gt;get_value_and_holder());</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2:<sp/>We<sp/>have<sp/>a<sp/>derived<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_IsSubtype(srctype,<sp/>typeinfo-&gt;type))<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>(srctype);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_cpp_mi<sp/>=<sp/>typeinfo-&gt;simple_type;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2a:<sp/>the<sp/>python<sp/>type<sp/>is<sp/>a<sp/>Python-inherited<sp/>derived<sp/>class<sp/>that<sp/>inherits<sp/>from<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>simple<sp/>(no<sp/>MI)<sp/>pybind11<sp/>class,<sp/>or<sp/>is<sp/>an<sp/>exact<sp/>match,<sp/>so<sp/>the<sp/>C++<sp/>instance<sp/>is<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>right<sp/>type<sp/>and<sp/>we<sp/>can<sp/>use<sp/>reinterpret_cast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(This<sp/>is<sp/>essentially<sp/>the<sp/>same<sp/>as<sp/>case<sp/>2b,<sp/>but<sp/>because<sp/>not<sp/>using<sp/>multiple<sp/>inheritance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>extremely<sp/>common,<sp/>we<sp/>handle<sp/>it<sp/>specially<sp/>to<sp/>avoid<sp/>the<sp/>loop<sp/>iterator<sp/>and<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>lookup<sp/>overhead)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>(no_cpp_mi<sp/>||<sp/><ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.front()-&gt;type<sp/>==<sp/>typeinfo-&gt;type))<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_.load_value(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">instance<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src.ptr())-&gt;get_value_and_holder());</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2b:<sp/>the<sp/>python<sp/>type<sp/>inherits<sp/>from<sp/>multiple<sp/>C++<sp/>bases.<sp/><sp/>Check<sp/>the<sp/>bases<sp/>to<sp/>see<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>find<sp/>an<sp/>exact<sp/>match<sp/>(or,<sp/>for<sp/>a<sp/>simple<sp/>C++<sp/>type,<sp/>an<sp/>inherited<sp/>match);<sp/>if<sp/>so,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>safely<sp/>reinterpret_cast<sp/>to<sp/>the<sp/>relevant<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>base<sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(no_cpp_mi<sp/>?<sp/>PyType_IsSubtype(base-&gt;type,<sp/>typeinfo-&gt;type)<sp/>:<sp/>base-&gt;type<sp/>==<sp/>typeinfo-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_.load_value(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">instance<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src.ptr())-&gt;get_value_and_holder(base));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2c:<sp/>C++<sp/>multiple<sp/>inheritance<sp/>is<sp/>involved<sp/>and<sp/>we<sp/>couldn&apos;t<sp/>find<sp/>an<sp/>exact<sp/>type<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>registered<sp/>bases,<sp/>above,<sp/>so<sp/>try<sp/>implicit<sp/>casting<sp/>(needed<sp/>for<sp/>proper<sp/>C++<sp/>casting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>MI<sp/>is<sp/>involved).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_.try_implicit_casts(src,<sp/>convert))</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>an<sp/>implicit<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;converter<sp/>:<sp/>typeinfo-&gt;implicit_conversions)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>reinterpret_steal&lt;object&gt;(converter(src.ptr(),<sp/>typeinfo-&gt;type));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(load_impl&lt;ThisT&gt;(temp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1af62c3b270c006fce8eb96756ca0c3979" kindref="member">loader_life_support::add_patient</ref>(temp);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_.try_direct_conversions(src))</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Called<sp/>to<sp/>do<sp/>type<sp/>lookup<sp/>and<sp/>wrap<sp/>the<sp/>pointer<sp/>and<sp/>type<sp/>in<sp/>a<sp/>pair<sp/>when<sp/>a<sp/>dynamic_cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>needed<sp/>or<sp/>can&apos;t<sp/>be<sp/>used.<sp/><sp/>If<sp/>the<sp/>type<sp/>is<sp/>unknown,<sp/>sets<sp/>the<sp/>error<sp/>and<sp/>returns<sp/>a<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>.second<sp/>=<sp/>nullptr.<sp/><sp/>(p.first<sp/>=<sp/>nullptr<sp/>is<sp/>not<sp/>an<sp/>error:<sp/>it<sp/>becomes<sp/>None).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classpybind11_1_1detail_1_1type__caster__generic_1a8416df5db92073a3eb985d37189b0573" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>void<sp/>*,<sp/>const<sp/>type_info<sp/>*&gt;<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__generic_1a8416df5db92073a3eb985d37189b0573" kindref="member">src_and_type</ref>(</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;cast_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*rtti_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>.find(std::type_index(cast_type));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>.end())</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{src,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref><sp/>*)<sp/>it-&gt;second};</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>found,<sp/>set<sp/>error:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tname<sp/>=<sp/>rtti_type<sp/>?<sp/>rtti_type-&gt;name()<sp/>:<sp/>cast_type.name();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">detail::clean_type_id</ref>(tname);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unregistered<sp/>type<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>tname;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="classpybind11_1_1detail_1_1type__caster__generic_1a860d37bda0e4b2cbf26be541e059dbeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref><sp/>*typeinfo<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723" refid="classpybind11_1_1detail_1_1type__caster__generic_1a9209746eb23e540a3a48ec3e4e18a8ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="734" refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">cast_op_type</ref><sp/>=</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_pointer&lt;remove_reference_t&lt;T&gt;</ref>&gt;::value,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_pointer&lt;intrinsic_t&lt;T&gt;&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_lvalue_reference&lt;intrinsic_t&lt;T&gt;&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>&gt;;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="747" refid="namespacepybind11_1_1detail_1a3e4f52c827f0391c3ca8166590c559c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a3e4f52c827f0391c3ca8166590c559c9" kindref="member">movable_cast_op_type</ref><sp/>=</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_pointer&lt;typename std::remove_reference&lt;T&gt;::type</ref>&gt;::value,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_pointer&lt;intrinsic_t&lt;T&gt;&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_rvalue_reference&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_rvalue_reference&lt;intrinsic_t&lt;T&gt;&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_lvalue_reference&lt;intrinsic_t&lt;T&gt;&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>&gt;&gt;;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::is_copy_constructible<sp/>isn&apos;t<sp/>quite<sp/>enough:<sp/>it<sp/>lets<sp/>std::vector&lt;T&gt;<sp/>(and<sp/>similar)<sp/>through<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>non-copyable,<sp/>but<sp/>code<sp/>containing<sp/>such<sp/>a<sp/>copy<sp/>constructor<sp/>fails<sp/>to<sp/>actually<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="structpybind11_1_1detail_1_1is__copy__constructible" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__copy__constructible" kindref="compound">is_copy_constructible</ref><sp/>:<sp/>std::is_copy_constructible&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>types<sp/>that<sp/>appear<sp/>to<sp/>be<sp/>copy<sp/>constructible<sp/>but<sp/>also<sp/>look<sp/>like<sp/>stl<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(we<sp/>specifically<sp/>check<sp/>for:<sp/>has<sp/>`value_type`<sp/>and<sp/>`reference`<sp/>with<sp/>`reference<sp/>=<sp/>value_type&amp;`):<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so,<sp/>copy<sp/>constructability<sp/>depends<sp/>on<sp/>whether<sp/>the<sp/>value_type<sp/>is<sp/>copy<sp/>constructible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="structpybind11_1_1detail_1_1is__copy__constructible_3_01_container_00_01enable__if__t_3_01std_1_9ff39b5048caffb73cf754c26d3885c0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__copy__constructible" kindref="compound">is_copy_constructible</ref>&lt;Container,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="structpybind11_1_1detail_1_1is__copy__constructible" kindref="compound">is_copy_constructible</ref>&lt;Container&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;typename<sp/>Container::value_type<sp/>&amp;,<sp/>typename<sp/>Container::reference&gt;::value</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>:<sp/>std::is_copy_constructible&lt;typename<sp/>Container::value_type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="classpybind11_1_1detail_1_1type__caster__base" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>itype<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aa37a5957cbb8ad416e9c0a3a9e0c365e" kindref="member">intrinsic_t&lt;type&gt;</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="770" refid="classpybind11_1_1detail_1_1type__caster__base_1adf01f1ae6a0c005e359cff94a2ebfe57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1adf01f1ae6a0c005e359cff94a2ebfe57" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_descr(_&lt;type&gt;());<sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="classpybind11_1_1detail_1_1type__caster__base_1a5205c10684e7768216562163515c31e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a5205c10684e7768216562163515c31e8" kindref="member">type_caster_base</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base</ref>(typeid(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="773" refid="classpybind11_1_1detail_1_1type__caster__base_1a1c928d670cfa4926fd4893436339be51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a1c928d670cfa4926fd4893436339be51" kindref="member">type_caster_base</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;info)<sp/>:<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref>(info)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="classpybind11_1_1detail_1_1type__caster__base_1afb028f5da33ba373d8aad123f0cd3c23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1afb028f5da33ba373d8aad123f0cd3c23" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>itype<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy<sp/>==<sp/>return_value_policy::automatic<sp/>||<sp/>policy<sp/>==<sp/>return_value_policy::automatic_reference)</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>return_value_policy::copy;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(&amp;src,<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781" refid="classpybind11_1_1detail_1_1type__caster__base_1ab8c449a3210c553469f620b5222cae06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1ab8c449a3210c553469f620b5222cae06" kindref="member">cast</ref>(itype<sp/>&amp;&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(&amp;src,<sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">return_value_policy::move</ref>,<sp/>parent);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>(pointer,<sp/>type_info)<sp/>pair<sp/>taking<sp/>care<sp/>of<sp/>necessary<sp/>RTTI<sp/>type<sp/>lookup<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>polymorphic<sp/>type.<sp/><sp/>If<sp/>the<sp/>instance<sp/>isn&apos;t<sp/>derived,<sp/>returns<sp/>the<sp/>non-RTTI<sp/>base<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>itype,<sp/>enable_if_t&lt;std::is_polymorphic&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="788" refid="classpybind11_1_1detail_1_1type__caster__base_1a4e519ebdcc3da1b918d7265a9e87d794" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>void<sp/>*,<sp/>const<sp/>type_info<sp/>*&gt;<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a4e519ebdcc3da1b918d7265a9e87d794" kindref="member">src_and_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>itype<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vsrc<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cast_type<sp/>=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(itype);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*instance_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vsrc)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_type<sp/>=<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(*src);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacepybind11_1_1detail_1a3379c11ceb77989070a4613ddad7da06" kindref="member">same_type</ref>(cast_type,<sp/>*instance_type))<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>base<sp/>pointer<sp/>to<sp/>a<sp/>derived<sp/>type;<sp/>if<sp/>it<sp/>is<sp/>a<sp/>pybind11-registered<sp/>type,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>get<sp/>the<sp/>correct<sp/>derived<sp/>pointer<sp/>(which<sp/>may<sp/>be<sp/>!=<sp/>base<sp/>pointer)<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic_cast<sp/>to<sp/>most<sp/>derived<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>.find(std::type_index(*instance_type));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>.end())</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref><sp/>*)<sp/>it-&gt;second};</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we<sp/>have<sp/>either<sp/>a<sp/>nullptr,<sp/>an<sp/>`itype`<sp/>pointer,<sp/>or<sp/>an<sp/>unknown<sp/>derived<sp/>pointer,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>do<sp/>a<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_caster_generic::src_and_type(vsrc,<sp/>cast_type,<sp/>instance_type);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-polymorphic<sp/>type,<sp/>so<sp/>no<sp/>dynamic<sp/>casting;<sp/>just<sp/>call<sp/>the<sp/>generic<sp/>version<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>itype,<sp/>enable_if_t&lt;!std::is_polymorphic&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="811" refid="classpybind11_1_1detail_1_1type__caster__base_1a4e519ebdcc3da1b918d7265a9e87d794" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>void<sp/>*,<sp/>const<sp/>type_info<sp/>*&gt;<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a4e519ebdcc3da1b918d7265a9e87d794" kindref="member">src_and_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>itype<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_caster_generic::src_and_type(src,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(itype));</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815" refid="classpybind11_1_1detail_1_1type__caster__base_1a0ad42918189a055ae43bae3ab241656e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a0ad42918189a055ae43bae3ab241656e" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>itype<sp/>*src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>st<sp/>=<sp/>src_and_type(src);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">type_caster_generic::cast</ref>(</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st.first,<sp/>policy,<sp/>parent,<sp/>st.second,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_copy_constructor(src),<sp/>make_move_constructor(src));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822" refid="classpybind11_1_1detail_1_1type__caster__base_1afa96c23ff449675cd59ad0a2473e479f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1afa96c23ff449675cd59ad0a2473e479f" kindref="member">cast_holder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>itype<sp/>*src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*holder)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>st<sp/>=<sp/>src_and_type(src);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">type_caster_generic::cast</ref>(</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st.first,<sp/>return_value_policy::take_ownership,<sp/>{},<sp/>st.second,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>holder);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="classpybind11_1_1detail_1_1type__caster__base_1a0ef64bca1f10a1bd64538dfb2cdf59c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a0ef64bca1f10a1bd64538dfb2cdf59c5" kindref="member">cast_op_type</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a0ef64bca1f10a1bd64538dfb2cdf59c5" kindref="member">cast_op_type&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="classpybind11_1_1detail_1_1type__caster__base_1ab53e652ad5fe47bd19795e788e0c6252" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>itype*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>*)<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="832" refid="classpybind11_1_1detail_1_1type__caster__base_1add9ee28ad6357017fb31db73de19a14b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>itype&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1reference__cast__error" kindref="compound">reference_cast_error</ref>();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((itype<sp/>*)<sp/>value);<sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="835" refid="classpybind11_1_1detail_1_1type__caster__base_1a655313b9d5c1dd93be1fe7417250536e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a655313b9d5c1dd93be1fe7417250536e" kindref="member">Constructor</ref><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>enabled<sp/>when<sp/>the<sp/>types<sp/>are<sp/>{copy,move}-constructible<sp/>*and*<sp/>when<sp/>the<sp/>type</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>have<sp/>a<sp/>private<sp/>operator<sp/>new<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_copy_constructible&lt;T&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="840" refid="classpybind11_1_1detail_1_1type__caster__base_1a8cafb31a1ae7071ad68fbbeaa9d1683e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a8cafb31a1ae7071ad68fbbeaa9d1683e" kindref="member">make_copy_constructor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*x)<sp/>-&gt;<sp/>decltype(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(*x),<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a655313b9d5c1dd93be1fe7417250536e" kindref="member">Constructor</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;std::is_move_constructible&lt;T&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="847" refid="classpybind11_1_1detail_1_1type__caster__base_1aeaaa042b328e011e8f083f7da5122dad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1aeaaa042b328e011e8f083f7da5122dad" kindref="member">make_move_constructor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*x)<sp/>-&gt;<sp/>decltype(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(std::move(*</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x))),<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a655313b9d5c1dd93be1fe7417250536e" kindref="member">Constructor</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(std::move(*</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>))));</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="classpybind11_1_1detail_1_1type__caster__base_1ab3e91d3fe97cf4046028868b62c0bcf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a655313b9d5c1dd93be1fe7417250536e" kindref="member">Constructor</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1ab3e91d3fe97cf4046028868b62c0bcf5" kindref="member">make_copy_constructor</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="854" refid="classpybind11_1_1detail_1_1type__caster__base_1a547d0587565ba34f964a3377f8edfb4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a655313b9d5c1dd93be1fe7417250536e" kindref="member">Constructor</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base_1a547d0587565ba34f964a3377f8edfb4f" kindref="member">make_move_constructor</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal">};</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857" refid="classpybind11_1_1detail_1_1type__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base</ref>&lt;type&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="858" refid="namespacepybind11_1_1detail_1a160181d61e7d73d29060503ffdf13e6f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;intrinsic_t&lt;type&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shortcut<sp/>for<sp/>calling<sp/>a<sp/>caster&apos;s<sp/>`cast_op_type`<sp/>cast<sp/>operator<sp/>for<sp/>casting<sp/>a<sp/>type_caster<sp/>to<sp/>a<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="namespacepybind11_1_1detail_1a6c3bd0b56aad6dd32ab9e282add9dc2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;::template</ref><sp/><ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">cast_op_type&lt;T&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1acd360a722fede5588efc6601d75fa578" kindref="member">cast_op</ref>(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;</ref><sp/>&amp;caster)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>caster.operator<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;::template</ref><sp/><ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">cast_op_type&lt;T&gt;</ref>();</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>make_caster&lt;T&gt;::template<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">cast_op_type&lt;typename std::add_rvalue_reference&lt;T&gt;::type</ref>&gt;</highlight></codeline>
<codeline lineno="865" refid="namespacepybind11_1_1detail_1acd360a722fede5588efc6601d75fa578" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1acd360a722fede5588efc6601d75fa578" kindref="member">cast_op</ref>(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;</ref><sp/>&amp;&amp;caster)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(caster).operator</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;::template</ref><sp/><ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">cast_op_type&lt;typename std::add_rvalue_reference&lt;T&gt;::type</ref>&gt;();</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::reference_wrapper&lt;type&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">caster_t</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;type&gt;</ref>;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">caster_t</ref><sp/>subcaster;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>subcaster_cast_op_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>caster_t::template<sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a4606ba2c4e86a0e06f69a584ebd2cfc2" kindref="member">cast_op_type&lt;type&gt;</ref>;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::remove_const&lt;type&gt;::type</ref><sp/>&amp;,<sp/>subcaster_cast_op_type&gt;::value,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::reference_wrapper&lt;T&gt;<sp/>caster<sp/>requires<sp/>T<sp/>to<sp/>have<sp/>a<sp/>caster<sp/>with<sp/>an<sp/>`T<sp/>&amp;`<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="878" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a746dc4068ab7252ac547306cd4e381f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a746dc4068ab7252ac547306cd4e381f9" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcaster.<ref refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" kindref="member">load</ref>(src,<sp/>convert);<sp/>}</highlight></codeline>
<codeline lineno="879" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a92ca1a7b4cede71058665b9af4711741" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a92ca1a7b4cede71058665b9af4711741" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">caster_t::name</ref>();<sp/>}</highlight></codeline>
<codeline lineno="880" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a3ec1c7caabc97490b78e417bf1fd95aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a3ec1c7caabc97490b78e417bf1fd95aa" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::reference_wrapper&lt;type&gt;<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>definitely<sp/>wrong<sp/>to<sp/>take<sp/>ownership<sp/>of<sp/>this<sp/>pointer,<sp/>so<sp/>mask<sp/>that<sp/>rvp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy<sp/>==<sp/>return_value_policy::take_ownership<sp/>||<sp/>policy<sp/>==<sp/>return_value_policy::automatic)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">caster_t::cast</ref>(&amp;src.get(),<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a4606ba2c4e86a0e06f69a584ebd2cfc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a4606ba2c4e86a0e06f69a584ebd2cfc2" kindref="member">cast_op_type</ref><sp/>=<sp/>std::reference_wrapper&lt;type&gt;;</highlight></codeline>
<codeline lineno="887" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1reference__wrapper_3_01type_01_4_01_4_1a0668627961435a0db038f16d5f03569e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::reference_wrapper&lt;type&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcaster.operator<sp/>subcaster_cast_op_type&amp;();<sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal">};</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_TYPE_CASTER(type,<sp/>py_name)<sp/>\</highlight></codeline>
<codeline lineno="891"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>protected:<sp/>\</highlight></codeline>
<codeline lineno="892"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>value;<sp/>\</highlight></codeline>
<codeline lineno="893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>public:<sp/>\</highlight></codeline>
<codeline lineno="894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>PYBIND11_DESCR<sp/>name()<sp/>{<sp/>return<sp/>type_descr(py_name);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T_,<sp/>enable_if_t&lt;std::is_same&lt;type,<sp/>remove_cv_t&lt;T_&gt;&gt;::value,<sp/>int&gt;<sp/>=<sp/>0&gt;<sp/>\</highlight></codeline>
<codeline lineno="896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>handle<sp/>cast(T_<sp/>*src,<sp/>return_value_policy<sp/>policy,<sp/>handle<sp/>parent)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!src)<sp/>return<sp/>none().release();<sp/>\</highlight></codeline>
<codeline lineno="898"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(policy<sp/>==<sp/>return_value_policy::take_ownership)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>h<sp/>=<sp/>cast(std::move(*src),<sp/>policy,<sp/>parent);<sp/>delete<sp/>src;<sp/>return<sp/>h;<sp/>\</highlight></codeline>
<codeline lineno="900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>cast(*src,<sp/>policy,<sp/>parent);<sp/>\</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>type*()<sp/>{<sp/>return<sp/>&amp;value;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>type&amp;()<sp/>{<sp/>return<sp/>value;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="906"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>type&amp;&amp;()<sp/>&amp;&amp;<sp/>{<sp/>return<sp/>std::move(value);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T_&gt;<sp/>using<sp/>cast_op_type<sp/>=<sp/>pybind11::detail::movable_cast_op_type&lt;T_&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="namespacepybind11_1_1detail_1aaff3785d06624bbc661f3afaf92cff7d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">is_std_char_type</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">any_of</ref>&lt;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;CharT,<sp/>char&gt;,<sp/></highlight><highlight class="comment">/*<sp/>std::string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;CharT,<sp/>char16_t&gt;,<sp/></highlight><highlight class="comment">/*<sp/>std::u16string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;CharT,<sp/>char32_t&gt;,<sp/></highlight><highlight class="comment">/*<sp/>std::u32string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;CharT,<sp/>wchar_t&gt;<sp/></highlight><highlight class="comment">/*<sp/>std::wstring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="918" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_arithmetic&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!<ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">is_std_char_type</ref>&lt;T&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="919" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a1137402133d7adf4bc6f48c47b10f5ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a1137402133d7adf4bc6f48c47b10f5ee" kindref="member">_py_type_0</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/>long,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="920" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a1a60db6ecaff2baf9144ac92ef5292b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a1a60db6ecaff2baf9144ac92ef5292b1" kindref="member">_py_type_1</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_signed&lt;T&gt;::value</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a1137402133d7adf4bc6f48c47b10f5ee" kindref="member">_py_type_0</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::make_unsigned&lt;_py_type_0&gt;::type</ref>&gt;;</highlight></codeline>
<codeline lineno="921" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_floating_point&lt;T&gt;::value</ref>,<sp/>double,<sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a1a60db6ecaff2baf9144ac92ef5292b1" kindref="member">_py_type_1</ref>&gt;;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a70a70d857b69b5e1e1076095bcd1d647" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a70a70d857b69b5e1e1076095bcd1d647" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref><sp/>py_value;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_floating_point&lt;T&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert<sp/>||<sp/>PyFloat_Check(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_value<sp/>=<sp/>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/>PyFloat_AsDouble(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyFloat_Check(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_unsigned&lt;py_type&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_value<sp/>=<sp/>as_unsigned&lt;py_type&gt;(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>signed<sp/>integer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/>PyLong_AsLong(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/><ref refid="common_8h_1a1875e825dd4cdcb110d87a5ad227f8d6" kindref="member">PYBIND11_LONG_AS_LONGLONG</ref>(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>py_err<sp/>=<sp/>py_value<sp/>==<sp/>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/>-1<sp/>&amp;&amp;<sp/>PyErr_Occurred();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(py_err<sp/>||<sp/>(std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(py_value<sp/>&lt;<sp/>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/><ref refid="namespacexlnt_1_1detail_1ab4626c34c3d8bbd270e96c4b8700ad4e" kindref="member">std::numeric_limits&lt;T&gt;::min</ref>()<sp/>||</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_value<sp/>&gt;<sp/>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a50cf53b75e3664420cbf69d6989d778e" kindref="member">py_type</ref>)<sp/><ref refid="namespacexlnt_1_1detail_1afb41b740bceeaa00b0232737e784385c" kindref="member">std::numeric_limits&lt;T&gt;::max</ref>())))<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1type__error" kindref="compound">type_error</ref><sp/>=<sp/>py_err<sp/>&amp;&amp;<sp/>PyErr_ExceptionMatches(</highlight></codeline>
<codeline lineno="950"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03000000<sp/>&amp;&amp;<sp/>!defined(PYPY_VERSION)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyExc_SystemError</highlight></codeline>
<codeline lineno="952"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyExc_TypeError</highlight></codeline>
<codeline lineno="954"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1type__error" kindref="compound">type_error</ref><sp/>&amp;&amp;<sp/>convert<sp/>&amp;&amp;<sp/>PyNumber_Check(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>reinterpret_borrow&lt;object&gt;(std::is_floating_point&lt;T&gt;::value</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>PyNumber_Float(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>PyNumber_Long(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load(tmp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(T)<sp/>py_value;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a6d0cdd404d1fda6f2aa2d188814ecf96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a6d0cdd404d1fda6f2aa2d188814ecf96" kindref="member">cast</ref>(T<sp/>src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_floating_point&lt;T&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyFloat_FromDouble((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>src);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_signed&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLong((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>src);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromUnsignedLong((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>src);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_signed&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLongLong((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>src);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromUnsignedLongLong((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>src);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="structpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01std_1_1is__arithmetic_3_0b8bc721a69cf4852f57b8e15775b89ad_1a2b305144f43bd8caffd2885444c0eb6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(T,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>&lt;std::is_integral&lt;T&gt;::value&gt;(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="988"><highlight class="normal">};</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990" refid="structpybind11_1_1detail_1_1void__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1void__caster" kindref="compound">void_caster</ref><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="992" refid="structpybind11_1_1detail_1_1void__caster_1ae96577a4b36d0b60673c62a2192a5d12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__caster_1ae96577a4b36d0b60673c62a2192a5d12" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&amp;&amp;<sp/>src.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>())</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997" refid="structpybind11_1_1detail_1_1void__caster_1a41405abdb4ae53d8b77280aa1594b489" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1void__caster_1a41405abdb4ae53d8b77280aa1594b489" kindref="member">cast</ref>(T,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>().inc_ref();</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000" refid="structpybind11_1_1detail_1_1void__caster_1a0ece8d4a69fd3e9a4afbfeeb5f6f1265" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(T,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003" refid="classpybind11_1_1detail_1_1type__caster_3_01void__type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">void_type</ref>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__caster" kindref="compound">void_caster</ref>&lt;void_type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;void&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;void_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;void_type&gt;::cast</ref>;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009" refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a4899ddf4b0098df4b0e65096b10b958b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a4899ddf4b0098df4b0e65096b10b958b" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>a<sp/>capsule<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isinstance&lt;capsule&gt;(h))<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>reinterpret_borrow&lt;capsule&gt;(h);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>a<sp/>C++<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>((PyTypeObject<sp/>*)<sp/>h.<ref refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" kindref="member">get_type</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.size()<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Only<sp/>allowing<sp/>loading<sp/>from<sp/>a<sp/>single-value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1values__and__holders" kindref="compound">values_and_holders</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())).<ref refid="structpybind11_1_1detail_1_1values__and__holders_1a4b382c700ff741e113251a71eee1c464" kindref="member">begin</ref>()-&gt;<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>();</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034" refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a6806142f1bc8e8ef6f1f4388be624f34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a6806142f1bc8e8ef6f1f4388be624f34" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref>(ptr).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>().inc_ref();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041" refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a2d0eca09d4a974160f2f273020d8235a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a2d0eca09d4a974160f2f273020d8235a" kindref="member">cast_op_type</ref><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*&amp;;</highlight></codeline>
<codeline lineno="1042" refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1a7113f52b2492689908ff1cc5dc31687b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="1043" refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1ae8f1717fab80c9fd60d00f22155dafe7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01void_01_4_1ae8f1717fab80c9fd60d00f22155dafe7" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_descr(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;capsule&quot;</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1nullptr__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::nullptr_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__caster" kindref="compound">void_caster</ref>&lt;std::nullptr_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050" refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;bool&gt;<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1052" refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4_1ae01449581a321fb1e0e6cbd1be038fb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4_1ae01449581a321fb1e0e6cbd1be038fb7" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()<sp/>==<sp/>Py_True)<sp/>{<sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()<sp/>==<sp/>Py_False)<sp/>{<sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058" refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4_1ac537b64dbb50ddb530cb51768bdea4fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4_1ac537b64dbb50ddb530cb51768bdea4fa" kindref="member">cast</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(src<sp/>?<sp/>Py_True<sp/>:<sp/>Py_False).inc_ref();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061" refid="classpybind11_1_1detail_1_1type__caster_3_01bool_01_4_1ae69c922e108d6cef53adde9a40572e47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>for<sp/>UTF-{8,16,32}<sp/>C++<sp/>stl<sp/>strings:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065" refid="structpybind11_1_1detail_1_1string__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsView<sp/>=<sp/>false&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1string__caster" kindref="compound">string_caster</ref><sp/>{</highlight></codeline>
<codeline lineno="1066" refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType::value_type;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simplify<sp/>life<sp/>by<sp/>being<sp/>able<sp/>to<sp/>assume<sp/>standard<sp/>char<sp/>sizes<sp/>(the<sp/>standard<sp/>only<sp/>guarantees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimums,<sp/>but<sp/>Python<sp/>requires<sp/>exact<sp/>sizes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_same&lt;CharT,<sp/>char&gt;::value<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>)<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>char<sp/>size<sp/>!=<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_same&lt;CharT,<sp/>char16_t&gt;::value<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>)<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>char16_t<sp/>size<sp/>!=<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_same&lt;CharT,<sp/>char32_t&gt;::value<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>)<sp/>==<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>char32_t<sp/>size<sp/>!=<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wchar_t<sp/>can<sp/>be<sp/>either<sp/>16<sp/>bits<sp/>(Windows)<sp/>or<sp/>32<sp/>(everywhere<sp/>else)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!std::is_same&lt;CharT,<sp/>wchar_t&gt;::value<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>)<sp/>==<sp/>4,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>wchar_t<sp/>size<sp/>!=<sp/>2/4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1076" refid="structpybind11_1_1detail_1_1string__caster_1a194749f84b31a3ca9f84012b6249973e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>UTF_N<sp/>=<sp/>8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078" refid="structpybind11_1_1detail_1_1string__caster_1a56395b71453be6a570972f5be2b60859" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1string__caster_1a56395b71453be6a570972f5be2b60859" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>load_src<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyUnicode_Check(load_src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load_bytes(load_src);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load_bytes(load_src);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>below<sp/>is<sp/>a<sp/>guaranteed<sp/>failure<sp/>in<sp/>Python<sp/>3<sp/>when<sp/>PyUnicode_Check<sp/>returns<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="common_8h_1a88e12d91c83488db6594602d276f6ebb" kindref="member">PYBIND11_BYTES_CHECK</ref>(load_src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>reinterpret_steal&lt;object&gt;(PyUnicode_FromObject(load_src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)<sp/>{<sp/>PyErr_Clear();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_src<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>utfNbytes<sp/>=<sp/>reinterpret_steal&lt;object&gt;(PyUnicode_AsEncodedString(</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_src.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>UTF_N<sp/>==<sp/>8<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal"><sp/>:<sp/>UTF_N<sp/>==<sp/>16<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;utf-16&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;utf-32&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utfNbytes)<sp/>{<sp/>PyErr_Clear();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref><sp/>*<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="common_8h_1aafa0134475230ea63e9d8e5562642049" kindref="member">PYBIND11_BYTES_AS_STRING</ref>(utfNbytes.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/><ref refid="common_8h_1a7f493411293fa55624010c31455d30ab" kindref="member">PYBIND11_BYTES_SIZE</ref>(utfNbytes.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UTF_N<sp/>&gt;<sp/>8)<sp/>{<sp/><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>++;<sp/>length--;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>BOM<sp/>for<sp/>UTF-16/32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>StringType(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>length);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>loading<sp/>a<sp/>string_view<sp/>we<sp/>need<sp/>to<sp/>keep<sp/>the<sp/>encoded<sp/>Python<sp/>object<sp/>alive:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsView)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1af62c3b270c006fce8eb96756ca0c3979" kindref="member">loader_life_support::add_patient</ref>(utfNbytes);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119" refid="structpybind11_1_1detail_1_1string__caster_1a6a89113cefa6388771bc44da5ddee8a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1string__caster_1a6a89113cefa6388771bc44da5ddee8a9" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src.data());</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>nbytes<sp/>=<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>(src.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1string__caster_1a5af3f7b0e4999d0e7d4eafde0dda688b" kindref="member">CharT</ref>));</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>s<sp/>=<sp/>decode_utfN(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>nbytes);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127" refid="structpybind11_1_1detail_1_1string__caster_1aa49eba4261cd91b43858954b1667be85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(StringType,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(<ref refid="common_8h_1a4490c1733364f04fcea017da2eb38d38" kindref="member">PYBIND11_STRING_NAME</ref>));</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>decode_utfN(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>nbytes)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF_N<sp/>==<sp/>8<sp/><sp/>?<sp/>PyUnicode_DecodeUTF8(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>nbytes,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF_N<sp/>==<sp/>16<sp/>?<sp/>PyUnicode_DecodeUTF16(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>nbytes,<sp/>nullptr,<sp/>nullptr)<sp/>:</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_DecodeUTF32(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>nbytes,<sp/>nullptr,<sp/>nullptr);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyPy<sp/>seems<sp/>to<sp/>have<sp/>multiple<sp/>problems<sp/>related<sp/>to<sp/>PyUnicode_UTF*:<sp/>the<sp/>UTF8<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes<sp/>segfaults<sp/>for<sp/>unknown<sp/>reasons,<sp/>while<sp/>the<sp/>UTF16<sp/>and<sp/>32<sp/>versions<sp/>require<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-const<sp/>char<sp/>*<sp/>arguments,<sp/>which<sp/>is<sp/>also<sp/>a<sp/>nuissance,<sp/>so<sp/>bypass<sp/>the<sp/>whole<sp/>thing<sp/>by<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>passing<sp/>the<sp/>encoding<sp/>as<sp/>a<sp/>string<sp/>value,<sp/>which<sp/>works<sp/>properly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyUnicode_Decode(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>nbytes,<sp/>UTF_N<sp/>==<sp/>8<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal"><sp/>:<sp/>UTF_N<sp/>==<sp/>16<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;utf-16&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;utf-32&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>loading<sp/>into<sp/>a<sp/>std::string<sp/>or<sp/>char*,<sp/>accept<sp/>a<sp/>bytes<sp/>object<sp/>as-is<sp/>(i.e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>any<sp/>encoding/decoding<sp/>attempt).<sp/><sp/>For<sp/>other<sp/>C++<sp/>char<sp/>sizes<sp/>this<sp/>is<sp/>a<sp/>no-op.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>supports<sp/>loading<sp/>a<sp/>unicode<sp/>from<sp/>a<sp/>str,<sp/>doesn&apos;t<sp/>take<sp/>this<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>CharT&gt;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_bytes(<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(C)<sp/>==<sp/>1,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>&gt;<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8h_1a88e12d91c83488db6594602d276f6ebb" kindref="member">PYBIND11_BYTES_CHECK</ref>(src.ptr()))<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>were<sp/>passed<sp/>a<sp/>Python<sp/>3<sp/>raw<sp/>bytes;<sp/>accept<sp/>it<sp/>into<sp/>a<sp/>std::string<sp/>or<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>any<sp/>encoding<sp/>attempt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref><sp/>=<sp/><ref refid="common_8h_1aafa0134475230ea63e9d8e5562642049" kindref="member">PYBIND11_BYTES_AS_STRING</ref>(src.ptr());</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>StringType(<ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/><ref refid="common_8h_1a7f493411293fa55624010c31455d30ab" kindref="member">PYBIND11_BYTES_SIZE</ref>(src.ptr()));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>CharT&gt;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_bytes(<ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(C)<sp/>!=<sp/>1,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>&gt;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="1168" refid="structpybind11_1_1detail_1_1type__caster_3_01std_1_1basic__string_3_01_char_t_00_01_traits_00_0191d9cb07ed4985c792573463c150208f" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;is_std_char_type&lt;CharT&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1string__caster" kindref="compound">string_caster</ref>&lt;std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PYBIND11_HAS_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::basic_string_view&lt;CharT,<sp/>Traits&gt;,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;is_std_char_type&lt;CharT&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1string__caster" kindref="compound">string_caster</ref>&lt;std::basic_string_view&lt;CharT,<sp/>Traits&gt;,<sp/>true&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>caster<sp/>for<sp/>C-style<sp/>strings.<sp/><sp/>We<sp/>basically<sp/>use<sp/>a<sp/>std::string<sp/>type<sp/>caster,<sp/>but<sp/>also<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ability<sp/>to<sp/>use<sp/>None<sp/>as<sp/>a<sp/>nullptr<sp/>char*<sp/>(which<sp/>the<sp/>string<sp/>caster<sp/>doesn&apos;t<sp/>allow).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;CharT,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">is_std_char_type</ref>&lt;CharT&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1180" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aada51a10af8ce951280927bbc1cc832b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aada51a10af8ce951280927bbc1cc832b" kindref="member">StringType</ref><sp/>=<sp/>std::basic_string&lt;CharT&gt;;</highlight></codeline>
<codeline lineno="1181" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a56a987c0ca4887ba3ee48133781e39ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">StringCaster</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;StringType&gt;</ref>;</highlight></codeline>
<codeline lineno="1182" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a14f495a05584635e82902fa0673eb2cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">StringCaster</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a14f495a05584635e82902fa0673eb2cf" kindref="member">str_caster</ref>;</highlight></codeline>
<codeline lineno="1183" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1ade5b68a88856f3b15d1cec6013d4e1ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1none" kindref="compound">none</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1185" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a2bff62d8187fe6628e1a495905c82e41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a2bff62d8187fe6628e1a495905c82e41" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defer<sp/>accepting<sp/>None<sp/>to<sp/>other<sp/>overloads<sp/>(if<sp/>we<sp/>aren&apos;t<sp/>in<sp/>convert<sp/>mode):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1none" kindref="compound">none</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_caster.<ref refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" kindref="member">load</ref>(src,<sp/>convert);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1ac22f6fe99164f5138bbc1fbc408ce9db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1ac22f6fe99164f5138bbc1fbc408ce9db" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharT<sp/>*src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">pybind11::none</ref>().inc_ref();</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">StringCaster::cast</ref>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aada51a10af8ce951280927bbc1cc832b" kindref="member">StringType</ref>(src),<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a8506bb38ef8973c8273d38692dd2b6d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a8506bb38ef8973c8273d38692dd2b6d3" kindref="member">cast</ref>(CharT<sp/>src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;char,<sp/>CharT&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>s<sp/>=<sp/>PyUnicode_DecodeLatin1((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;src,<sp/>1,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">StringCaster::cast</ref>(<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aada51a10af8ce951280927bbc1cc832b" kindref="member">StringType</ref>(1,<sp/>src),<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a2a13f62d82c880f486244999c729019b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>CharT*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1none" kindref="compound">none</ref><sp/>?<sp/>nullptr<sp/>:<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CharT<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aada51a10af8ce951280927bbc1cc832b" kindref="member">StringType</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str_caster).c_str());<sp/>}</highlight></codeline>
<codeline lineno="1211" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1a0765126a231497c46fb65156f2e33827" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>CharT()<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1none" kindref="compound">none</ref>)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1value__error" kindref="compound">value_error</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>convert<sp/>None<sp/>to<sp/>a<sp/>character&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aada51a10af8ce951280927bbc1cc832b" kindref="member">StringType</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str_caster);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_len<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1value__error" kindref="compound">value_error</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>convert<sp/>empty<sp/>string<sp/>to<sp/>a<sp/>character&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>in<sp/>UTF-8<sp/>mode,<sp/>we<sp/>have<sp/>two<sp/>possible<sp/>failures:<sp/>one<sp/>for<sp/>a<sp/>unicode<sp/>character<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>too<sp/>high,<sp/>and<sp/>one<sp/>for<sp/>multiple<sp/>unicode<sp/>characters<sp/>(caught<sp/>later),<sp/>so<sp/>we<sp/>need<sp/>to<sp/>figure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>how<sp/>long<sp/>the<sp/>first<sp/>encoded<sp/>character<sp/>is<sp/>in<sp/>bytes<sp/>to<sp/>distinguish<sp/>between<sp/>these<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors.<sp/><sp/>We<sp/>also<sp/>allow<sp/>want<sp/>to<sp/>allow<sp/>unicode<sp/>characters<sp/>U+0080<sp/>through<sp/>U+00FF,<sp/>as<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>fit<sp/>into<sp/>a<sp/>single<sp/>char<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(StringCaster::UTF_N<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>str_len<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>str_len<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>v0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value[0]);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>char0_bytes<sp/>=<sp/>!(v0<sp/>&amp;<sp/>0x80)<sp/>?<sp/>1<sp/>:<sp/></highlight><highlight class="comment">//<sp/>low<sp/>bits<sp/>only:<sp/>0-127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v0<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0<sp/>?<sp/>2<sp/>:<sp/></highlight><highlight class="comment">//<sp/>0b110xxxxx<sp/>-<sp/>start<sp/>of<sp/>2-byte<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v0<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0<sp/>?<sp/>3<sp/>:<sp/></highlight><highlight class="comment">//<sp/>0b1110xxxx<sp/>-<sp/>start<sp/>of<sp/>3-byte<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4;<sp/></highlight><highlight class="comment">//<sp/>0b11110xxx<sp/>-<sp/>start<sp/>of<sp/>4-byte<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(char0_bytes<sp/>==<sp/>str_len)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>a<sp/>128-255<sp/>value,<sp/>we<sp/>can<sp/>decode<sp/>it<sp/>into<sp/>a<sp/>single<sp/>char:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(char0_bytes<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>(v0<sp/>&amp;<sp/>0xFC)<sp/>==<sp/>0xC0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>0x110000xx<sp/>0x10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CharT</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(((v0<sp/>&amp;<sp/>3)<sp/>&lt;&lt;<sp/>6)<sp/>+<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value[1])<sp/>&amp;<sp/>0x3F));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we<sp/>have<sp/>a<sp/>single<sp/>character,<sp/>but<sp/>it&apos;s<sp/>&gt;<sp/>U+00FF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1value__error" kindref="compound">value_error</ref>(</highlight><highlight class="stringliteral">&quot;Character<sp/>code<sp/>point<sp/>not<sp/>in<sp/>range(0x100)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF-16<sp/>is<sp/>much<sp/>easier:<sp/>we<sp/>can<sp/>only<sp/>have<sp/>a<sp/>surrogate<sp/>pair<sp/>for<sp/>values<sp/>above<sp/>U+FFFF,<sp/>thus<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>surrogate<sp/>pair<sp/>with<sp/>total<sp/>length<sp/>2<sp/>instantly<sp/>indicates<sp/>a<sp/>range<sp/>error<sp/>(but<sp/>not<sp/>a<sp/>&quot;your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>was<sp/>too<sp/>long&quot;<sp/>error).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(StringCaster::UTF_N<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>str_len<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char16_t<sp/>v0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">char16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value[0]);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v0<sp/>&gt;=<sp/>0xD800<sp/>&amp;&amp;<sp/>v0<sp/>&lt;<sp/>0xE000)</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1value__error" kindref="compound">value_error</ref>(</highlight><highlight class="stringliteral">&quot;Character<sp/>code<sp/>point<sp/>not<sp/>in<sp/>range(0x10000)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_len<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1value__error" kindref="compound">value_error</ref>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>character,<sp/>but<sp/>multi-character<sp/>string<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value[0];</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1ade2dc136951a6f88114d9e336a18caf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1ade2dc136951a6f88114d9e336a18caf0" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_descr(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(<ref refid="common_8h_1a4490c1733364f04fcea017da2eb38d38" kindref="member">PYBIND11_STRING_NAME</ref>));<sp/>}</highlight></codeline>
<codeline lineno="1258" refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aa870eb6bad9842223e7e41185b6be20a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_char_t_00_01enable__if__t_3_01is__std__char__type_a1493bdf93dfc78a2d4b6f42ce64ca33_1aa870eb6bad9842223e7e41185b6be20a" kindref="member">cast_op_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t&lt;pybind11::detail::cast_op_type&lt;_T&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>implementation<sp/>for<sp/>std::tuple<sp/>and<sp/>std::pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262" refid="classpybind11_1_1detail_1_1tuple__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tuple,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1tuple__caster" kindref="compound">tuple_caster</ref><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>Tuple&lt;Ts...&gt;;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>indices<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence&lt;size&gt;</ref>;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268" refid="classpybind11_1_1detail_1_1tuple__caster_1aacfc0faa03fa22c340bff6da14721728" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1aacfc0faa03fa22c340bff6da14721728" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isinstance&lt;sequence&gt;(src))</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seq<sp/>=<sp/>reinterpret_borrow&lt;sequence&gt;(src);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seq.size()<sp/>!=<sp/>size)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load_impl(seq,<sp/>convert,<sp/>indices{});</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1278" refid="classpybind11_1_1detail_1_1tuple__caster_1ae6cbdbf8a9f0bb216ebb5fbaf1aa2142" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1ae6cbdbf8a9f0bb216ebb5fbaf1aa2142" kindref="member">cast</ref>(T<sp/>&amp;&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_impl(std::forward&lt;T&gt;(src),<sp/>policy,<sp/>parent,<sp/>indices{});</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282" refid="classpybind11_1_1detail_1_1tuple__caster_1add9ceea714b2c57ddd07b15b771cc26f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1add9ceea714b2c57ddd07b15b771cc26f" kindref="member">name</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_descr(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Tuple[&quot;</highlight><highlight class="normal">)<sp/>+<sp/>detail::concat(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;Ts&gt;::name</ref>()...)<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286" refid="classpybind11_1_1detail_1_1tuple__caster_1ac229281f717e8e21415517ea4c4f2b67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1ac229281f717e8e21415517ea4c4f2b67" kindref="member">cast_op_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="classpybind11_1_1detail_1_1tuple__caster_1a26eafb09af38c581a07bab144753f3ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>()<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>implicit_cast(indices{});<sp/>}</highlight></codeline>
<codeline lineno="1289" refid="classpybind11_1_1detail_1_1tuple__caster_1ace79723e539420ef681271c69b041ed6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(*this).implicit_cast(indices{});<sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="1293" refid="classpybind11_1_1detail_1_1tuple__caster_1af93362ccde1207805bb8a0cfb2f41233" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1af93362ccde1207805bb8a0cfb2f41233" kindref="member">implicit_cast</ref>(<ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;Is...&gt;</ref>)<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>(cast_op&lt;Ts&gt;(std::get&lt;Is&gt;(subcasters))...);<sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="1295" refid="classpybind11_1_1detail_1_1tuple__caster_1a0d2fe45fc6cd3b46579185aba5abc4e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1a0d2fe45fc6cd3b46579185aba5abc4e6" kindref="member">implicit_cast</ref>(<ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;Is...&gt;</ref>)<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>(cast_op&lt;Ts&gt;(std::move(std::get&lt;Is&gt;(subcasters)))...);<sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297" refid="classpybind11_1_1detail_1_1tuple__caster_1a2dc0cbbe66d11d06a1c3eeb0b0ea9ef6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1a2dc0cbbe66d11d06a1c3eeb0b0ea9ef6" kindref="member">load_impl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1sequence" kindref="compound">sequence</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;&gt;</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="1300" refid="classpybind11_1_1detail_1_1tuple__caster_1a8ed12d68fc7ca4922983fe86c4c98301" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1a8ed12d68fc7ca4922983fe86c4c98301" kindref="member">load_impl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1sequence" kindref="compound">sequence</ref><sp/>&amp;seq,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert,<sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;Is...&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>r<sp/>:<sp/>{std::get&lt;Is&gt;(subcasters).load(seq[Is],<sp/>convert)...})</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implementation:<sp/>Convert<sp/>a<sp/>C++<sp/>tuple<sp/>into<sp/>a<sp/>Python<sp/>tuple<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="1309" refid="classpybind11_1_1detail_1_1tuple__caster_1a44ee7bbe7705e29e431c4870130af779" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1a44ee7bbe7705e29e431c4870130af779" kindref="member">cast_impl</ref>(T<sp/>&amp;&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent,<sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;Is...&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;object,<sp/>size&gt;<sp/>entries{{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_steal&lt;object&gt;(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;Ts&gt;::cast</ref>(std::get&lt;Is&gt;(std::forward&lt;T&gt;(src)),<sp/>policy,<sp/>parent))...</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;entry:<sp/>entries)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entry)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>();</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>result(size);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entry:<sp/>entries)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(result.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>counter++,<sp/>entry.release().ptr());</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323" refid="classpybind11_1_1detail_1_1tuple__caster_1ad4fcaaeafba69fae759dc4b912007266" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple&lt;make_caster&lt;Ts&gt;...&gt;<sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster_1ad4fcaaeafba69fae759dc4b912007266" kindref="member">subcasters</ref>;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::pair&lt;T1,<sp/>T2&gt;&gt;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster" kindref="compound">tuple_caster</ref>&lt;std::pair,<sp/>T1,<sp/>T2&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>&lt;Ts...&gt;&gt;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1tuple__caster" kindref="compound">tuple_caster</ref>&lt;std::tuple,<sp/>Ts...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1335" refid="structpybind11_1_1detail_1_1holder__helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1holder__helper" kindref="compound">holder_helper</ref><sp/>{</highlight></codeline>
<codeline lineno="1336" refid="structpybind11_1_1detail_1_1holder__helper_1a4a9713fa5cfdf3b0f923e7ad006144b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1holder__helper_1a4a9713fa5cfdf3b0f923e7ad006144b4" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;p)<sp/>-&gt;<sp/>decltype(p.get())<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.get();<sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>holder_type&gt;</highlight></codeline>
<codeline lineno="1341" refid="structpybind11_1_1detail_1_1copyable__holder__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster" kindref="compound">copyable_holder_caster</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1343" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a5c28bafc94c53278095dc869dc5c5737" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">base</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base&lt;type&gt;</ref>;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_base_of&lt;<ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">base</ref>,<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;type&gt;</ref>&gt;::value,</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Holder<sp/>classes<sp/>are<sp/>only<sp/>supported<sp/>for<sp/>custom<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base::base;</highlight></codeline>
<codeline lineno="1347" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1afb028f5da33ba373d8aad123f0cd3c23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">base::cast</ref>;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base::typeinfo;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base::value;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a3fa88695191222da1021e31eace02bfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a3fa88695191222da1021e31eace02bfa" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::template<sp/>load_impl&lt;copyable_holder_caster&lt;type,<sp/>holder_type&gt;&gt;(src,<sp/>convert);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a78c58c36ffbc469b84031257ae7a12e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;value;<sp/>}</highlight></codeline>
<codeline lineno="1356" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a69305fcd964a19cab862a80708a79f71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(this-&gt;value);<sp/>}</highlight></codeline>
<codeline lineno="1357" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1aacc88af505b2ab84c49ac713dc05274f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>holder_type*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;holder;<sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>for<sp/>Intel<sp/>compiler<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>pybind11<sp/>issue<sp/>94</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(__ICC)<sp/>||<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>holder_type&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holder;<sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1af03bdcbb00577d0d0bcfc326505b6c3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>holder_type&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holder;<sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a431e797b8089d2f55c2968221c030aad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a431e797b8089d2f55c2968221c030aad" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_type<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1holder__helper" kindref="compound">holder_helper&lt;holder_type&gt;::get</ref>(src);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base&lt;type&gt;::cast_holder</ref>(ptr,<sp/>&amp;src);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1373" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a47dd585b718e81e33e44307daa659ba4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref>;</highlight></codeline>
<codeline lineno="1374" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a8d0ce2632f3447894486ed9e783bf8b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a8d0ce2632f3447894486ed9e783bf8b5" kindref="member">check_holder_compat</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeinfo-&gt;default_holder)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>load<sp/>a<sp/>custom<sp/>holder<sp/>type<sp/>from<sp/>a<sp/>default-holder<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1ad8302676538b44cb69c5e3409eb08c58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1ad8302676538b44cb69c5e3409eb08c58" kindref="member">load_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref><sp/>&amp;v_h)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1abf77ff9d83a347ddf41379cd85e564f8" kindref="member">holder_constructed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>();</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holder<sp/>=<sp/>v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a3720f1824e005bfc837853a3fb21ace2" kindref="member">holder</ref>&lt;holder_type&gt;();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>cast<sp/>from<sp/>non-held<sp/>to<sp/>held<sp/>instance<sp/>(T&amp;<sp/>to<sp/>Holder&lt;T&gt;)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(NDEBUG)</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>type<sp/>information)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>type_id&lt;holder_type&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>holder_type,<sp/>detail::enable_if_t&lt;!std::is_constructible&lt;T,<sp/>const<sp/>T<sp/>&amp;,<sp/>type*&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1395" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a8645db3783f38479dfc2b58aff3477c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a8645db3783f38479dfc2b58aff3477c0" kindref="member">try_implicit_casts</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>holder_type,<sp/>detail::enable_if_t&lt;std::is_constructible&lt;T,<sp/>const<sp/>T<sp/>&amp;,<sp/>type*&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1398" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a6390c778768ca0ccda1ede71ccefe237" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a6390c778768ca0ccda1ede71ccefe237" kindref="member">try_implicit_casts</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref><sp/>:<sp/>typeinfo-&gt;implicit_casts)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster" kindref="compound">copyable_holder_caster</ref><sp/>sub_caster(*<ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>.first);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sub_caster.<ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a3fa88695191222da1021e31eace02bfa" kindref="member">load</ref>(src,<sp/>convert))<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>.second(sub_caster.<ref refid="classpybind11_1_1detail_1_1type__caster__generic_1a9209746eb23e540a3a48ec3e4e18a8ea" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holder<sp/>=<sp/>holder_type(sub_caster.<ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a2557f2aa3c9bfe451f57cb5d075d84a6" kindref="member">holder</ref>,<sp/>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>*)<sp/>value);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a627986c69d192a8dc2ee9470ae2c9c9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a627986c69d192a8dc2ee9470ae2c9c9d" kindref="member">try_direct_conversions</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413" refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a2557f2aa3c9bfe451f57cb5d075d84a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>holder_type<sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster_1a2557f2aa3c9bfe451f57cb5d075d84a6" kindref="member">holder</ref>;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1418" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;T&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster" kindref="compound">copyable_holder_caster</ref>&lt;T,<sp/>std::shared_ptr&lt;T&gt;&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>holder_type&gt;</highlight></codeline>
<codeline lineno="1421" refid="structpybind11_1_1detail_1_1move__only__holder__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1move__only__holder__caster" kindref="compound">move_only_holder_caster</ref><sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_base_of&lt;<ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base&lt;type&gt;</ref>,<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;type&gt;</ref>&gt;::value,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Holder<sp/>classes<sp/>are<sp/>only<sp/>supported<sp/>for<sp/>custom<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425" refid="structpybind11_1_1detail_1_1move__only__holder__caster_1a70de538cd39c86ebd4b65a3b9fcf311d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1move__only__holder__caster_1a70de538cd39c86ebd4b65a3b9fcf311d" kindref="member">cast</ref>(holder_type<sp/>&amp;&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1holder__helper" kindref="compound">holder_helper&lt;holder_type&gt;::get</ref>(src);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1type__caster__base" kindref="compound">type_caster_base&lt;type&gt;::cast_holder</ref>(ptr,<sp/>&amp;src);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429" refid="structpybind11_1_1detail_1_1move__only__holder__caster_1aff01249625c513b173f0aca5478db17f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1move__only__holder__caster_1aff01249625c513b173f0aca5478db17f" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">type_caster_base&lt;type&gt;::name</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>deleter&gt;</highlight></codeline>
<codeline lineno="1433" refid="classpybind11_1_1detail_1_1type__caster_3_01std_1_1unique__ptr_3_01type_00_01deleter_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::unique_ptr&lt;type,<sp/>deleter&gt;&gt;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1move__only__holder__caster" kindref="compound">move_only_holder_caster</ref>&lt;type,<sp/>std::unique_ptr&lt;type,<sp/>deleter&gt;&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>holder_type&gt;</highlight></codeline>
<codeline lineno="1437" refid="namespacepybind11_1_1detail_1a8056f1ce70548f8a23d7557c95331ea4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a8056f1ce70548f8a23d7557c95331ea4" kindref="member">type_caster_holder</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t&lt;std::is_copy_constructible&lt;holder_type&gt;::value</ref>,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1copyable__holder__caster" kindref="compound">copyable_holder_caster&lt;type, holder_type&gt;</ref>,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1move__only__holder__caster" kindref="compound">move_only_holder_caster&lt;type, holder_type&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441" refid="structpybind11_1_1detail_1_1always__construct__holder_1ae3f084009ad3e7745a676001719d83bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>false&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1always__construct__holder" kindref="compound">always_construct_holder</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Value;<sp/>};</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444" refid="cast_8h_1a5711cbddf22538bf081fba49042adea9" refkind="member"><highlight class="preprocessor">#define<sp/>PYBIND11_DECLARE_HOLDER_TYPE(type,<sp/>holder_type,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>pybind11<sp/>{<sp/>namespace<sp/>detail<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>type&gt;<sp/>\</highlight></codeline>
<codeline lineno="1447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>always_construct_holder&lt;holder_type&gt;<sp/>:<sp/>always_construct_holder&lt;void,<sp/>##__VA_ARGS__&gt;<sp/><sp/>{<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>type&gt;<sp/>\</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>class<sp/>type_caster&lt;holder_type,<sp/>enable_if_t&lt;!is_shared_ptr&lt;holder_type&gt;::value&gt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="1450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>public<sp/>type_caster_holder&lt;type,<sp/>holder_type&gt;<sp/>{<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PYBIND11_DECLARE_HOLDER_TYPE<sp/>holder<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454" refid="structpybind11_1_1detail_1_1is__holder__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>base,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>holder&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__holder__type" kindref="compound">is_holder_type</ref><sp/>:</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_base_of&lt;detail::type_caster_holder&lt;base,<sp/>holder&gt;,<sp/>detail::type_caster&lt;holder&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>always-supported<sp/>unique_ptr<sp/>holders:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457" refid="structpybind11_1_1detail_1_1is__holder__type_3_01base_00_01std_1_1unique__ptr_3_01base_00_01deleter_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>base,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>deleter&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1is__holder__type" kindref="compound">is_holder_type</ref>&lt;<ref refid="structpybind11_1_1base" kindref="compound">base</ref>,<sp/><ref refid="namespacestd" kindref="compound">std</ref>::unique_ptr&lt;base,<sp/>deleter&gt;&gt;<sp/>:</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460" refid="structpybind11_1_1detail_1_1handle__type__name_1a5f6e6eb341ce6698d7779a9850ff5245" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name_1a5f6e6eb341ce6698d7779a9850ff5245" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_&lt;T&gt;();<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1461" refid="structpybind11_1_1detail_1_1handle__type__name_3_01bytes_01_4_1a3ea8136a7409baa455ff4b774873c6ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name</ref>&lt;<ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name_3_01bytes_01_4_1a3ea8136a7409baa455ff4b774873c6ea" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(<ref refid="common_8h_1aa4f09eb05629a1d670f0347e6fdf3f29" kindref="member">PYBIND11_BYTES_NAME</ref>);<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1462" refid="structpybind11_1_1detail_1_1handle__type__name_3_01args_01_4_1a87cb3acd0a96513cfbd8a20ef1b41636" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name</ref>&lt;<ref refid="classpybind11_1_1args" kindref="compound">args</ref>&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name_3_01args_01_4_1a87cb3acd0a96513cfbd8a20ef1b41636" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;*args&quot;</highlight><highlight class="normal">);<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1463" refid="structpybind11_1_1detail_1_1handle__type__name_3_01kwargs_01_4_1a8ef012e42b7df2281d5673a0a1f0739f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name</ref>&lt;<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name_3_01kwargs_01_4_1a8ef012e42b7df2281d5673a0a1f0739f" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;**kwargs&quot;</highlight><highlight class="normal">);<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;</highlight></codeline>
<codeline lineno="1466" refid="structpybind11_1_1detail_1_1pyobject__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1pyobject__caster" kindref="compound">pyobject_caster</ref><sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>type,<sp/>enable_if_t&lt;std::is_same&lt;T,<sp/>handle&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1468" refid="structpybind11_1_1detail_1_1pyobject__caster_1a44b086a991c765c54f9fc329f3ed2e71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pyobject__caster_1a44b086a991c765c54f9fc329f3ed2e71" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/>value<sp/>=<sp/>src;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);<sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>type,<sp/>enable_if_t&lt;std::is_base_of&lt;object,<sp/>T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1471" refid="structpybind11_1_1detail_1_1pyobject__caster_1a44b086a991c765c54f9fc329f3ed2e71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pyobject__caster_1a44b086a991c765c54f9fc329f3ed2e71" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isinstance&lt;type&gt;(src))</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>reinterpret_borrow&lt;type&gt;(src);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478" refid="structpybind11_1_1detail_1_1pyobject__caster_1a6fbce9ed800656a3b95779c8bcfeeb20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1pyobject__caster_1a6fbce9ed800656a3b95779c8bcfeeb20" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>();</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481" refid="structpybind11_1_1detail_1_1pyobject__caster_1afdfc67e5c7aca93612511a46cccaf2e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1handle__type__name" kindref="compound">handle_type_name&lt;type&gt;::name</ref>());</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1485" refid="classpybind11_1_1detail_1_1type__caster_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a016b3ed4ebf8cb36fcbbeed6012bc32e" kindref="member">is_pyobject</ref>&lt;T&gt;::value&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1pyobject__caster" kindref="compound">pyobject_caster</ref>&lt;T&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>conditions<sp/>for<sp/>enabling<sp/>moving<sp/>are<sp/>quite<sp/>restrictive:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>At<sp/>compile<sp/>time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>T<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>non-const,<sp/>non-pointer,<sp/>non-reference<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>type_caster&lt;T&gt;::operator<sp/>T&amp;()<sp/>must<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>type<sp/>must<sp/>be<sp/>move<sp/>constructible<sp/>(obviously)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>At<sp/>run-time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>if<sp/>the<sp/>type<sp/>is<sp/>non-copy-constructible,<sp/>the<sp/>object<sp/>must<sp/>be<sp/>the<sp/>sole<sp/>owner<sp/>of<sp/>the<sp/>type<sp/>(i.e.<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>must<sp/>have<sp/>ref_count()<sp/>==<sp/>1)h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>of<sp/>the<sp/>above<sp/>are<sp/>not<sp/>satisfied,<sp/>we<sp/>fall<sp/>back<sp/>to<sp/>copying.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496" refid="namespacepybind11_1_1detail_1ab96eb0dc6544902fbae045953bd5075f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">move_is_plain_type</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_none_of</ref>&lt;T,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_void,<sp/>std::is_pointer,<sp/>std::is_reference,<sp/>std::is_const</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="1499" refid="structpybind11_1_1detail_1_1move__always" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1move__always" kindref="compound">move_always</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1500" refid="structpybind11_1_1detail_1_1move__always_3_01_t_00_01enable__if__t_3_01all__of_3_01move__is__pla1a566c301e5c8e35e666d20f06691d43" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1move__always" kindref="compound">move_always</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">move_is_plain_type</ref>&lt;T&gt;,</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="structpybind11_1_1detail_1_1is__copy__constructible" kindref="compound">is_copy_constructible</ref>&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_move_constructible&lt;T&gt;,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;decltype(std::declval&lt;make_caster&lt;T&gt;&gt;().operator<sp/>T&amp;()),<sp/>T&amp;&gt;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">&gt;::value&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1506" refid="structpybind11_1_1detail_1_1move__if__unreferenced" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1move__if__unreferenced" kindref="compound">move_if_unreferenced</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1507" refid="structpybind11_1_1detail_1_1move__if__unreferenced_3_01_t_00_01enable__if__t_3_01all__of_3_01movedeb75add531442492ce7b7efbb662fd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1move__if__unreferenced" kindref="compound">move_if_unreferenced</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">move_is_plain_type</ref>&lt;T&gt;,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation</ref>&lt;<ref refid="structpybind11_1_1detail_1_1move__always" kindref="compound">move_always</ref>&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::is_move_constructible&lt;T&gt;,</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;decltype(std::declval&lt;make_caster&lt;T&gt;&gt;().operator<sp/>T&amp;()),<sp/>T&amp;&gt;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">&gt;::value&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1513" refid="namespacepybind11_1_1detail_1a9b95d0bea18a9cb7599182d1f32a7f6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">move_never</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">none_of&lt;move_always&lt;T&gt;</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1move__if__unreferenced" kindref="compound">move_if_unreferenced&lt;T&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>whether<sp/>returning<sp/>a<sp/>`type`<sp/>from<sp/>a<sp/>cast<sp/>on<sp/>type&apos;s<sp/>type_caster<sp/>is<sp/>going<sp/>to<sp/>result<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>or<sp/>pointer<sp/>to<sp/>a<sp/>local<sp/>variable<sp/>of<sp/>the<sp/>type_caster.<sp/><sp/>Basically,<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-reference/pointer<sp/>`type`s<sp/>and<sp/>reference/pointers<sp/>from<sp/>a<sp/>type_caster_generic<sp/>are<sp/>safe;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>everything<sp/>else<sp/>returns<sp/>a<sp/>reference/pointer<sp/>to<sp/>a<sp/>local<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519" refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>(std::is_reference&lt;type&gt;::value<sp/>||<sp/>std::is_pointer&lt;type&gt;::value)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>!std::is_base_of&lt;<ref refid="classpybind11_1_1detail_1_1type__caster__generic" kindref="compound">type_caster_generic</ref>,<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;type&gt;</ref>&gt;::value</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>value<sp/>returned<sp/>from<sp/>a<sp/>C++<sp/>function<sp/>is<sp/>being<sp/>cast<sp/>back<sp/>to<sp/>Python,<sp/>we<sp/>almost<sp/>always<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>force<sp/>`policy<sp/>=<sp/>move`,<sp/>regardless<sp/>of<sp/>the<sp/>return<sp/>value<sp/>policy<sp/>the<sp/>function/method<sp/>was<sp/>declared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with.<sp/><sp/>Some<sp/>classes<sp/>(most<sp/>notably<sp/>Eigen::Ref<sp/>and<sp/>related)<sp/>need<sp/>to<sp/>avoid<sp/>this,<sp/>and<sp/>so<sp/>can<sp/>do<sp/>so<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specializing<sp/>this<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528" refid="structpybind11_1_1detail_1_1return__value__policy__override" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1return__value__policy__override" kindref="compound">return_value_policy_override</ref><sp/>{</highlight></codeline>
<codeline lineno="1529" refid="structpybind11_1_1detail_1_1return__value__policy__override_1a7f2191863100c4aeace6d25e816c618f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/><ref refid="structpybind11_1_1detail_1_1return__value__policy__override_1a7f2191863100c4aeace6d25e816c618f" kindref="member">policy</ref>(<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::is_lvalue_reference&lt;Return&gt;::value<sp/>&amp;&amp;<sp/>!std::is_pointer&lt;Return&gt;::value</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">return_value_policy::move</ref><sp/>:<sp/>p;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Basic<sp/>python<sp/>-&gt;<sp/>C++<sp/>casting;<sp/>throws<sp/>if<sp/>casting<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536" refid="namespacepybind11_1_1detail_1af048e14268c595612522931a5d182c04" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE&gt;<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;T, SFINAE&gt;</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a96ea50836acb98a3a0537759d52c969c" kindref="member">load_type</ref>(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster&lt;T, SFINAE&gt;</ref><sp/>&amp;conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!conv.<ref refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>cast<sp/>Python<sp/>instance<sp/>to<sp/>C++<sp/>type<sp/>(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>cast<sp/>Python<sp/>instance<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string)<sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" kindref="member">get_type</ref>())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>C++<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>type_id&lt;T&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conv;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrapper<sp/>around<sp/>the<sp/>above<sp/>that<sp/>also<sp/>constructs<sp/>and<sp/>returns<sp/>a<sp/>type_caster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548" refid="namespacepybind11_1_1detail_1a96ea50836acb98a3a0537759d52c969c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1a96ea50836acb98a3a0537759d52c969c" kindref="member">load_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;</ref><sp/>conv;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a96ea50836acb98a3a0537759d52c969c" kindref="member">load_type</ref>(conv,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conv;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pytype<sp/>-&gt;<sp/>C++<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>detail::enable_if_t&lt;!detail::is_pyobject&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1558" refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" refkind="member"><highlight class="normal">T<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!cast_is_temporary_value_reference&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>cast<sp/>type<sp/>to<sp/>reference:<sp/>value<sp/>is<sp/>local<sp/>to<sp/>type<sp/>caster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_op&lt;T&gt;(load_type&lt;T&gt;(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>));</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pytype<sp/>-&gt;<sp/>pytype<sp/>(calls<sp/>converting<sp/>constructor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>detail::enable_if_t&lt;detail::is_pyobject&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">T<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(reinterpret_borrow&lt;object&gt;(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>));<sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>type<sp/>-&gt;<sp/>py::object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>detail::enable_if_t&lt;!detail::is_pyobject&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1571" refid="namespacepybind11_1a87f21f6281dddbba982c721e93d1f60e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference,</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy<sp/>==<sp/>return_value_policy::automatic)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>std::is_pointer&lt;T&gt;::value<sp/>?<sp/>return_value_policy::take_ownership<sp/>:<sp/>return_value_policy::copy;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy<sp/>==<sp/>return_value_policy::automatic_reference)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>std::is_pointer&lt;T&gt;::value<sp/>?<sp/>return_value_policy::reference<sp/>:<sp/>return_value_policy::copy;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster&lt;T&gt;::cast</ref>(value,<sp/>policy,<sp/>parent));</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580" refid="classpybind11_1_1handle_1a010389458d06cdacb08f1e0e62f66dfc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">handle::cast</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pybind11::cast&lt;T&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1581" refid="classpybind11_1_1handle_1a7c91127cb935750e0870e674f5f07249" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">handle::cast</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1584" refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" refkind="member"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;!detail::move_never&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;obj)<sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.<ref refid="classpybind11_1_1detail_1_1object__api_1aa1e808c7d0773561b3c552cf93d13368" kindref="member">ref_count</ref>()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>cast<sp/>Python<sp/>instance<sp/>to<sp/>C++<sp/>rvalue:<sp/>instance<sp/>has<sp/>multiple<sp/>references&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>move<sp/>from<sp/>Python<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>(std::string)<sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(obj.<ref refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" kindref="member">get_type</ref>())<sp/>+</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>instance<sp/>to<sp/>C++<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>type_id&lt;T&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>instance:<sp/>instance<sp/>has<sp/>multiple<sp/>references&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>into<sp/>a<sp/>temporary<sp/>and<sp/>return<sp/>that,<sp/>because<sp/>the<sp/>reference<sp/>may<sp/>be<sp/>a<sp/>local<sp/>value<sp/>of<sp/>`conv`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref><sp/>=<sp/>std::move(detail::load_type&lt;T&gt;(obj).</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T&amp;());</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>cast()<sp/>on<sp/>an<sp/>rvalue<sp/>calls<sp/>pybind::cast<sp/>with<sp/>the<sp/>object<sp/>rvalue,<sp/>which<sp/>does:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>we<sp/>have<sp/>to<sp/>move<sp/>(because<sp/>T<sp/>has<sp/>no<sp/>copy<sp/>constructor),<sp/>do<sp/>it.<sp/><sp/>This<sp/>will<sp/>fail<sp/>if<sp/>the<sp/>moved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>object<sp/>has<sp/>multiple<sp/>references,<sp/>but<sp/>trying<sp/>to<sp/>copy<sp/>will<sp/>fail<sp/>to<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>both<sp/>movable<sp/>and<sp/>copyable,<sp/>check<sp/>ref<sp/>count:<sp/>if<sp/>1,<sp/>move;<sp/>otherwise<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Otherwise<sp/>(not<sp/>movable),<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604" refid="namespacepybind11_1adb9d391ba89e4dbc85bc088c637a454b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;detail::move_always&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>move&lt;T&gt;(std::move(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607" refid="namespacepybind11_1a37c29751349cfc3a1b5e8b4765c23e55" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;detail::move_if_unreferenced&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.ref_count()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast&lt;T&gt;(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>move&lt;T&gt;(std::move(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613" refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;detail::move_never&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">cast</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast&lt;T&gt;(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617" refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">object::cast</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pybind11::cast&lt;T&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1618" refid="classpybind11_1_1object_1a1d5a34290705e5124f352346563bf83d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">object::cast</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pybind11::cast&lt;T&gt;(std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="1619" refid="classpybind11_1_1object_1a764785e72f3f451c198c9d09c9ff0fe2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">object::cast</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1620" refid="classpybind11_1_1object_1a8bc02531431d381c27343568a60d641e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a23d1d141b22c8733a7212bc74d89cbf8" kindref="member">object::cast</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declared<sp/>in<sp/>pytypes.h:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;!is_pyobject&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="1626" refid="namespacepybind11_1_1detail_1a2febfd4cdc46897375a87a8884c10cb0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2febfd4cdc46897375a87a8884c10cb0" kindref="member">object_or_cast</ref>(T<sp/>&amp;&amp;o)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">pybind11::cast</ref>(std::forward&lt;T&gt;(o));<sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628" refid="structpybind11_1_1detail_1_1overload__unused" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1overload__unused" kindref="compound">overload_unused</ref><sp/>{};<sp/></highlight><highlight class="comment">//<sp/>Placeholder<sp/>type<sp/>for<sp/>the<sp/>unneeded<sp/>(and<sp/>dead<sp/>code)<sp/>static<sp/>variable<sp/>in<sp/>the<sp/>OVERLOAD_INT<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629" refid="namespacepybind11_1_1detail_1a98f587c0f16ab94b18720beb604fd6b6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ret_type&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a98f587c0f16ab94b18720beb604fd6b6" kindref="member">overload_caster_t</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">conditional_t</ref>&lt;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">cast_is_temporary_value_reference&lt;ret_type&gt;::value</ref>,<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;ret_type&gt;</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1overload__unused" kindref="compound">overload_unused</ref>&gt;;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Trampoline<sp/>use:<sp/>for<sp/>reference/pointer<sp/>types<sp/>to<sp/>value-converted<sp/>values,<sp/>we<sp/>do<sp/>a<sp/>value<sp/>cast,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>result<sp/>in<sp/>the<sp/>given<sp/>variable.<sp/><sp/>For<sp/>other<sp/>types,<sp/>this<sp/>is<sp/>a<sp/>no-op.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634" refid="namespacepybind11_1_1detail_1aa407aa03488007376e81a80c2cadf6df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;cast_is_temporary_value_reference&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a16e98941d1d372da54ccfdd8a92be21e" kindref="member">cast_ref</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;o,<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;T&gt;</ref><sp/>&amp;caster)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_op&lt;T&gt;(<ref refid="namespacepybind11_1_1detail_1a96ea50836acb98a3a0537759d52c969c" kindref="member">load_type</ref>(caster,<sp/>o));</highlight></codeline>
<codeline lineno="1636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1637" refid="namespacepybind11_1_1detail_1a16e98941d1d372da54ccfdd8a92be21e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;!cast_is_temporary_value_reference&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a16e98941d1d372da54ccfdd8a92be21e" kindref="member">cast_ref</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1overload__unused" kindref="compound">overload_unused</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>cast_ref<sp/>fallback<sp/>invoked&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Trampoline<sp/>use:<sp/>Having<sp/>a<sp/>pybind11::cast<sp/>with<sp/>an<sp/>invalid<sp/>reference<sp/>type<sp/>is<sp/>going<sp/>to<sp/>static_assert,<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>though<sp/>if<sp/>it&apos;s<sp/>in<sp/>dead<sp/>code,<sp/>so<sp/>we<sp/>provide<sp/>a<sp/>&quot;trampoline&quot;<sp/>to<sp/>pybind11::cast<sp/>that<sp/>only<sp/>does<sp/>anything<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cases<sp/>where<sp/>pybind11::cast<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643" refid="namespacepybind11_1_1detail_1aec69451b22f293ed13534636a28c60e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;!cast_is_temporary_value_reference&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1af3a97f48a2656c73b086f9081396e7fe" kindref="member">cast_safe</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;o)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pybind11::cast&lt;T&gt;(std::move(o));<sp/>}</highlight></codeline>
<codeline lineno="1645" refid="namespacepybind11_1_1detail_1af3a97f48a2656c73b086f9081396e7fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;cast_is_temporary_value_reference&lt;T&gt;::value</ref>,<sp/>T&gt;<sp/><ref refid="namespacepybind11_1_1detail_1af3a97f48a2656c73b086f9081396e7fe" kindref="member">cast_safe</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>cast_safe<sp/>fallback<sp/>invoked&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1647" refid="namespacepybind11_1_1detail_1a53573e9e461a11419356b0082975ed5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a53573e9e461a11419356b0082975ed5a" kindref="member">cast_safe&lt;void&gt;</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference,</highlight></codeline>
<codeline lineno="1652" refid="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/><ref refid="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" kindref="member">make_tuple</ref>(Args&amp;&amp;...<sp/>args_)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;object,<sp/>size&gt;<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref><sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>reinterpret_steal&lt;object&gt;(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster&lt;Args&gt;::cast</ref>(</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(args_),<sp/>policy,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))...<sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classpybind11_1_1args" kindref="compound">args</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;make_tuple():<sp/>unable<sp/>to<sp/>convert<sp/>arguments<sp/>to<sp/>Python<sp/>object<sp/>(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;std::string,<sp/>size&gt;<sp/>argtypes<sp/>{<sp/>{type_id&lt;Args&gt;()...}<sp/>};</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;make_tuple():<sp/>unable<sp/>to<sp/>convert<sp/>argument<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argtypes[i]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>to<sp/>Python<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>result(size);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg_value<sp/>:<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(result.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>counter++,<sp/>arg_value.release().ptr());</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678" refid="structpybind11_1_1arg" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1680" refid="structpybind11_1_1arg_1a4e7680725e9ed71188842ca15ac9c72f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg_1a4e7680725e9ed71188842ca15ac9c72f" kindref="member">arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>),<sp/>flag_noconvert(false),<sp/>flag_none(true)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref><sp/>operator=(T<sp/>&amp;&amp;value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1684" refid="structpybind11_1_1arg_1ac4fd4641a090ff65985db1ec6cc244df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>&amp;<ref refid="structpybind11_1_1arg_1ac4fd4641a090ff65985db1ec6cc244df" kindref="member">noconvert</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/>flag_noconvert<sp/>=<sp/>flag;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1686" refid="structpybind11_1_1arg_1a21b1ff05c2afb3d55e686edba37f0cfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>&amp;<ref refid="structpybind11_1_1arg_1a21b1ff05c2afb3d55e686edba37f0cfc" kindref="member">none</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/>flag_none<sp/>=<sp/>flag;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688" refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>;<sp/></highlight></codeline>
<codeline lineno="1689" refid="structpybind11_1_1arg_1a5a7c9ac34c9ef90f0c5aaa98a620d225" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg_1a5a7c9ac34c9ef90f0c5aaa98a620d225" kindref="member">flag_noconvert</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1690" refid="structpybind11_1_1arg_1a4a5e70906a33c9090be550fa3ea1137c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg_1a4a5e70906a33c9090be550fa3ea1137c" kindref="member">flag_none</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1691"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695" refid="structpybind11_1_1arg__v" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref><sp/>:<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref>(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>&amp;&amp;<ref refid="structpybind11_1_1base" kindref="compound">base</ref>,<sp/>T<sp/>&amp;&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*descr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>),</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value(reinterpret_steal&lt;object&gt;(</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster&lt;T&gt;::cast</ref>(x,<sp/>return_value_policy::automatic,<sp/>{})</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)),</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descr(descr)</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>(type_id&lt;T&gt;())</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1712" refid="structpybind11_1_1arg__v_1ad663a0692515f70e43f00d1c18c7326f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg__v_1ad663a0692515f70e43f00d1c18c7326f" kindref="member">arg_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>T<sp/>&amp;&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*descr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref>(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;T&gt;(x),<sp/>descr)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1717" refid="structpybind11_1_1arg__v_1a3b4491d508a843665f0da3a4266dc12f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg__v_1a3b4491d508a843665f0da3a4266dc12f" kindref="member">arg_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>&amp;<ref refid="structpybind11_1_1base" kindref="compound">base</ref>,<sp/>T<sp/>&amp;&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*descr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref>(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;T&gt;(x),<sp/>descr)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721" refid="structpybind11_1_1arg__v_1a76b7936d3b8fe6810e5fd8d84e3fbf85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref><sp/>&amp;<ref refid="structpybind11_1_1arg__v_1a76b7936d3b8fe6810e5fd8d84e3fbf85" kindref="member">noconvert</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/>arg::noconvert(flag);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724" refid="structpybind11_1_1arg__v_1a5951c45bc5b9eacb7f1a5a8e9a7e3223" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref><sp/>&amp;<ref refid="structpybind11_1_1arg__v_1a5951c45bc5b9eacb7f1a5a8e9a7e3223" kindref="member">none</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">arg::none</ref>(flag);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727" refid="structpybind11_1_1arg__v_1ae76e3b2f96df1162af8abf34bdd3cace" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg__v_1ae76e3b2f96df1162af8abf34bdd3cace" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1729" refid="structpybind11_1_1arg__v_1ac37fe33e04c0144ca30a5ce52c7ac2d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1arg__v_1ac37fe33e04c0144ca30a5ce52c7ac2d8" kindref="member">descr</ref>;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NDEBUG)</highlight></codeline>
<codeline lineno="1732" refid="structpybind11_1_1arg__v_1a151531f6483613dd34abbc8781fe2056" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structpybind11_1_1arg__v_1a151531f6483613dd34abbc8781fe2056" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1737" refid="structpybind11_1_1arg_1ab8c74176180307470e9c42384cb38dff" refkind="member"><highlight class="normal"><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref><sp/>arg::operator=(T<sp/>&amp;&amp;value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>std::forward&lt;T&gt;(value)};<sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740" refid="namespacepybind11_1aa14f653ec1b63f58b3013ef9d6ac9422" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_t</ref><sp/>=<sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref>;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742" refid="namespacepybind11_1_1literals" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="1746" refid="namespacepybind11_1_1literals_1ad46240bdb807f80caa6e104591878d5c" refkind="member"><highlight class="normal">constexpr<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declaration<sp/>(definition<sp/>in<sp/>attr.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_record;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755" refid="structpybind11_1_1detail_1_1function__call" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref>(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>&amp;f,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>p);<sp/></highlight><highlight class="comment">//<sp/>Implementation<sp/>in<sp/>attr.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759" refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>&amp;<ref refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762" refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;handle&gt;<sp/><ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765" refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/><ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768" refid="structpybind11_1_1detail_1_1function__call_1a19b239cc74c20f535acd986c1e9336ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1function__call_1a19b239cc74c20f535acd986c1e9336ff" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1774" refid="classpybind11_1_1detail_1_1argument__loader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1argument__loader" kindref="compound">argument_loader</ref><sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>indices<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a5a29a5241a00f2bb37c172b70f6c2a3c" kindref="member">make_index_sequence</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>argument_is_args<sp/><sp/><sp/>=<sp/>std::is_same&lt;intrinsic_t&lt;Arg&gt;,<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>&gt;;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>argument_is_kwargs<sp/>=<sp/>std::is_same&lt;intrinsic_t&lt;Arg&gt;,<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>&gt;;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>args/kwargs<sp/>argument<sp/>positions<sp/>relative<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>argument<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args_pos<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ac0dec32f83b00d849883c195ba9a0a01" kindref="member">constexpr_first</ref>&lt;argument_is_args,<sp/>Args...&gt;()<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args),</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwargs_pos<sp/>=<sp/>constexpr_first&lt;argument_is_kwargs,<sp/>Args...&gt;()<sp/>-<sp/>(int)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>args_kwargs_are_last<sp/>=<sp/>kwargs_pos<sp/>&gt;=<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>args_pos<sp/>&gt;=<sp/>kwargs_pos<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(args_kwargs_are_last,<sp/></highlight><highlight class="stringliteral">&quot;py::args/py::kwargs<sp/>are<sp/>only<sp/>permitted<sp/>as<sp/>the<sp/>last<sp/>argument(s)<sp/>of<sp/>a<sp/>function&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1788" refid="classpybind11_1_1detail_1_1argument__loader_1ae049fe17713f83569b29f32b7d84707f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_kwargs<sp/>=<sp/>kwargs_pos<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="1789" refid="classpybind11_1_1detail_1_1argument__loader_1af5db3b0b97a5b4392d5f36b5c3135835" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_args<sp/>=<sp/>args_pos<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791" refid="classpybind11_1_1detail_1_1argument__loader_1af561fefc965b1269c43943a445eacf9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="classpybind11_1_1detail_1_1argument__loader_1af561fefc965b1269c43943a445eacf9b" kindref="member">arg_names</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::concat(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">make_caster&lt;Args&gt;::name</ref>()...);<sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793" refid="classpybind11_1_1detail_1_1argument__loader_1a32be088badccd7cb7e2e9bbb424d1a1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1argument__loader_1a32be088badccd7cb7e2e9bbb424d1a1f" kindref="member">load_args</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load_impl_sequence(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/>indices{});</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Guard,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="1798" refid="classpybind11_1_1detail_1_1argument__loader_1a48c67a1e6bd71da946f488fc42c55b6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;!std::is_void&lt;Return&gt;::value</ref>,<sp/>Return&gt;<sp/><ref refid="classpybind11_1_1detail_1_1argument__loader_1a48c67a1e6bd71da946f488fc42c55b6d" kindref="member">call</ref>(Func<sp/>&amp;&amp;f)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(*this).template<sp/>call_impl&lt;Return&gt;(std::forward&lt;Func&gt;(f),<sp/>indices{},<sp/>Guard{});</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Guard,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="1803" refid="classpybind11_1_1detail_1_1argument__loader_1a528436efddd493a1e3e19bd811c8d637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;std::is_void&lt;Return&gt;::value</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">void_type</ref>&gt;<sp/><ref refid="classpybind11_1_1detail_1_1argument__loader_1a528436efddd493a1e3e19bd811c8d637" kindref="member">call</ref>(Func<sp/>&amp;&amp;f)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(*this).template<sp/>call_impl&lt;Return&gt;(std::forward&lt;Func&gt;(f),<sp/>indices{},<sp/>Guard{});</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">void_type</ref>();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_impl_sequence(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;&gt;</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_impl_sequence(function_call<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/>index_sequence&lt;Is...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>r<sp/>:<sp/>{std::get&lt;Is&gt;(argcasters).load(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>[Is],<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>[Is])...})</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Guard&gt;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>Return<sp/>call_impl(Func<sp/>&amp;&amp;f,<sp/>index_sequence&lt;Is...&gt;,<sp/>Guard<sp/>&amp;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;Func&gt;(f)(cast_op&lt;Args&gt;(std::move(std::get&lt;Is&gt;(argcasters)))...);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;make_caster&lt;Args&gt;...&gt;<sp/>argcasters;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;return_value_policy<sp/>policy&gt;</highlight></codeline>
<codeline lineno="1831" refid="classpybind11_1_1detail_1_1simple__collector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1simple__collector" kindref="compound">simple_collector</ref><sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="1834" refid="classpybind11_1_1detail_1_1simple__collector_1acce1ff3f1d7685e282f723e98beaa70b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1simple__collector_1acce1ff3f1d7685e282f723e98beaa70b" kindref="member">simple_collector</ref>(Ts<sp/>&amp;&amp;...values)</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_args(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>::<ref refid="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" kindref="member">make_tuple</ref>&lt;policy&gt;(<ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;Ts&gt;(values)...))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837" refid="classpybind11_1_1detail_1_1simple__collector_1ab0c1b16950c259798bc255f29f1e8039" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1simple__collector_1ab0c1b16950c259798bc255f29f1e8039" kindref="member">args</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_args;<sp/>}</highlight></codeline>
<codeline lineno="1838" refid="classpybind11_1_1detail_1_1simple__collector_1a01c19e24ed196c737cd4bed7ccc38bc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="classpybind11_1_1detail_1_1simple__collector_1a01c19e24ed196c737cd4bed7ccc38bc6" kindref="member">kwargs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840" refid="classpybind11_1_1detail_1_1simple__collector_1a774be3e82e1272159aad59569c951a0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/><ref refid="classpybind11_1_1detail_1_1simple__collector_1a774be3e82e1272159aad59569c951a0d" kindref="member">args</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_args);<sp/>}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843" refid="classpybind11_1_1detail_1_1simple__collector_1a8b9348928311dc1aac59a57e2eb7b814" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1simple__collector_1a8b9348928311dc1aac59a57e2eb7b814" kindref="member">call</ref>(PyObject<sp/>*ptr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_CallObject(ptr,<sp/>m_args.ptr());</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>m_args;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;return_value_policy<sp/>policy&gt;</highlight></codeline>
<codeline lineno="1856" refid="classpybind11_1_1detail_1_1unpacking__collector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1unpacking__collector" kindref="compound">unpacking_collector</ref><sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="1859" refid="classpybind11_1_1detail_1_1unpacking__collector_1a358c255dbba22a6cfb2d8ab146618e5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unpacking__collector_1a358c255dbba22a6cfb2d8ab146618e5b" kindref="member">unpacking_collector</ref>(Ts<sp/>&amp;&amp;...values)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tuples<sp/>aren&apos;t<sp/>(easily)<sp/>resizable<sp/>so<sp/>a<sp/>list<sp/>is<sp/>needed<sp/>for<sp/>collection,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>actual<sp/>function<sp/>call<sp/>strictly<sp/>requires<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args_list<sp/>=<sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref>();</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>[]<sp/>=<sp/>{<sp/>0,<sp/>(process(args_list,<sp/>std::forward&lt;Ts&gt;(values)),<sp/>0)...<sp/>};</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" kindref="member">ignore_unused</ref>(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_args<sp/>=<sp/>std::move(args_list);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="classpybind11_1_1detail_1_1unpacking__collector_1a00853e5d338d0b763140058e31516ed0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1unpacking__collector_1a00853e5d338d0b763140058e31516ed0" kindref="member">args</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_args;<sp/>}</highlight></codeline>
<codeline lineno="1870" refid="classpybind11_1_1detail_1_1unpacking__collector_1aec47bd4c993470100e39c2136ad7ad78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1unpacking__collector_1aec47bd4c993470100e39c2136ad7ad78" kindref="member">kwargs</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_kwargs;<sp/>}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872" refid="classpybind11_1_1detail_1_1unpacking__collector_1abd84aace4a8f21d67cc70b980e50a617" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/><ref refid="classpybind11_1_1detail_1_1unpacking__collector_1abd84aace4a8f21d67cc70b980e50a617" kindref="member">args</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_args);<sp/>}</highlight></codeline>
<codeline lineno="1873" refid="classpybind11_1_1detail_1_1unpacking__collector_1ae8af78e3f3b817efb13756027e147ffd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="classpybind11_1_1detail_1_1unpacking__collector_1ae8af78e3f3b817efb13756027e147ffd" kindref="member">kwargs</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_kwargs);<sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876" refid="classpybind11_1_1detail_1_1unpacking__collector_1a782e7496505e83c404350b3b9006129c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unpacking__collector_1a782e7496505e83c404350b3b9006129c" kindref="member">call</ref>(PyObject<sp/>*ptr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_Call(ptr,<sp/>m_args.ptr(),<sp/>m_kwargs.ptr());</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process(<ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>&amp;args_list,<sp/>T<sp/>&amp;&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>reinterpret_steal&lt;object&gt;(<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster&lt;T&gt;::cast</ref>(std::forward&lt;T&gt;(x),<sp/>policy,<sp/>{}));</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!o)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument_cast_error();</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument_cast_error(<ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(args_list.size()),<sp/>type_id&lt;T&gt;());</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_list.append(o);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process(list<sp/>&amp;args_list,<sp/>detail::args_proxy<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>ap)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_list.append(a);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process(list<sp/>&amp;</highlight><highlight class="comment">/*args_list*/</highlight><highlight class="normal">,<sp/>arg_v<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a.name)</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameless_argument_error();</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameless_argument_error(a.type);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_kwargs.contains(a.name))<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple_values_error();</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple_values_error(a.name);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a.value)<sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument_cast_error();</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument_cast_error(a.name,<sp/>a.type);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_kwargs[a.name]<sp/>=<sp/>a.value;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process(list<sp/>&amp;</highlight><highlight class="comment">/*args_list*/</highlight><highlight class="normal">,<sp/>detail::kwargs_proxy<sp/>kp)<sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!kp)</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;k<sp/>:<sp/>reinterpret_borrow&lt;dict&gt;(kp))<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_kwargs.contains(k.first))<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple_values_error();</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple_values_error(str(k.first));</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_kwargs[k.first]<sp/>=<sp/>k.second;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nameless_argument_error()<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>type_error(</highlight><highlight class="stringliteral">&quot;Got<sp/>kwargs<sp/>without<sp/>a<sp/>name;<sp/>only<sp/>named<sp/>arguments<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;may<sp/>be<sp/>passed<sp/>via<sp/>py::arg()<sp/>to<sp/>a<sp/>python<sp/>function<sp/>call.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nameless_argument_error(std::string<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>type_error(</highlight><highlight class="stringliteral">&quot;Got<sp/>kwargs<sp/>without<sp/>a<sp/>name<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;;<sp/>only<sp/>named<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arguments<sp/>may<sp/>be<sp/>passed<sp/>via<sp/>py::arg()<sp/>to<sp/>a<sp/>python<sp/>function<sp/>call.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multiple_values_error()<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>type_error(</highlight><highlight class="stringliteral">&quot;Got<sp/>multiple<sp/>values<sp/>for<sp/>keyword<sp/>argument<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multiple_values_error(std::string<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>type_error(</highlight><highlight class="stringliteral">&quot;Got<sp/>multiple<sp/>values<sp/>for<sp/>keyword<sp/>argument<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>argument_cast_error()<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cast_error(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>convert<sp/>call<sp/>argument<sp/>to<sp/>Python<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>details)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>argument_cast_error(std::string<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/>std::string<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cast_error(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>convert<sp/>call<sp/>argument<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>of<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>to<sp/>Python<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple<sp/>m_args;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>m_kwargs;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>enable_if_t&lt;all_of&lt;is_positional&lt;Args&gt;...&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="1978" refid="namespacepybind11_1_1detail_1ab6646cead8144e9aa8d803b0790489d1" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1simple__collector" kindref="compound">simple_collector&lt;policy&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1af1f33227439d4701e48061191818ed0e" kindref="member">collect_arguments</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1simple__collector" kindref="compound">simple_collector&lt;policy&gt;</ref>(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>enable_if_t&lt;!all_of&lt;is_positional&lt;Args&gt;...&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="1985" refid="namespacepybind11_1_1detail_1af1f33227439d4701e48061191818ed0e" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1unpacking__collector" kindref="compound">unpacking_collector&lt;policy&gt;</ref><sp/><ref refid="namespacepybind11_1_1detail_1af1f33227439d4701e48061191818ed0e" kindref="member">collect_arguments</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Following<sp/>argument<sp/>order<sp/>rules<sp/>for<sp/>generalized<sp/>unpacking<sp/>according<sp/>to<sp/>PEP<sp/>448</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr_last&lt;is_positional,<sp/>Args...&gt;()<sp/>&lt;<sp/>constexpr_first&lt;is_keyword_or_ds,<sp/>Args...&gt;()</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>constexpr_last&lt;is_s_unpacking,<sp/>Args...&gt;()<sp/>&lt;<sp/>constexpr_first&lt;is_ds_unpacking,<sp/>Args...&gt;(),</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>function<sp/>call:<sp/>positional<sp/>args<sp/>must<sp/>precede<sp/>keywords<sp/>and<sp/>**<sp/>unpacking;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;*<sp/>unpacking<sp/>must<sp/>precede<sp/>**<sp/>unpacking&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1unpacking__collector" kindref="compound">unpacking_collector&lt;policy&gt;</ref>(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1998" refid="classpybind11_1_1detail_1_1object__api_1ad5605908755b3a6ad07bbfa63f398ab8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;Derived&gt;::operator()</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::collect_arguments&lt;policy&gt;(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...).call(derived().ptr());</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">object_api&lt;Derived&gt;::call</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator()&lt;policy&gt;(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010" refid="cast_8h_1a33ae1fb2eabdbe5d3a6d62435ce8d0a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_MAKE_OPAQUE(Type)<sp/>\</highlight></codeline>
<codeline lineno="2011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>pybind11<sp/>{<sp/>namespace<sp/>detail<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2012"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;&gt;<sp/>class<sp/>type_caster&lt;Type&gt;<sp/>:<sp/>public<sp/>type_caster_base&lt;Type&gt;<sp/>{<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="2013"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h"/>
  </compounddef>
</doxygen>
