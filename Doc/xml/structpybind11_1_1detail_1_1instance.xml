<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="structpybind11_1_1detail_1_1instance" kind="struct" language="C++" prot="public">
    <compoundname>pybind11::detail::instance</compoundname>
    <includes refid="common_8h" local="no">common.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1acacd8310d732420ce47f63faafc580c1" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* pybind11::detail::instance::simple_value_holder[1+instance_simple_holder_in_ptrs()]</definition>
        <argsstring>[1+instance_simple_holder_in_ptrs()]</argsstring>
        <name>simple_value_holder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="374" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1adcbbf0bcd5cdf7797eff237fdac072fe" prot="public" static="no" mutable="no">
        <type>void **</type>
        <definition>void** pybind11::detail::instance::values_and_holders</definition>
        <argsstring></argsstring>
        <name>values_and_holders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="376" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a42aa25094b97dbba7d0913c5f5a1edf4" prot="public" static="no" mutable="no">
        <type>bool *</type>
        <definition>bool* pybind11::detail::instance::holder_constructed</definition>
        <argsstring></argsstring>
        <name>holder_constructed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="377" column="18" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a6f2189faa41ccf0bb0a88d89b431cb50" prot="public" static="no" mutable="no">
        <type>struct pybind11::detail::instance::@23::@25</type>
        <definition>struct pybind11::detail::instance::@23::@25 pybind11::detail::instance::nonsimple</definition>
        <argsstring></argsstring>
        <name>nonsimple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="378" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a210077f71adb527ad5049c2b030208c1" prot="public" static="no" mutable="no">
        <type>PyObject_HEAD union pybind11::detail::instance::@23</type>
        <definition>PyObject_HEAD union pybind11::detail::instance::@23 pybind11::detail::instance::@24</definition>
        <argsstring></argsstring>
        <name>@24</name>
        <briefdescription>
<para>Storage for pointers and holder; see simple_layout, below, for a description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="379" column="5"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a3ad16c93d8c6a53b14f269ab4745c2c4" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* pybind11::detail::instance::weakrefs</definition>
        <argsstring></argsstring>
        <name>weakrefs</name>
        <briefdescription>
<para>Weak references (needed for keep alive): </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="381" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a8a2005f2b03490c24273ac666219fe90" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pybind11::detail::instance::owned</definition>
        <argsstring></argsstring>
        <name>owned</name>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>If true, the pointer is owned which means we&apos;re free to manage it with a holder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="383" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pybind11::detail::instance::simple_layout</definition>
        <argsstring></argsstring>
        <name>simple_layout</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An instance has two possible value/holder layouts.</para>
<para>Simple layout (when this flag is true), means the <computeroutput>simple_value_holder</computeroutput> is set with a pointer and the holder object governing that pointer, i.e. [val1*][holder]. This layout is applied whenever there is no python-side multiple inheritance of bound C++ types <emphasis>and</emphasis> the type&apos;s holder will fit in the default space (which is large enough to hold either a std::unique_ptr or std::shared_ptr).</para>
<para>Non-simple layout applies when using custom holders that require more space than <computeroutput>shared_ptr</computeroutput> (which is typically the size of two pointers), or when multiple inheritance is used on the python side. Non-simple layout allocates the required amount of memory to have multiple bound C++ classes as parents. Under this layout, <computeroutput>nonsimple.values_and_holders</computeroutput> is set to a pointer to allocated space of the required space to hold a a sequence of value pointers and holders followed by a set of holder-constructed flags (1 byte each), i.e. [val1*][holder1][val2*][holder2]...[bb...] where each [block] is rounded up to a multiple of <computeroutput>sizeof(void *)</computeroutput>. <computeroutput>nonsimple.holder_constructed</computeroutput> is, for convenience, a pointer to the beginning of the [bb...] block (but not independently allocated). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="403" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1acad9708259eee278d8f2743794acd71e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pybind11::detail::instance::simple_holder_constructed</definition>
        <argsstring></argsstring>
        <name>simple_holder_constructed</name>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>For simple layout, tracks whether the holder has been constructed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="405" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpybind11_1_1detail_1_1instance_1a63d97cb91e33886f8220c690f02ac760" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pybind11::detail::instance::has_patients</definition>
        <argsstring></argsstring>
        <name>has_patients</name>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>If true, <ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals()</ref>.patients has an entry for this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="407" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structpybind11_1_1detail_1_1instance_1a4e87038aac7ab30d4fe6d55eeecdb28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::instance::allocate_layout</definition>
        <argsstring>()</argsstring>
        <name>allocate_layout</name>
        <briefdescription>
<para>Initializes all of the above type/values/holders data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="410" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structpybind11_1_1detail_1_1instance_1ad702c1154fc949ef835ad01d8431b0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pybind11::detail::instance::deallocate_layout</definition>
        <argsstring>()</argsstring>
        <name>deallocate_layout</name>
        <briefdescription>
<para>Destroys/deallocates all of the above. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="413" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structpybind11_1_1detail_1_1instance_1af4572097604480baa6e50178ff138193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref></type>
        <definition>value_and_holder pybind11::detail::instance::get_value_and_holder</definition>
        <argsstring>(const type_info *find_type=nullptr)</argsstring>
        <name>get_value_and_holder</name>
        <param>
          <type>const <ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">type_info</ref> *</type>
          <declname>find_type</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">value_and_holder</ref> wrapper for the given type (or the first, if <computeroutput>find_type</computeroutput> omitted) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="417" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The &apos;instance&apos; type which needs to be standard layout (need to be able to use &apos;offsetof&apos;) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" line="370" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/common.h" bodystart="370" bodyend="418"/>
    <listofallmembers>
      <member refid="structpybind11_1_1detail_1_1instance_1a4e87038aac7ab30d4fe6d55eeecdb28e" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>allocate_layout</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1ad702c1154fc949ef835ad01d8431b0f1" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>deallocate_layout</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1af4572097604480baa6e50178ff138193" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>get_value_and_holder</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1a63d97cb91e33886f8220c690f02ac760" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>has_patients</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1a42aa25094b97dbba7d0913c5f5a1edf4" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>holder_constructed</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1a6f2189faa41ccf0bb0a88d89b431cb50" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>nonsimple</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1a8a2005f2b03490c24273ac666219fe90" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>owned</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1acad9708259eee278d8f2743794acd71e" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>simple_holder_constructed</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1a25b6f302c3797ba94ee06a9519f85ad5" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>simple_layout</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1acacd8310d732420ce47f63faafc580c1" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>simple_value_holder</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1adcbbf0bcd5cdf7797eff237fdac072fe" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>values_and_holders</name></member>
      <member refid="structpybind11_1_1detail_1_1instance_1a3ad16c93d8c6a53b14f269ab4745c2c4" prot="public" virt="non-virtual"><scope>pybind11::detail::instance</scope><name>weakrefs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
