<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="xlsx__crypto__consumer_8cpp" kind="file" language="C++">
    <compoundname>xlsx_crypto_consumer.cpp</compoundname>
    <includes local="no">array</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">vector</includes>
    <includes refid="exceptions_8hpp" local="no">xlnt/utils/exceptions.hpp</includes>
    <includes refid="binary_8hpp" local="no">detail/binary.hpp</includes>
    <includes refid="constants_8hpp" local="no">detail/constants.hpp</includes>
    <includes refid="aes_8hpp" local="no">detail/cryptography/aes.hpp</includes>
    <includes refid="base64_8hpp" local="no">detail/cryptography/base64.hpp</includes>
    <includes refid="compound__document_8hpp" local="no">detail/cryptography/compound_document.hpp</includes>
    <includes refid="encryption__info_8hpp" local="no">detail/cryptography/encryption_info.hpp</includes>
    <includes refid="value__traits_8hpp" local="no">detail/cryptography/value_traits.hpp</includes>
    <includes refid="xlsx__crypto__consumer_8hpp" local="no">detail/cryptography/xlsx_crypto_consumer.hpp</includes>
    <includes refid="include__libstudxml_8hpp" local="no">detail/external/include_libstudxml.hpp</includes>
    <includes refid="vector__streambuf_8hpp" local="no">detail/serialization/vector_streambuf.hpp</includes>
    <includes refid="xlsx__consumer_8hpp" local="no">detail/serialization/xlsx_consumer.hpp</includes>
    <includes refid="unicode_8hpp" local="no">detail/unicode.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/detail/cryptography/xlsx_crypto_consumer.cpp</label>
        <link refid="xlsx__crypto__consumer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>detail/cryptography/hash.hpp</label>
        <link refid="hash_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>xlnt/utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>xlnt/xlnt_config.hpp</label>
        <link refid="xlnt__config_8hpp"/>
      </node>
      <node id="27">
        <label>detail/cryptography/value_traits.hpp</label>
        <link refid="value__traits_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>functional</label>
      </node>
      <node id="66">
        <label>limits</label>
      </node>
      <node id="38">
        <label>libstudxml/details/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>libstudxml/version.hxx</label>
        <link refid="version_8hxx"/>
      </node>
      <node id="14">
        <label>detail/constants.hpp</label>
        <link refid="constants_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="64">
        <label>xlnt/utils/numeric.hpp</label>
        <link refid="numeric_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>stdlib.h</label>
      </node>
      <node id="40">
        <label>libstudxml/details/expat/expat.h</label>
        <link refid="expat_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>cmath</label>
      </node>
      <node id="50">
        <label>cassert</label>
      </node>
      <node id="42">
        <label>libstudxml/details/expat/expat_external.h</label>
        <link refid="expat__external_8h"/>
      </node>
      <node id="8">
        <label>xlnt/cell/index_types.hpp</label>
        <link refid="index__types_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="11">
        <label>detail/binary.hpp</label>
        <link refid="binary_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="34">
        <label>map</label>
      </node>
      <node id="46">
        <label>libstudxml/details/export.hxx</label>
        <link refid="export_8hxx"/>
      </node>
      <node id="19">
        <label>detail/cryptography/base64.hpp</label>
        <link refid="base64_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>libstudxml/forward.hxx</label>
        <link refid="forward_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libstudxml/details/pre.hxx</label>
        <link refid="pre_8hxx"/>
      </node>
      <node id="45">
        <label>libstudxml/qname.hxx</label>
        <link refid="qname_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libstudxml/content.hxx</label>
        <link refid="content_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>exception</label>
      </node>
      <node id="29">
        <label>detail/external/include_libstudxml.hpp</label>
        <link refid="include__libstudxml_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>stddef.h</label>
      </node>
      <node id="55">
        <label>ostream</label>
      </node>
      <node id="54">
        <label>libstudxml/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>detail/default_case.hpp</label>
        <link refid="default__case_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>detail/cryptography/aes.hpp</label>
        <link refid="aes_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>libstudxml/value-traits.hxx</label>
        <link refid="value-traits_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>detail/serialization/xlsx_consumer.hpp</label>
        <link refid="xlsx__consumer_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>sys/param.h</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="32">
        <label>libstudxml/details/post.hxx</label>
        <link refid="post_8hxx"/>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="56">
        <label>libstudxml/details/genx/genx.h</label>
        <link refid="genx_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="24">
        <label>detail/cryptography/cipher.hpp</label>
        <link refid="cipher_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>libstudxml/serializer.ixx</label>
        <link refid="serializer_8ixx"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sstream</label>
      </node>
      <node id="37">
        <label>libstudxml/details/config.hxx</label>
        <link refid="config_8hxx"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>detail/serialization/zstream.hpp</label>
        <link refid="zstream_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>libstudxml/parser.ixx</label>
        <link refid="parser_8ixx"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>libstudxml/parser.txx</label>
      </node>
      <node id="35">
        <label>iosfwd</label>
      </node>
      <node id="52">
        <label>libstudxml/value-traits.txx</label>
      </node>
      <node id="59">
        <label>detail/cryptography/xlsx_crypto_consumer.hpp</label>
        <link refid="xlsx__crypto__consumer_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>detail/unicode.hpp</label>
        <link refid="unicode_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="36">
        <label>cstddef</label>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="60">
        <label>detail/serialization/vector_streambuf.hpp</label>
        <link refid="vector__streambuf_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>detail/cryptography/encryption_info.hpp</label>
        <link refid="encryption__info_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libstudxml/parser.hxx</label>
        <link refid="parser_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>type_traits</label>
      </node>
      <node id="47">
        <label>libstudxml/exception.hxx</label>
        <link refid="exception_8hxx"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="20">
        <label>detail/cryptography/compound_document.hpp</label>
        <link refid="compound__document_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>xlnt/utils/path.hpp</label>
        <link refid="path_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="25">
        <label>detail/cryptography/sha.hpp</label>
        <link refid="sha_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacexlnt">xlnt</innernamespace>
    <innernamespace refid="namespacexlnt_1_1detail">xlnt::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2020<sp/>Thomas<sp/>Fussell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>WRISING<sp/>FROM,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THE<sp/>SOFTWARE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@license:<sp/>http://www.opensource.org/licenses/mit-license.php</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@author:<sp/>see<sp/>AUTHORS<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="exceptions_8hpp" kindref="compound">xlnt/utils/exceptions.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="binary_8hpp" kindref="compound">detail/binary.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="constants_8hpp" kindref="compound">detail/constants.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="aes_8hpp" kindref="compound">detail/cryptography/aes.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="base64_8hpp" kindref="compound">detail/cryptography/base64.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="compound__document_8hpp" kindref="compound">detail/cryptography/compound_document.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="encryption__info_8hpp" kindref="compound">detail/cryptography/encryption_info.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="value__traits_8hpp" kindref="compound">detail/cryptography/value_traits.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="xlsx__crypto__consumer_8hpp" kindref="compound">detail/cryptography/xlsx_crypto_consumer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include__libstudxml_8hpp" kindref="compound">detail/external/include_libstudxml.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vector__streambuf_8hpp" kindref="compound">detail/serialization/vector_streambuf.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="xlsx__consumer_8hpp" kindref="compound">detail/serialization/xlsx_consumer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="unicode_8hpp" kindref="compound">detail/unicode.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1abcc760986493a708fba920f75d04fb04" kindref="member">xlnt::detail::byte</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structxlnt_1_1detail_1_1encryption__info" kindref="compound">xlnt::detail::encryption_info</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1aa840f324724003d10a2be510fab3ba9e" kindref="member">xlnt::detail::read</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">std::vector&lt;std::uint8_t&gt;<sp/>decrypt_xlsx_standard(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>encryption_info<sp/>info,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istream<sp/>&amp;encrypted_package_stream)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>info.calculate_key();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decrypted_size<sp/>=<sp/>read&lt;std::uint64_t&gt;(encrypted_package_stream);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::uint8_t&gt;<sp/>encrypted_segment(4096,<sp/>0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::uint8_t&gt;<sp/>decrypted_package;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(encrypted_package_stream)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encrypted_package_stream.read(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(encrypted_segment.data()),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(encrypted_segment.size()));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decrypted_segment<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1aed5ebbe6243d7e4742c1ae706362ccd5" kindref="member">xlnt::detail::aes_ecb_decrypt</ref>(encrypted_segment,<sp/>key);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_package.insert(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_package.end(),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_segment.begin(),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_segment.end());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>decrypted_package.resize(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(decrypted_size));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decrypted_package;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">std::vector&lt;std::uint8_t&gt;<sp/>decrypt_xlsx_agile(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>encryption_info<sp/>&amp;info,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istream<sp/>&amp;encrypted_package_stream)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>info.calculate_key();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>salt_size<sp/>=<sp/>info.agile.key_data.salt_size;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>salt_with_block_key<sp/>=<sp/>info.agile.key_data.salt_value;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>salt_with_block_key.resize(salt_size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespaceutf8_1a846259d2f173d524282583fc9d825b00" kindref="member">std::uint32_t</ref>),<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;segment<sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceutf8_1a846259d2f173d524282583fc9d825b00" kindref="member">std::uint32_t</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(salt_with_block_key.data()<sp/>+<sp/>salt_size);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>total_size<sp/>=<sp/>read&lt;std::uint64_t&gt;(encrypted_package_stream);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::uint8_t&gt;<sp/>encrypted_segment(4096,<sp/>0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::uint8_t&gt;<sp/>decrypted_package;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(encrypted_package_stream)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1afc7c938a0ba6e09ac10f88181aa4999e" kindref="member">hash</ref>(info.agile.key_encryptor.hash,<sp/>salt_with_block_key);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iv.resize(16);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encrypted_package_stream.read(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(encrypted_segment.data()),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(encrypted_segment.size()));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decrypted_segment<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a54c4b2d46a062cc85a33304c18912f4a" kindref="member">xlnt::detail::aes_cbc_decrypt</ref>(encrypted_segment,<sp/>key,<sp/>iv);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_package.insert(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_package.end(),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_segment.begin(),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decrypted_segment.end());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++segment;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>decrypted_package.resize(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(total_size));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decrypted_package;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">encryption_info::standard_encryption_info<sp/>read_standard_encryption_info(std::istream<sp/>&amp;info_stream)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>encryption_info::standard_encryption_info<sp/>result;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>header_length<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_at_start<sp/>=<sp/>info_stream.tellg();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*auto<sp/>skip_flags<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*auto<sp/>size_extra<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alg_id<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alg_id<sp/>==<sp/>0<sp/>||<sp/>alg_id<sp/>==<sp/>0x0000660E<sp/>||<sp/>alg_id<sp/>==<sp/>0x0000660F<sp/>||<sp/>alg_id<sp/>==<sp/>0x00006610)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.cipher<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a7d1d7b0f144d404b47b81b52b4d423fca6d3c5993ca017d0ff169b425d3193f02" kindref="member">xlnt::detail::cipher_algorithm::aes</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>cipher<sp/>algorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alg_id_hash<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alg_id_hash<sp/>!=<sp/>0x00008004<sp/>&amp;&amp;<sp/>alg_id_hash<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>hash<sp/>algorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>result.key_bits<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>result.key_bytes<sp/>=<sp/>result.key_bits<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>provider_type<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(provider_type<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>provider_type<sp/>!=<sp/>0x00000018)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>provider<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>read&lt;std::uint32_t&gt;(info_stream);<sp/></highlight><highlight class="comment">//<sp/>reserved<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read&lt;std::uint32_t&gt;(info_stream)<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>reserved<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>csp_name_length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((header_length</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(info_stream.tellg()<sp/>-<sp/>index_at_start))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>csp_name<sp/>=<sp/>xlnt::detail::read_string&lt;char16_t&gt;(info_stream,<sp/>csp_name_length);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>csp_name.pop_back();<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>extraneous<sp/>trailing<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csp_name<sp/>!=<sp/>u</highlight><highlight class="stringliteral">&quot;Microsoft<sp/>Enhanced<sp/>RSA<sp/>and<sp/>AES<sp/>Cryptographic<sp/>Provider<sp/>(Prototype)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>csp_name<sp/>!=<sp/>u</highlight><highlight class="stringliteral">&quot;Microsoft<sp/>Enhanced<sp/>RSA<sp/>and<sp/>AES<sp/>Cryptographic<sp/>Provider&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>cryptographic<sp/>provider&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>salt_size<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>result.salt<sp/>=<sp/>xlnt::detail::read_vector&lt;byte&gt;(info_stream,<sp/>salt_size);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>verifier_size<sp/>=<sp/><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>(16);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>result.encrypted_verifier<sp/>=<sp/>xlnt::detail::read_vector&lt;byte&gt;(info_stream,<sp/>verifier_size);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*const<sp/>auto<sp/>verifier_hash_size<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encrypted_verifier_hash_size<sp/>=<sp/><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>(32);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>result.encrypted_verifier_hash<sp/>=<sp/>xlnt::detail::read_vector&lt;byte&gt;(info_stream,<sp/>encrypted_verifier_hash_size);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">encryption_info::agile_encryption_info<sp/>read_agile_encryption_info(std::istream<sp/>&amp;info_stream)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">xlnt::detail::decode_base64</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;xmlns<sp/>=<sp/><ref refid="structxlnt_1_1constants_1a11228dad62051c8bc6dc7ebf48bf1fc5" kindref="member">xlnt::constants::ns</ref>(</highlight><highlight class="stringliteral">&quot;encryption&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;xmlns_p<sp/>=<sp/><ref refid="structxlnt_1_1constants_1a11228dad62051c8bc6dc7ebf48bf1fc5" kindref="member">xlnt::constants::ns</ref>(</highlight><highlight class="stringliteral">&quot;encryption-password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>const<sp/>auto<sp/>&amp;xmlns_c<sp/>=<sp/>xlnt::constants::namespace_(&quot;encryption-certificate&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>encryption_info::agile_encryption_info<sp/>result;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxml_1_1parser" kindref="compound">xml::parser</ref><sp/>parser(info_stream,<sp/></highlight><highlight class="stringliteral">&quot;EncryptionInfo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::start_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;encryption&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;key_data<sp/>=<sp/>result.key_data;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::start_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;keyData&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.salt_size<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;saltSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.block_size<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;blockSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.key_bits<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;keyBits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.hash_size<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;hashSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.cipher_algorithm<sp/>=<sp/>parser.attribute(</highlight><highlight class="stringliteral">&quot;cipherAlgorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.cipher_chaining<sp/>=<sp/>parser.attribute(</highlight><highlight class="stringliteral">&quot;cipherChaining&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.hash_algorithm<sp/>=<sp/>parser.attribute(</highlight><highlight class="stringliteral">&quot;hashAlgorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>key_data.salt_value<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;saltValue&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::end_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;keyData&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data_integrity<sp/>=<sp/>result.data_integrity;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::start_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;dataIntegrity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>data_integrity.hmac_key<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;encryptedHmacKey&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>data_integrity.hmac_value<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;encryptedHmacValue&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::end_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;dataIntegrity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;key_encryptor<sp/>=<sp/>result.key_encryptor;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::start_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;keyEncryptors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::start_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;keyEncryptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.attribute(</highlight><highlight class="stringliteral">&quot;uri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>any_password_key<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(parser.peek()<sp/>!=<sp/>xml::parser::event_type::end_element)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::start_element);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser.namespace_()<sp/>==<sp/>xmlns_p<sp/>&amp;&amp;<sp/>parser.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;encryptedKey&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_password_key<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.spin_count<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;spinCount&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.salt_size<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;saltSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.block_size<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;blockSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.key_bits<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;keyBits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.hash_size<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">std::size_t</ref>&gt;(</highlight><highlight class="stringliteral">&quot;hashSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.cipher_algorithm<sp/>=<sp/>parser.attribute(</highlight><highlight class="stringliteral">&quot;cipherAlgorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.cipher_chaining<sp/>=<sp/>parser.attribute(</highlight><highlight class="stringliteral">&quot;cipherChaining&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.hash<sp/>=<sp/>parser.attribute&lt;<ref refid="namespacexlnt_1_1detail_1af941f433e5c43f37d88576017d0f2bbd" kindref="member">xlnt::detail::hash_algorithm</ref>&gt;(</highlight><highlight class="stringliteral">&quot;hashAlgorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.salt_value<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;saltValue&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.verifier_hash_input<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;encryptedVerifierHashInput&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.verifier_hash_value<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;encryptedVerifierHashValue&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_encryptor.encrypted_key_value<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1a0e75e16531c3e7de18db087274cada43" kindref="member">decode_base64</ref>(parser.attribute(</highlight><highlight class="stringliteral">&quot;encryptedKeyValue&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1unsupported" kindref="compound">xlnt::unsupported</ref>(</highlight><highlight class="stringliteral">&quot;other<sp/>encryption<sp/>key<sp/>types<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::end_element);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!any_password_key)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>password<sp/>key<sp/>in<sp/>keyEncryptors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::end_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;keyEncryptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::end_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;keyEncryptors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.next_expect(xml::parser::event_type::end_element,<sp/>xmlns,<sp/></highlight><highlight class="stringliteral">&quot;encryption&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">encryption_info<sp/>read_encryption_info(std::istream<sp/>&amp;info_stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::u16string<sp/>&amp;password)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>encryption_info<sp/>info;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>info.password<sp/>=<sp/>password;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>version_major<sp/>=<sp/>read&lt;std::uint16_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>version_minor<sp/>=<sp/>read&lt;std::uint16_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encryption_flags<sp/>=<sp/>read&lt;std::uint32_t&gt;(info_stream);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>info.is_agile<sp/>=<sp/>version_major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>version_minor<sp/>==<sp/>4;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.is_agile)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encryption_flags<sp/>!=<sp/>0x40)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.agile<sp/>=<sp/>read_agile_encryption_info(info_stream);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version_minor<sp/>!=<sp/>2<sp/>||<sp/>(version_major<sp/>!=<sp/>2<sp/>&amp;&amp;<sp/>version_major<sp/>!=<sp/>3<sp/>&amp;&amp;<sp/>version_major<sp/>!=<sp/>4))</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>encryption<sp/>version&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encryption_flags<sp/>&amp;<sp/>0x03)<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>Reserved1<sp/>and<sp/>Reserved2,<sp/>MUST<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encryption_flags<sp/>&amp;<sp/>0x04)<sp/>==<sp/>0<sp/></highlight><highlight class="comment">//<sp/>fCryptoAPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(encryption_flags<sp/>&amp;<sp/>0x10)<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>fExternal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;extensible<sp/>encryption<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encryption_flags<sp/>&amp;<sp/>0x20)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>fAES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>an<sp/>OOXML<sp/>document&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.standard<sp/>=<sp/>read_standard_encryption_info(info_stream);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">std::vector&lt;std::uint8_t&gt;<sp/><ref refid="namespacexlnt_1_1detail_1aabbb0a051203d67e8c0b3481fdf7cd38" kindref="member">decrypt_xlsx</ref>(</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::uint8_t&gt;<sp/>&amp;bytes,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::u16string<sp/>&amp;password)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes.empty())</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1exception" kindref="compound">xlnt::exception</ref>(</highlight><highlight class="stringliteral">&quot;empty<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1detail_1_1vector__istreambuf" kindref="compound">xlnt::detail::vector_istreambuf</ref><sp/><ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>(bytes);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istream<sp/>stream(&amp;<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1detail_1_1compound__document" kindref="compound">xlnt::detail::compound_document</ref><sp/>document(stream);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;encryption_info_stream<sp/>=<sp/>document.open_read_stream(</highlight><highlight class="stringliteral">&quot;/EncryptionInfo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encryption_info<sp/>=<sp/>read_encryption_info(encryption_info_stream,<sp/>password);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;encrypted_package_stream<sp/>=<sp/>document.open_read_stream(</highlight><highlight class="stringliteral">&quot;/EncryptedPackage&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encryption_info.is_agile</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>decrypt_xlsx_agile(encryption_info,<sp/>encrypted_package_stream)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>decrypt_xlsx_standard(encryption_info,<sp/>encrypted_package_stream);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacexlnt" kindref="compound">xlnt</ref><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">std::vector&lt;std::uint8_t&gt;<sp/><ref refid="xlnt__config_8hpp_1ad97fc05b85eba23053616e2fc11f8267" kindref="member">XLNT_API</ref><sp/><ref refid="namespacexlnt_1_1detail_1aabbb0a051203d67e8c0b3481fdf7cd38" kindref="member">decrypt_xlsx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::uint8_t&gt;<sp/>&amp;data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;password)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacexlnt_1_1detail_1aabbb0a051203d67e8c0b3481fdf7cd38" kindref="member">return ::decrypt_xlsx</ref>(data,<sp/><ref refid="namespacexlnt_1_1detail_1acaff16ca531787554dda9d712734e7f5" kindref="member">utf8_to_utf16</ref>(password));</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classxlnt_1_1detail_1_1xlsx__consumer_1a6f18315a7ea4d5490ccac93879b7c1d4" kindref="member">xlsx_consumer::read</ref>(std::istream<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;password)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::uint8_t&gt;<sp/>data((std::istreambuf_iterator&lt;char&gt;(source)),<sp/>(std::istreambuf_iterator&lt;char&gt;()));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decrypted<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1aabbb0a051203d67e8c0b3481fdf7cd38" kindref="member">decrypt_xlsx</ref>(data,<sp/>password);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_istreambuf<sp/>decrypted_buffer(decrypted);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istream<sp/>decrypted_stream(&amp;decrypted_buffer);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxlnt_1_1detail_1_1xlsx__consumer_1a6f18315a7ea4d5490ccac93879b7c1d4" kindref="member">read</ref>(decrypted_stream);</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>xlnt</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/detail/cryptography/xlsx_crypto_consumer.cpp"/>
  </compounddef>
</doxygen>
