<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="pytypes_8h" kind="file" language="C++">
    <compoundname>pytypes.h</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="buffer__info_8h" local="yes">buffer_info.h</includes>
    <includes local="no">utility</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="cast_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="17">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>unordered_set</label>
      </node>
      <node id="4">
        <label>frameobject.h</label>
      </node>
      <node id="3">
        <label>Python.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="5">
        <label>pythread.h</label>
      </node>
      <node id="18">
        <label>utility</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>unordered_map</label>
      </node>
      <node id="2">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="8">
        <label>forward_list</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="14">
        <label>memory</label>
      </node>
      <node id="15">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="16">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpybind11_1_1detail_1_1pyobject__tag" prot="public">pybind11::detail::pyobject_tag</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1object__api" prot="public">pybind11::detail::object_api</innerclass>
    <innerclass refid="classpybind11_1_1handle" prot="public">pybind11::handle</innerclass>
    <innerclass refid="classpybind11_1_1object" prot="public">pybind11::object</innerclass>
    <innerclass refid="structpybind11_1_1object_1_1borrowed__t" prot="protected">pybind11::object::borrowed_t</innerclass>
    <innerclass refid="structpybind11_1_1object_1_1stolen__t" prot="protected">pybind11::object::stolen_t</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1accessor" prot="public">pybind11::detail::accessor</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr" prot="public">pybind11::detail::accessor_policies::obj_attr</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr" prot="public">pybind11::detail::accessor_policies::str_attr</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item" prot="public">pybind11::detail::accessor_policies::generic_item</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item" prot="public">pybind11::detail::accessor_policies::sequence_item</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item" prot="public">pybind11::detail::accessor_policies::list_item</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item" prot="public">pybind11::detail::accessor_policies::tuple_item</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1generic__iterator" prot="public">pybind11::detail::generic_iterator</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" prot="public">pybind11::detail::iterator_policies::arrow_proxy</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" prot="public">pybind11::detail::iterator_policies::sequence_fast_readonly</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite" prot="public">pybind11::detail::iterator_policies::sequence_slow_readwrite</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly" prot="public">pybind11::detail::iterator_policies::dict_readonly</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1kwargs__proxy" prot="public">pybind11::detail::kwargs_proxy</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1args__proxy" prot="public">pybind11::detail::args_proxy</innerclass>
    <innerclass refid="classpybind11_1_1iterator" prot="public">pybind11::iterator</innerclass>
    <innerclass refid="classpybind11_1_1iterable" prot="public">pybind11::iterable</innerclass>
    <innerclass refid="classpybind11_1_1str" prot="public">pybind11::str</innerclass>
    <innerclass refid="classpybind11_1_1bytes" prot="public">pybind11::bytes</innerclass>
    <innerclass refid="classpybind11_1_1none" prot="public">pybind11::none</innerclass>
    <innerclass refid="classpybind11_1_1bool__" prot="public">pybind11::bool_</innerclass>
    <innerclass refid="classpybind11_1_1int__" prot="public">pybind11::int_</innerclass>
    <innerclass refid="classpybind11_1_1float__" prot="public">pybind11::float_</innerclass>
    <innerclass refid="classpybind11_1_1weakref" prot="public">pybind11::weakref</innerclass>
    <innerclass refid="classpybind11_1_1slice" prot="public">pybind11::slice</innerclass>
    <innerclass refid="classpybind11_1_1capsule" prot="public">pybind11::capsule</innerclass>
    <innerclass refid="classpybind11_1_1tuple" prot="public">pybind11::tuple</innerclass>
    <innerclass refid="classpybind11_1_1dict" prot="public">pybind11::dict</innerclass>
    <innerclass refid="classpybind11_1_1sequence" prot="public">pybind11::sequence</innerclass>
    <innerclass refid="classpybind11_1_1list" prot="public">pybind11::list</innerclass>
    <innerclass refid="classpybind11_1_1args" prot="public">pybind11::args</innerclass>
    <innerclass refid="classpybind11_1_1kwargs" prot="public">pybind11::kwargs</innerclass>
    <innerclass refid="classpybind11_1_1set" prot="public">pybind11::set</innerclass>
    <innerclass refid="classpybind11_1_1function" prot="public">pybind11::function</innerclass>
    <innerclass refid="classpybind11_1_1buffer" prot="public">pybind11::buffer</innerclass>
    <innerclass refid="classpybind11_1_1memoryview" prot="public">pybind11::memoryview</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail_1_1accessor__policies">pybind11::detail::accessor_policies</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail_1_1iterator__policies">pybind11::detail::iterator_policies</innernamespace>
    <innernamespace refid="namespacepybind11_1_1literals" inline="yes">pybind11::literals</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="pytypes_8h_1ab4f94fb1d39306f36e0603accc545b4b" prot="public" static="no">
        <name>PYBIND11_OBJECT_COMMON</name>
        <param><defname>Name</defname></param>
        <param><defname>Parent</defname></param>
        <param><defname>CheckFun</defname></param>
        <initializer>    public: \
        <ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(&quot;Use reinterpret_borrow&lt;&quot;#Name&quot;&gt;() or reinterpret_steal&lt;&quot;#Name&quot;&gt;()&quot;) \
        Name(handle h, bool is_borrowed) : Parent(is_borrowed ? Parent(h, borrowed_t{}) : Parent(h, stolen_t{})) { } \
        Name(handle h, borrowed_t) : Parent(h, borrowed_t{}) { } \
        Name(handle h, stolen_t) : Parent(h, stolen_t{}) { } \
        <ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(&quot;Use py::isinstance&lt;py::python_type&gt;(obj) instead&quot;) \
        bool check() const { return m_ptr != nullptr &amp;&amp; (bool) CheckFun(m_ptr); } \
        static bool check_(handle h) { return h.ptr() != nullptr &amp;&amp; CheckFun(h.ptr()); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="685" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" prot="public" static="no">
        <name>PYBIND11_OBJECT_CVT</name>
        <param><defname>Name</defname></param>
        <param><defname>Parent</defname></param>
        <param><defname>CheckFun</defname></param>
        <param><defname>ConvertFun</defname></param>
        <initializer>    <ref refid="pytypes_8h_1ab4f94fb1d39306f36e0603accc545b4b" kindref="member">PYBIND11_OBJECT_COMMON</ref>(Name, Parent, CheckFun) \
    /* This is deliberately not &apos;explicit&apos; to allow implicit conversion from object: */ \
    Name(const object &amp;o) : Parent(ConvertFun(o.ptr()), stolen_t{}) { if (!m_ptr) throw error_already_set(); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="695" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pytypes_8h_1ad4b7fc54168d44c54c0ca9863af90858" prot="public" static="no">
        <name>PYBIND11_OBJECT</name>
        <param><defname>Name</defname></param>
        <param><defname>Parent</defname></param>
        <param><defname>CheckFun</defname></param>
        <initializer>    <ref refid="pytypes_8h_1ab4f94fb1d39306f36e0603accc545b4b" kindref="member">PYBIND11_OBJECT_COMMON</ref>(Name, Parent, CheckFun) \
    /* This is deliberately not &apos;explicit&apos; to allow implicit conversion from object: */ \
    Name(const object &amp;o) : Parent(o) { } \
    Name(object &amp;&amp;o) : Parent(std::move(o)) { }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="700" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pytypes_8h_1a358db65eea2be228232617d1353daff7" prot="public" static="no">
        <name>PYBIND11_OBJECT_DEFAULT</name>
        <param><defname>Name</defname></param>
        <param><defname>Parent</defname></param>
        <param><defname>CheckFun</defname></param>
        <initializer>    <ref refid="pytypes_8h_1ad4b7fc54168d44c54c0ca9863af90858" kindref="member">PYBIND11_OBJECT</ref>(Name, Parent, CheckFun) \
    Name() : Parent() { }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" line="706" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/typeid.h:<sp/>Convenience<sp/>wrapper<sp/>classes<sp/>for<sp/>basic<sp/>Python<sp/>types</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="buffer__info_8h" kindref="compound">buffer_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>few<sp/>forward<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">object;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">str;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">iterator;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">arg;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">arg_v;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">args_proxy;</highlight></codeline>
<codeline lineno="26" refid="namespacepybind11_1_1detail_1ace76e2e23e6cd12004ba88779c973ed9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ace76e2e23e6cd12004ba88779c973ed9" kindref="member">isinstance_generic</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1a6c04854a4dd89dee4a7df5bd1c2ac8f7" kindref="member">tp</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accessor<sp/>forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref>;</highlight></codeline>
<codeline lineno="30" refid="namespacepybind11_1_1detail_1_1accessor__policies" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">accessor_policies<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr" kindref="compound">obj_attr</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr" kindref="compound">str_attr</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item" kindref="compound">generic_item</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item" kindref="compound">sequence_item</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item" kindref="compound">list_item</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item" kindref="compound">tuple_item</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38" refid="namespacepybind11_1_1detail_1aba3678fbd1185c3e875ec436b012bd5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">obj_attr_accessor</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor&lt;accessor_policies::obj_attr&gt;</ref>;</highlight></codeline>
<codeline lineno="39" refid="namespacepybind11_1_1detail_1afe653288f3797c8a5626446af6656895" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">str_attr_accessor</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor&lt;accessor_policies::str_attr&gt;</ref>;</highlight></codeline>
<codeline lineno="40" refid="namespacepybind11_1_1detail_1acd690ad872191cefa9a070cee0362cda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">item_accessor</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor&lt;accessor_policies::generic_item&gt;</ref>;</highlight></codeline>
<codeline lineno="41" refid="namespacepybind11_1_1detail_1a3b97805a9767c683b5b999a747e19428" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">sequence_accessor</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor&lt;accessor_policies::sequence_item&gt;</ref>;</highlight></codeline>
<codeline lineno="42" refid="namespacepybind11_1_1detail_1a65ba47be7485efc588a4e1a06f235d57" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">list_accessor</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor&lt;accessor_policies::list_item&gt;</ref>;</highlight></codeline>
<codeline lineno="43" refid="namespacepybind11_1_1detail_1af5fb98309375f32c5766731b02966426" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">tuple_accessor</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor&lt;accessor_policies::tuple_item&gt;</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classpybind11_1_1detail_1_1pyobject__tag" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1pyobject__tag" kindref="compound">pyobject_tag</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="47" refid="namespacepybind11_1_1detail_1a016b3ed4ebf8cb36fcbbeed6012bc32e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a016b3ed4ebf8cb36fcbbeed6012bc32e" kindref="member">is_pyobject</ref><sp/>=<sp/>std::is_base_of&lt;pyobject_tag,<sp/>remove_reference_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="54" refid="classpybind11_1_1detail_1_1object__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1pyobject__tag" kindref="compound">pyobject_tag</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Derived<sp/>&amp;derived()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Derived<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62" refid="classpybind11_1_1detail_1_1object__api_1a186bda3e95a07f59f9449ce0d050ae5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a186bda3e95a07f59f9449ce0d050ae5e" kindref="member">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64" refid="classpybind11_1_1detail_1_1object__api_1a011483f62a9bd3c0fb60bfc7749fc28f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a011483f62a9bd3c0fb60bfc7749fc28f" kindref="member">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classpybind11_1_1detail_1_1object__api_1ae10abab736d193f170eaa6cfbdab6d01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">item_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1ae10abab736d193f170eaa6cfbdab6d01" kindref="member">operator[]</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74" refid="classpybind11_1_1detail_1_1object__api_1a579d2eeebff07ddab98814ccbfbe2728" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">item_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a579d2eeebff07ddab98814ccbfbe2728" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">obj_attr_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84" refid="classpybind11_1_1detail_1_1object__api_1a1ed2f42e544637c80b31c05c88cb916e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">str_attr_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a1ed2f42e544637c80b31c05c88cb916e" kindref="member">attr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classpybind11_1_1detail_1_1object__api_1a5babe5939b794c3408711be7fde14ee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1args__proxy" kindref="compound">args_proxy</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a5babe5939b794c3408711be7fde14ee0" kindref="member">operator*</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" kindref="member">contains</ref>(T<sp/>&amp;&amp;item)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>operator()(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="110" refid="classpybind11_1_1detail_1_1object__api_1a9e40315e3b89ae491c4ff308048550ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;call(...)<sp/>was<sp/>deprecated<sp/>in<sp/>favor<sp/>of<sp/>operator()(...)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>(Args&amp;&amp;...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>const;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classpybind11_1_1detail_1_1object__api_1a5107835e7630a10868373383c003100b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is(<ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api</ref><sp/>const&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>derived().ptr()<sp/>==<sp/>other.derived().ptr();<sp/>}</highlight></codeline>
<codeline lineno="116" refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>derived().ptr()<sp/>==<sp/>Py_None;<sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>py::str(obj)<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11" kindref="compound">pybind11</ref>::<ref refid="classpybind11_1_1str" kindref="compound">str</ref><sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">str_attr_accessor</ref><sp/><ref refid="structpybind11_1_1doc" kindref="compound">doc</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classpybind11_1_1detail_1_1object__api_1aa1e808c7d0773561b3c552cf93d13368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ref_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Py_REFCNT(derived().ptr()));<sp/>}</highlight></codeline>
<codeline lineno="126" refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" kindref="member">get_type</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classpybind11_1_1handle" refkind="compound"><highlight class="normal">class<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>:<sp/>public<sp/>detail::object_api&lt;<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="145" refid="classpybind11_1_1handle_1a4ba87579a3fba33e8e35e7a7884fe998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle_1a4ba87579a3fba33e8e35e7a7884fe998" kindref="member">handle</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147" refid="classpybind11_1_1handle_1aa8016278dbe2e4534cfa09f688ea17ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle_1aa8016278dbe2e4534cfa09f688ea17ee" kindref="member">handle</ref>(PyObject<sp/>*ptr)<sp/>:<sp/>m_ptr(ptr)<sp/>{<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>implicit<sp/>conversion<sp/>from<sp/>PyObject*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr;<sp/>}</highlight></codeline>
<codeline lineno="151" refid="classpybind11_1_1handle_1ae837f0f5edde0818cd37e92f5664ebf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*&amp;<ref refid="classpybind11_1_1handle_1ae837f0f5edde0818cd37e92f5664ebf2" kindref="member">ptr</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr;<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>&amp;<sp/><ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/>Py_XINCREF(m_ptr);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>&amp;<sp/><ref refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" kindref="member">dec_ref</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/>Py_XDECREF(m_ptr);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173" refid="classpybind11_1_1handle_1ac487a4afc7fb27d01ce4216813c7a91c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="178" refid="classpybind11_1_1handle_1aae1e3eb62dbe66c97c161da1dc408abd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>obj1.is(obj2)<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator==(const<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;h)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr<sp/>==<sp/>h.m_ptr;<sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>!obj1.is(obj2)<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator!=(const<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;h)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr<sp/>!=<sp/>h.m_ptr;<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>handle::operator<sp/>bool()<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>check()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*m_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classpybind11_1_1object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="200" refid="classpybind11_1_1object_1a05110f45918e73ad56f66cc713fd1d21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object_1a05110f45918e73ad56f66cc713fd1d21" kindref="member">object</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201" refid="classpybind11_1_1object_1af0de297f50a8c4db0b6712f4b990f8aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>reinterpret_borrow&lt;object&gt;()<sp/>or<sp/>reinterpret_steal&lt;object&gt;()&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="202" refid="classpybind11_1_1object_1a2cf33587d993fb836e9fcc7a9f3e5dcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_borrowed)<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(h)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_borrowed)<sp/>inc_ref();<sp/>}</highlight></codeline>
<codeline lineno="204" refid="classpybind11_1_1object_1acd1e392727b7870b82404c6077fd7da3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object_1acd1e392727b7870b82404c6077fd7da3" kindref="member">object</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;o)<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(o)<sp/>{<sp/>inc_ref();<sp/>}</highlight></codeline>
<codeline lineno="206" refid="classpybind11_1_1object_1a8b3e38884a2467c88b61ad8b0f7b0469" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object_1a8b3e38884a2467c88b61ad8b0f7b0469" kindref="member">object</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;other)<sp/>noexcept<sp/>{<sp/>m_ptr<sp/>=<sp/>other.m_ptr;<sp/>other.m_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="208" refid="classpybind11_1_1object_1a18a870a490c34d5a7775e90dc799d2f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object_1a18a870a490c34d5a7775e90dc799d2f4" kindref="member">~object</ref>()<sp/>{<sp/>dec_ref();<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>()<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>m_ptr;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(tmp);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="classpybind11_1_1object_1aa02e0b7ba3182ecea17911e5fdc631dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/><ref refid="classpybind11_1_1object_1aa02e0b7ba3182ecea17911e5fdc631dd" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dec_ref();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>other.m_ptr;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classpybind11_1_1object_1a1f45b12a97cf4b93915fd9145747cd9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/><ref refid="classpybind11_1_1object_1a1f45b12a97cf4b93915fd9145747cd9b" kindref="member">operator=</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;&amp;other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>temp(m_ptr);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>other.m_ptr;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.<ref refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" kindref="member">dec_ref</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>cast()<sp/>on<sp/>an<sp/>object<sp/>lvalue<sp/>just<sp/>copies<sp/>(via<sp/>handle::cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" kindref="member">cast</ref>()<sp/>const<sp/>&amp;;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>on<sp/>an<sp/>object<sp/>rvalue<sp/>does<sp/>a<sp/>move,<sp/>if<sp/>needed<sp/>and/or<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="classpybind11_1_1object_1a1d5a34290705e5124f352346563bf83d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>()<sp/>&amp;&amp;;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">protected:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tags<sp/>for<sp/>choosing<sp/>constructors<sp/>from<sp/>raw<sp/>PyObject<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="structpybind11_1_1object_1_1borrowed__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="246" refid="structpybind11_1_1object_1_1stolen__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacepybind11_1acad75b61738e777489ed1f4a30776268" kindref="member">reinterpret_borrow</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacepybind11_1a4b8f2939859acb062ae3c38c8b82b9f0" kindref="member">reinterpret_steal</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>accessible<sp/>from<sp/>derived<sp/>classes<sp/>and<sp/>the<sp/>reinterpret_*<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="classpybind11_1_1object_1af43aa8511d39ad9fa3aae093962ca471" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object_1af43aa8511d39ad9fa3aae093962ca471" kindref="member">object</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref>)<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(h)<sp/>{<sp/>inc_ref();<sp/>}</highlight></codeline>
<codeline lineno="254" refid="classpybind11_1_1object_1a03cf406a7bee2cde9264d89f5c321e95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1object_1a03cf406a7bee2cde9264d89f5c321e95" kindref="member">object</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h,<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>)<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(h)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="classpybind11_1_1object_1ac1ea1a4cbcf197d7c8096037633720d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1acad75b61738e777489ed1f4a30776268" kindref="member">reinterpret_borrow</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{h,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">object::borrowed_t</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="classpybind11_1_1object_1ae1de2ab5a755c10582ac1e46071de5c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1a4b8f2939859acb062ae3c38c8b82b9f0" kindref="member">reinterpret_steal</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{h,<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">object::stolen_t</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>detail::enable_if_t&lt;std::is_base_of&lt;object,<sp/>T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="293" refid="group__python__builtins_1ga2de041115880fe435885b9a9d7c2c276" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga514d6552530d0b02362a2045f43fcdba" kindref="member">isinstance</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T::check_(obj);<sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>detail::enable_if_t&lt;!std::is_base_of&lt;object,<sp/>T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga514d6552530d0b02362a2045f43fcdba" kindref="member">isinstance</ref>(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ace76e2e23e6cd12004ba88779c973ed9" kindref="member">detail::isinstance_generic</ref>(obj,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T));<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="namespacepybind11_1a7beb48e900be6e4e45b90482defde822" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a7beb48e900be6e4e45b90482defde822" kindref="member">isinstance&lt;handle&gt;</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299" refid="namespacepybind11_1adc42dbf138ab0de23a58c7952cb8ba9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1adc42dbf138ab0de23a58c7952cb8ba9a" kindref="member">isinstance&lt;object&gt;</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="group__python__builtins_1ga514d6552530d0b02362a2045f43fcdba" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga514d6552530d0b02362a2045f43fcdba" kindref="member">isinstance</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>PyObject_IsInstance(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>.ptr());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1gaef7ee96307a4732fad5df956b387f8a8" kindref="member">hasattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyObject_HasAttr(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>.ptr())<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="group__python__builtins_1gaef7ee96307a4732fad5df956b387f8a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1gaef7ee96307a4732fad5df956b387f8a8" kindref="member">hasattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyObject_HasAttrString(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="group__python__builtins_1ga0854324102907dc2d82ac413b6e6b66e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" kindref="member">getattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_GetAttr(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>.ptr());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="group__python__builtins_1gac80ddad26eb3426c93277ce8d7c0f982" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" kindref="member">getattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_GetAttrString(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="group__python__builtins_1ga715c20d77757165563f28474dc39e80c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" kindref="member">getattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>default_)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject<sp/>*result<sp/>=<sp/>PyObject_GetAttr(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>.ptr()))<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;object&gt;(default_);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" kindref="member">getattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>default_)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject<sp/>*result<sp/>=<sp/>PyObject_GetAttrString(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>))<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;object&gt;(default_);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="group__python__builtins_1gad3d54ac3f3614c110d2ffa5c061ee905" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1gac63dcad9209e4abd96a430bef04414ce" kindref="member">setattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_SetAttr(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>.ptr(),<sp/>value.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="group__python__builtins_1gac63dcad9209e4abd96a430bef04414ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1gac63dcad9209e4abd96a430bef04414ce" kindref="member">setattr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_SetAttrString(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>value.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="360" refid="namespacepybind11_1_1detail_1aa3f15fd5f825d58b0d9dc754fa96af55" refkind="member"><highlight class="normal"><ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1aa3f15fd5f825d58b0d9dc754fa96af55" kindref="member">get_function</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyInstanceMethod_Check(value.ptr()))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>PyInstanceMethod_GET_FUNCTION(value.ptr());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyMethod_Check(value.ptr()))</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>PyMethod_GET_FUNCTION(value.ptr());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>aliases/functions<sp/>to<sp/>support<sp/>implicit<sp/>casting<sp/>of<sp/>values<sp/>given<sp/>to<sp/>python<sp/>accessors/methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>given<sp/>a<sp/>pyobject,<sp/>this<sp/>simply<sp/>returns<sp/>the<sp/>pyobject<sp/>as-is;<sp/>for<sp/>other<sp/>C++<sp/>type,<sp/>the<sp/>value<sp/>goes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>through<sp/>pybind11::cast(obj)<sp/>to<sp/>convert<sp/>it<sp/>to<sp/>an<sp/>`object`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;is_pyobject&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="377" refid="namespacepybind11_1_1detail_1ac757eeb3882c4a944e8e60cca71c2c52" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">object_or_cast</ref>(T<sp/>&amp;&amp;o)<sp/>-&gt;<sp/>decltype(std::forward&lt;T&gt;(o))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(o);<sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>casting<sp/>version<sp/>is<sp/>implemented<sp/>in<sp/>cast.h:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;!is_pyobject&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">object_or_cast</ref>(T<sp/>&amp;&amp;o);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Match<sp/>a<sp/>PyObject*,<sp/>which<sp/>we<sp/>want<sp/>to<sp/>convert<sp/>directly<sp/>to<sp/>handle<sp/>via<sp/>its<sp/>converting<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">object_or_cast</ref>(PyObject<sp/>*ptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;<sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy&gt;</highlight></codeline>
<codeline lineno="386" refid="classpybind11_1_1detail_1_1accessor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api</ref>&lt;accessor&lt;Policy&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>key_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy::key_type;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="390" refid="classpybind11_1_1detail_1_1accessor_1ab26fdf723cec277282e8c075766c7534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1ab26fdf723cec277282e8c075766c7534" kindref="member">accessor</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/>key_type<sp/>key)<sp/>:<sp/>obj(obj),<sp/>key(<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(key))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="391" refid="classpybind11_1_1detail_1_1accessor_1a97389cfd5d8c08aa2296db02b054b851" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1a97389cfd5d8c08aa2296db02b054b851" kindref="member">accessor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref><sp/>&amp;a)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392" refid="classpybind11_1_1detail_1_1accessor_1ae3729c2d442f0f925c4737e2b9e763da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1ae3729c2d442f0f925c4737e2b9e763da" kindref="member">accessor</ref>(<ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref><sp/>&amp;&amp;a)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accessor<sp/>overload<sp/>required<sp/>to<sp/>override<sp/>default<sp/>assignment<sp/>operator<sp/>(templates<sp/>are<sp/>not<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>replace<sp/>default<sp/>compiler-generated<sp/>assignments).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="classpybind11_1_1detail_1_1accessor_1a595b48edc558a5d4e9a16c699684b462" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1a595b48edc558a5d4e9a16c699684b462" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref><sp/>&amp;a)<sp/>&amp;&amp;<sp/>{<sp/>std::move(*this).operator=(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(a));<sp/>}</highlight></codeline>
<codeline lineno="397" refid="classpybind11_1_1detail_1_1accessor_1a5bbba8fbf2e76622357f5f91ac3f14ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1a5bbba8fbf2e76622357f5f91ac3f14ff" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">accessor</ref><sp/>&amp;a)<sp/>&amp;<sp/>{<sp/><ref refid="classpybind11_1_1detail_1_1accessor_1a5bbba8fbf2e76622357f5f91ac3f14ff" kindref="member">operator=</ref>(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(a));<sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="classpybind11_1_1detail_1_1accessor_1aea8e0fd605265eabb1ec88c87fabaf8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1aea8e0fd605265eabb1ec88c87fabaf8a" kindref="member">operator=</ref>(T<sp/>&amp;&amp;value)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Policy::set(obj,<sp/>key,<sp/><ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">object_or_cast</ref>(std::forward&lt;T&gt;(value)));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402" refid="classpybind11_1_1detail_1_1accessor_1aec48fe7e6995cad1314ca5ed988b6aa4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1aec48fe7e6995cad1314ca5ed988b6aa4" kindref="member">operator=</ref>(T<sp/>&amp;&amp;value)<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_cache()<sp/>=<sp/>reinterpret_borrow&lt;object&gt;(<ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">object_or_cast</ref>(std::forward&lt;T&gt;(value)));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>Policy&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>of<sp/>obj.attr(...)<sp/>as<sp/>bool<sp/>is<sp/>deprecated<sp/>in<sp/>favor<sp/>of<sp/>pybind11::hasattr(obj,<sp/>...)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>operator<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_same&lt;T,<sp/>accessor_policies::str_attr&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::is_same&lt;T,<sp/>accessor_policies::obj_attr&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1gaef7ee96307a4732fad5df956b387f8a8" kindref="member">hasattr</ref>(obj,<sp/>key);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>Policy&gt;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>of<sp/>obj[key]<sp/>as<sp/>bool<sp/>is<sp/>deprecated<sp/>in<sp/>favor<sp/>of<sp/>obj.contains(key)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>operator<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_same&lt;T,<sp/>accessor_policies::generic_item&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.contains(key);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>object()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_cache();<sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_cache().ptr();<sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_cache().template<sp/>cast&lt;T&gt;();<sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;get_cache()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cache)<sp/>{<sp/>cache<sp/>=<sp/>Policy::get(obj,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cache;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>obj;</highlight></codeline>
<codeline lineno="430" refid="classpybind11_1_1detail_1_1accessor_1a3f6f49544fcec5c04f307898e9d05e73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>key_type<sp/><ref refid="classpybind11_1_1detail_1_1accessor_1a3f6f49544fcec5c04f307898e9d05e73" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="431" refid="classpybind11_1_1detail_1_1accessor_1a9e66ae6005450dcc6f488e6f4a02ee11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor_1a9e66ae6005450dcc6f488e6f4a02ee11" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(accessor_policies)</highlight></codeline>
<codeline lineno="435" refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr" kindref="compound">obj_attr</ref><sp/>{</highlight></codeline>
<codeline lineno="436" refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr_1a966975f7aa4cc37d10a190552aab6a82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">key_type</ref><sp/>=<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>;</highlight></codeline>
<codeline lineno="437" refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr_1aec92990617f775fd6c82977453e57e94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr_1aec92990617f775fd6c82977453e57e94" kindref="member">get</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" kindref="member">getattr</ref>(obj,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="438" refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr_1ae65b7dd4bac201b6e5ad394b4d871668" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1obj__attr_1ae65b7dd4bac201b6e5ad394b4d871668" kindref="member">set</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>val)<sp/>{<sp/><ref refid="group__python__builtins_1gac63dcad9209e4abd96a430bef04414ce" kindref="member">setattr</ref>(obj,<sp/>key,<sp/>val);<sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr" kindref="compound">str_attr</ref><sp/>{</highlight></codeline>
<codeline lineno="442" refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr_1a5d19a02ede1673cb799e320fff8ca92e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr_1a5d19a02ede1673cb799e320fff8ca92e" kindref="member">key_type</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*;</highlight></codeline>
<codeline lineno="443" refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr_1a86a04ddf23d53d706d176a21965eb441" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr_1a86a04ddf23d53d706d176a21965eb441" kindref="member">get</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga7a207d73efa28381746217b7afba118f" kindref="member">getattr</ref>(obj,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="444" refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr_1a40a092f4bb0875762adbc196e97ef48d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1str__attr_1a40a092f4bb0875762adbc196e97ef48d" kindref="member">set</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>val)<sp/>{<sp/><ref refid="group__python__builtins_1gac63dcad9209e4abd96a430bef04414ce" kindref="member">setattr</ref>(obj,<sp/>key,<sp/>val);<sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal">};</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item" kindref="compound">generic_item</ref><sp/>{</highlight></codeline>
<codeline lineno="448" refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item_1acfc5432bf4a7cf6c356b9248dee866b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">key_type</ref><sp/>=<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item_1ae5393457510cafd325666fed373f8cbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item_1ae5393457510cafd325666fed373f8cbe" kindref="member">get</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_GetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>key.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item_1ac77790a9823c6461b7d5df3893ce862a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1generic__item_1ac77790a9823c6461b7d5df3893ce862a" kindref="member">set</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_SetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>key.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>val.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal">};</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item" kindref="compound">sequence_item</ref><sp/>{</highlight></codeline>
<codeline lineno="462" refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item_1afd8eb0dbe87098343bd2fac89491a223" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item_1afd8eb0dbe87098343bd2fac89491a223" kindref="member">key_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item_1af8233db3d84f6f31601e0576729c3b59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item_1af8233db3d84f6f31601e0576729c3b59" kindref="member">get</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PySequence_GetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item_1a2f88dae02b9e763b89ccfda016095024" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1sequence__item_1a2f88dae02b9e763b89ccfda016095024" kindref="member">set</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PySequence_SetItem<sp/>does<sp/>not<sp/>steal<sp/>a<sp/>reference<sp/>to<sp/>&apos;val&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PySequence_SetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index),<sp/>val.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal">};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item" kindref="compound">list_item</ref><sp/>{</highlight></codeline>
<codeline lineno="479" refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item_1a90d23e2c8a64712afe661ea1fdb93855" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item_1a90d23e2c8a64712afe661ea1fdb93855" kindref="member">key_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item_1a01084e0dfe039b6c8c4d110bdefcd2c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item_1a01084e0dfe039b6c8c4d110bdefcd2c4" kindref="member">get</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyList_GetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item_1a5825578843440381889a76d40e63f9ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1list__item_1a5825578843440381889a76d40e63f9ba" kindref="member">set</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyList_SetItem<sp/>steals<sp/>a<sp/>reference<sp/>to<sp/>&apos;val&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyList_SetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index),<sp/>val.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal">};</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item" kindref="compound">tuple_item</ref><sp/>{</highlight></codeline>
<codeline lineno="496" refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item_1a74aeb13337cc4c667b5dfe8fc8818269" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item_1a74aeb13337cc4c667b5dfe8fc8818269" kindref="member">key_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item_1aaed10efea87dd145e309698b27ae1f72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item_1aaed10efea87dd145e309698b27ae1f72" kindref="member">get</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyTuple_GetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;object&gt;(result);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item_1a2f37c49f52b51bbf9c774a187956c254" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1accessor__policies_1_1tuple__item_1a2f37c49f52b51bbf9c774a187956c254" kindref="member">set</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyTuple_SetItem<sp/>steals<sp/>a<sp/>reference<sp/>to<sp/>&apos;val&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyTuple_SetItem(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index),<sp/>val.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal">};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(accessor_policies)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy&gt;</highlight></codeline>
<codeline lineno="515" refid="classpybind11_1_1detail_1_1generic__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Policy<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="519" refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>;</highlight></codeline>
<codeline lineno="520" refid="classpybind11_1_1detail_1_1generic__iterator_1a6364472bdd2de461622fea3bee21329e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a6364472bdd2de461622fea3bee21329e" kindref="member">iterator_category</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy::iterator_category;</highlight></codeline>
<codeline lineno="521" refid="classpybind11_1_1detail_1_1generic__iterator_1aa43185a5e68cd6be7612c7549c20db05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1aa43185a5e68cd6be7612c7549c20db05" kindref="member">value_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy::value_type;</highlight></codeline>
<codeline lineno="522" refid="classpybind11_1_1detail_1_1generic__iterator_1a1c2390404e4ce1093acca8061a524897" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1c2390404e4ce1093acca8061a524897" kindref="member">reference</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy::reference;</highlight></codeline>
<codeline lineno="523" refid="classpybind11_1_1detail_1_1generic__iterator_1a3b95ff694acebd71b281cf56bd678a2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a3b95ff694acebd71b281cf56bd678a2f" kindref="member">pointer</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Policy::pointer;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="classpybind11_1_1detail_1_1generic__iterator_1a98494fb4cff15cb8e58afa0ca184276c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a98494fb4cff15cb8e58afa0ca184276c" kindref="member">generic_iterator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526" refid="classpybind11_1_1detail_1_1generic__iterator_1a780b8b680f6f4503b473f25e41ee72ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a780b8b680f6f4503b473f25e41ee72ae" kindref="member">generic_iterator</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>seq,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>index)<sp/>:<sp/>Policy(seq,<sp/>index)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classpybind11_1_1detail_1_1generic__iterator_1afb9f86efa4b5e199fd9e3fbea5dfcd66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1c2390404e4ce1093acca8061a524897" kindref="member">reference</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1afb9f86efa4b5e199fd9e3fbea5dfcd66" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Policy::dereference();<sp/>}</highlight></codeline>
<codeline lineno="529" refid="classpybind11_1_1detail_1_1generic__iterator_1a2c6a04a587796e6ff2fbcc5e446f8f7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1c2390404e4ce1093acca8061a524897" kindref="member">reference</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a2c6a04a587796e6ff2fbcc5e446f8f7a" kindref="member">operator[]</ref>(<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>n);<sp/>}</highlight></codeline>
<codeline lineno="530" refid="classpybind11_1_1detail_1_1generic__iterator_1aee3781a590f28f8ce7d0a8a9f392c0c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a3b95ff694acebd71b281cf56bd678a2f" kindref="member">pointer</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1aee3781a590f28f8ce7d0a8a9f392c0c7" kindref="member">operator-&gt;</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>**</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="classpybind11_1_1detail_1_1generic__iterator_1a6625d0bade092a4ba8ddfa49162ade95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a6625d0bade092a4ba8ddfa49162ade95" kindref="member">operator++</ref>()<sp/>{<sp/>Policy::increment();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="533" refid="classpybind11_1_1detail_1_1generic__iterator_1a602f5357684c658c9c1a29997d3365a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a602f5357684c658c9c1a29997d3365a6" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>Policy::increment();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref>;<sp/>}</highlight></codeline>
<codeline lineno="534" refid="classpybind11_1_1detail_1_1generic__iterator_1a728e881ad33ed7f3b0db4d2901b7a493" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a728e881ad33ed7f3b0db4d2901b7a493" kindref="member">operator--</ref>()<sp/>{<sp/>Policy::decrement();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="535" refid="classpybind11_1_1detail_1_1generic__iterator_1a3a40de3fc2b8ad09a708bcb6216be832" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a3a40de3fc2b8ad09a708bcb6216be832" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>Policy::decrement();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref>;<sp/>}</highlight></codeline>
<codeline lineno="536" refid="classpybind11_1_1detail_1_1generic__iterator_1a34c230cbc6e77f03b1b10f84e1e55799" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a34c230cbc6e77f03b1b10f84e1e55799" kindref="member">operator+=</ref>(<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>n)<sp/>{<sp/><ref refid="namespaceutf8_1a411eec0d2919810bb26966be242c1e9e" kindref="member">Policy::advance</ref>(n);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="537" refid="classpybind11_1_1detail_1_1generic__iterator_1a6821edf1ef4b47549c1076ec2efd6f3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a6821edf1ef4b47549c1076ec2efd6f3b" kindref="member">operator-=</ref>(<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>n)<sp/>{<sp/><ref refid="namespaceutf8_1a411eec0d2919810bb26966be242c1e9e" kindref="member">Policy::advance</ref>(-n);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="classpybind11_1_1detail_1_1generic__iterator_1a33b5fcd097d1dcc87426b4f085094d30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a33b5fcd097d1dcc87426b4f085094d30" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>n)<sp/>{<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>=<sp/>a;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>+=<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="540" refid="classpybind11_1_1detail_1_1generic__iterator_1a7f7c67731fffe592d503faa2ac6929e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a7f7c67731fffe592d503faa2ac6929e9" kindref="member">operator+</ref>(<ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="541" refid="classpybind11_1_1detail_1_1generic__iterator_1a040063b4d21cbdf70abffd52563067da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a040063b4d21cbdf70abffd52563067da" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/>n)<sp/>{<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>=<sp/>a;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>-=<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="542" refid="classpybind11_1_1detail_1_1generic__iterator_1a970506dfb104f24039493a495ff45a2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1161259f074a40e65cde08f0b0876151" kindref="member">difference_type</ref><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a970506dfb104f24039493a495ff45a2e" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.distance_to(b);<sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="classpybind11_1_1detail_1_1generic__iterator_1a4c3a003f1490fd5ac1289f8b7c63565c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a4c3a003f1490fd5ac1289f8b7c63565c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.equal(b);<sp/>}</highlight></codeline>
<codeline lineno="545" refid="classpybind11_1_1detail_1_1generic__iterator_1a00afb6c7a0f23ae65ef61656fa48dbc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a00afb6c7a0f23ae65ef61656fa48dbc3" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>==<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="546" refid="classpybind11_1_1detail_1_1generic__iterator_1a1ba57b963ed90488609924525018c0ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1aa385c45b3ae3f25ad0e665f2d3e9d663" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>-<sp/>a<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="547" refid="classpybind11_1_1detail_1_1generic__iterator_1a86651101e3caeb262109b10e9393a6c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1abaddfecdb4c1d97c4a6bfd234816f2ad" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="548" refid="classpybind11_1_1detail_1_1generic__iterator_1a089329cd2b3273776dcdd13b8cd1e396" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a089329cd2b3273776dcdd13b8cd1e396" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>&lt;<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="549" refid="classpybind11_1_1detail_1_1generic__iterator_1a1fb0728d300b006b90032e11e3aafe76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator_1a1fb0728d300b006b90032e11e3aafe76" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">It</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>&gt;<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal">};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="namespacepybind11_1_1detail_1_1iterator__policies" refkind="compound"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(iterator_policies)</highlight></codeline>
<codeline lineno="554"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="555" refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">arrow_proxy</ref><sp/>{</highlight></codeline>
<codeline lineno="556" refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy_1a7555592e7a7e154c8c3052312d497110" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy_1a7555592e7a7e154c8c3052312d497110" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy_1a8e6cd6b28d14389514ca1562a8a8ec6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy_1a8e6cd6b28d14389514ca1562a8a8ec6d" kindref="member">arrow_proxy</ref>(T<sp/>&amp;&amp;value)<sp/>:<sp/>value(<ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">move</ref>(value))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="559" refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy_1aaaf017f1fdcddbe83ebabc680b7d64b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*<ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy_1aaaf017f1fdcddbe83ebabc680b7d64b3" kindref="member">operator-&gt;</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value;<sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal">};</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" kindref="compound">sequence_fast_readonly</ref><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a98bb5940695e98b7ab0276234e16635e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a98bb5940695e98b7ab0276234e16635e" kindref="member">iterator_category</ref><sp/>=<sp/>std::random_access_iterator_tag;</highlight></codeline>
<codeline lineno="566" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a9b078445929fa67dcfd412201449c462" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">value_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="567" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1ae1d3c85f56dec6c28598dbf8f8936d43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">reference</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="568" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1ac63f13e57e891b4ce322276fc8c984f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">pointer</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">arrow_proxy&lt;const handle&gt;</ref>;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1aa6ce2a40fc210f81aa6e2215f4cb7bb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1aa6ce2a40fc210f81aa6e2215f4cb7bb7" kindref="member">sequence_fast_readonly</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>n)<sp/>:<sp/>ptr(PySequence_Fast_ITEMS(obj.ptr())<sp/>+<sp/>n)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a9fdb19bedef79afd818c1722e4ce5881" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">reference</ref><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a9fdb19bedef79afd818c1722e4ce5881" kindref="member">dereference</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;<sp/>}</highlight></codeline>
<codeline lineno="573" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a0119e5d5f4b4bfc1cd29a9401c5e9bf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a0119e5d5f4b4bfc1cd29a9401c5e9bf6" kindref="member">increment</ref>()<sp/>{<sp/>++ptr;<sp/>}</highlight></codeline>
<codeline lineno="574" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a7e84806e4bf9fc8cc60a8456b611b7bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a7e84806e4bf9fc8cc60a8456b611b7bf" kindref="member">decrement</ref>()<sp/>{<sp/>--ptr;<sp/>}</highlight></codeline>
<codeline lineno="575" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a406aba7c37e01e82eefc30afd25141d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a406aba7c37e01e82eefc30afd25141d7" kindref="member">advance</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>n)<sp/>{<sp/>ptr<sp/>+=<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="576" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a3a915ab44b44e0f581c542fb446b70c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a3a915ab44b44e0f581c542fb446b70c9" kindref="member">equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" kindref="compound">sequence_fast_readonly</ref><sp/>&amp;b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>==<sp/>b.ptr;<sp/>}</highlight></codeline>
<codeline lineno="577" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a8498e7ca48bf1f42f30adb4dbf068f26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly_1a8498e7ca48bf1f42f30adb4dbf068f26" kindref="member">distance_to</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__fast__readonly" kindref="compound">sequence_fast_readonly</ref><sp/>&amp;b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>-<sp/>b.ptr;<sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>**ptr;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite" kindref="compound">sequence_slow_readwrite</ref><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="586" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a8db0d08b7828f6bf2b41151823e27f02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a8db0d08b7828f6bf2b41151823e27f02" kindref="member">iterator_category</ref><sp/>=<sp/>std::random_access_iterator_tag;</highlight></codeline>
<codeline lineno="587" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a64377e9b3fae13d3bfc45cb34f38ee70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">value_type</ref><sp/>=<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>;</highlight></codeline>
<codeline lineno="588" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a4ee9c5e61062cb67de88c3d4420dabe5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">reference</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a3b97805a9767c683b5b999a747e19428" kindref="member">sequence_accessor</ref>;</highlight></codeline>
<codeline lineno="589" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a91a39903d5ed9bade085e330664fcd7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">pointer</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">arrow_proxy&lt;const sequence_accessor&gt;</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1aa761bb082fa715c430249e1ccd982112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1aa761bb082fa715c430249e1ccd982112" kindref="member">sequence_slow_readwrite</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>index)<sp/>:<sp/>obj(obj),<sp/>index(index)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1ae2b41e6f30ad16d21e49386a20bd547f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">reference</ref><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1ae2b41e6f30ad16d21e49386a20bd547f" kindref="member">dereference</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{obj,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index)};<sp/>}</highlight></codeline>
<codeline lineno="594" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1ad191965307db831734a379b02b0d43ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1ad191965307db831734a379b02b0d43ee" kindref="member">increment</ref>()<sp/>{<sp/>++index;<sp/>}</highlight></codeline>
<codeline lineno="595" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a0f6cd988cf9a3ebc2d93f8a34af07c49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a0f6cd988cf9a3ebc2d93f8a34af07c49" kindref="member">decrement</ref>()<sp/>{<sp/>--index;<sp/>}</highlight></codeline>
<codeline lineno="596" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a7a4644dfe67cb71606949ed3628901cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a7a4644dfe67cb71606949ed3628901cd" kindref="member">advance</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>n)<sp/>{<sp/>index<sp/>+=<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="597" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a6574bd8012113ff0ad4d1c2e79f2ebd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1a6574bd8012113ff0ad4d1c2e79f2ebd6" kindref="member">equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite" kindref="compound">sequence_slow_readwrite</ref><sp/>&amp;b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>b.index;<sp/>}</highlight></codeline>
<codeline lineno="598" refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1acdecb58eeec4b1a1fff8b08bd358a2b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite_1acdecb58eeec4b1a1fff8b08bd358a2b2" kindref="member">distance_to</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1sequence__slow__readwrite" kindref="compound">sequence_slow_readwrite</ref><sp/>&amp;b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>-<sp/>b.index;<sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>index;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">};</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly" kindref="compound">dict_readonly</ref><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a809263757d5146b03b6a45fa411980d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a809263757d5146b03b6a45fa411980d4" kindref="member">iterator_category</ref><sp/>=<sp/>std::forward_iterator_tag;</highlight></codeline>
<codeline lineno="609" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1aa0f6d931b385b48abc8fd344e63904e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1aa0f6d931b385b48abc8fd344e63904e6" kindref="member">value_type</ref><sp/>=<sp/>std::pair&lt;handle,<sp/>handle&gt;;</highlight></codeline>
<codeline lineno="610" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a1df0bec483aef4201782460fe0372547" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a1df0bec483aef4201782460fe0372547" kindref="member">reference</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1aa0f6d931b385b48abc8fd344e63904e6" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="611" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a38e040a85f4a40efe427ede173c20018" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">pointer</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1iterator__policies_1_1arrow__proxy" kindref="compound">arrow_proxy&lt;const value_type&gt;</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a290ac0dc919a1ff56f99bd8bc3202773" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a290ac0dc919a1ff56f99bd8bc3202773" kindref="member">dict_readonly</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a8873fedbdc5faa946d2d2ad204e2e7d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a8873fedbdc5faa946d2d2ad204e2e7d9" kindref="member">dict_readonly</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>pos)<sp/>:<sp/>obj(obj),<sp/>pos(pos)<sp/>{<sp/>increment();<sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a4bb99dde4e7a9a60260357016744fcf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a1df0bec483aef4201782460fe0372547" kindref="member">reference</ref><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a4bb99dde4e7a9a60260357016744fcf8" kindref="member">dereference</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{key,<sp/>value};<sp/>}</highlight></codeline>
<codeline lineno="617" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a64ca660b9c50bf94a55773c8b9bd35ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a64ca660b9c50bf94a55773c8b9bd35ae" kindref="member">increment</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_Next(obj.ptr(),<sp/>&amp;pos,<sp/>&amp;key,<sp/>&amp;value))<sp/>{<sp/>pos<sp/>=<sp/>-1;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="618" refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a0d24c9d9903c7123eab733ba1d4a5fcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly_1a0d24c9d9903c7123eab733ba1d4a5fcd" kindref="member">equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1iterator__policies_1_1dict__readonly" kindref="compound">dict_readonly</ref><sp/>&amp;b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>==<sp/>b.pos;<sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*key,<sp/>*value;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>pos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">};</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(iterator_policies)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="namespacepybind11_1_1detail_1ac76d84208a728a87ca2d8d8c2bcc82e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">tuple_iterator</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator&lt;iterator_policies::sequence_fast_readonly&gt;</ref>;</highlight></codeline>
<codeline lineno="629" refid="namespacepybind11_1_1detail_1a84ada7a5368f23523f2b6de71300590e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">list_iterator</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator&lt;iterator_policies::sequence_fast_readonly&gt;</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">tuple_iterator</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator&lt;iterator_policies::sequence_slow_readwrite&gt;</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">list_iterator</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator&lt;iterator_policies::sequence_slow_readwrite&gt;</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635" refid="namespacepybind11_1_1detail_1a61d218894f9d6ae7475f099f5ff77cdb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">sequence_iterator</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator&lt;iterator_policies::sequence_slow_readwrite&gt;</ref>;</highlight></codeline>
<codeline lineno="636" refid="namespacepybind11_1_1detail_1acf6e994ed7e8cd8e1b9f6b493314fe69" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">dict_iterator</ref><sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">generic_iterator&lt;iterator_policies::dict_readonly&gt;</ref>;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="namespacepybind11_1_1detail_1a41123cf41281d72a90d10b3e1802dc44" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a41123cf41281d72a90d10b3e1802dc44" kindref="member">PyIterable_Check</ref>(PyObject<sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref><sp/>=<sp/>PyObject_GetIter(obj);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref>)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(<ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="namespacepybind11_1_1detail_1a14fdc572afcc1bfc99227ebb2ecc39d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a14fdc572afcc1bfc99227ebb2ecc39d2" kindref="member">PyNone_Check</ref>(PyObject<sp/>*o)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o<sp/>==<sp/>Py_None;<sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="namespacepybind11_1_1detail_1a4ba91d12e5d5b5c70453e1d27aa3a3c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a4ba91d12e5d5b5c70453e1d27aa3a3c0" kindref="member">PyUnicode_Check_Permissive</ref>(PyObject<sp/>*o)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyUnicode_Check(o)<sp/>||<sp/><ref refid="common_8h_1a88e12d91c83488db6594602d276f6ebb" kindref="member">PYBIND11_BYTES_CHECK</ref>(o);<sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653" refid="classpybind11_1_1detail_1_1kwargs__proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1kwargs__proxy" kindref="compound">kwargs_proxy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="655" refid="classpybind11_1_1detail_1_1kwargs__proxy_1af61008ae2e16a1fddc1704c7d5d65bf9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1kwargs__proxy_1af61008ae2e16a1fddc1704c7d5d65bf9" kindref="member">kwargs_proxy</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(h)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="classpybind11_1_1detail_1_1args__proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1args__proxy" kindref="compound">args_proxy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="660" refid="classpybind11_1_1detail_1_1args__proxy_1ab2980c216ff35c324d8d1b0bf7e0f368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1args__proxy_1ab2980c216ff35c324d8d1b0bf7e0f368" kindref="member">args_proxy</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(h)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="661" refid="classpybind11_1_1detail_1_1args__proxy_1a0d66bd987e5b94d4f4c99d698695fbf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1kwargs__proxy" kindref="compound">kwargs_proxy</ref><sp/><ref refid="classpybind11_1_1detail_1_1args__proxy_1a0d66bd987e5b94d4f4c99d698695fbf0" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1kwargs__proxy" kindref="compound">kwargs_proxy</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal">};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="namespacepybind11_1_1detail_1a1bb7b2d2b6ae7427db48c94235737b7e" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a1bb7b2d2b6ae7427db48c94235737b7e" kindref="member">is_keyword</ref><sp/>=<sp/>std::is_base_of&lt;arg,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="666" refid="namespacepybind11_1_1detail_1a867b6e0e1acc1b3f71bb55c6cc4f73bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a867b6e0e1acc1b3f71bb55c6cc4f73bc" kindref="member">is_s_unpacking</ref><sp/>=<sp/>std::is_same&lt;args_proxy,<sp/>T&gt;;<sp/></highlight><highlight class="comment">//<sp/>*<sp/>unpacking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="namespacepybind11_1_1detail_1ac9db0f33b38b7df25ecd92538337e6cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ac9db0f33b38b7df25ecd92538337e6cf" kindref="member">is_ds_unpacking</ref><sp/>=<sp/>std::is_same&lt;kwargs_proxy,<sp/>T&gt;;<sp/></highlight><highlight class="comment">//<sp/>**<sp/>unpacking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="namespacepybind11_1_1detail_1ac67e99cefc4b762e319df00b115858c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">is_positional</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_none_of</ref>&lt;T,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a1bb7b2d2b6ae7427db48c94235737b7e" kindref="member">is_keyword</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a867b6e0e1acc1b3f71bb55c6cc4f73bc" kindref="member">is_s_unpacking</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1ac9db0f33b38b7df25ecd92538337e6cf" kindref="member">is_ds_unpacking</ref></highlight></codeline>
<codeline lineno="670"><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="671" refid="namespacepybind11_1_1detail_1a20c5044dcc99c2b2cb8ed11228844c5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">is_keyword_or_ds</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">satisfies_any_of&lt;T, is_keyword, is_ds_unpacking&gt;</ref>;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>argument<sp/>collector<sp/>forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;return_value_policy<sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference&gt;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1simple__collector" kindref="compound">simple_collector</ref>;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;return_value_policy<sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference&gt;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1unpacking__collector" kindref="compound">unpacking_collector</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>After<sp/>the<sp/>deprecated<sp/>constructors<sp/>are<sp/>removed,<sp/>this<sp/>macro<sp/>can<sp/>be<sp/>simplified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheriting<sp/>ctors:<sp/>`using<sp/>Parent::Parent`.<sp/>It&apos;s<sp/>not<sp/>an<sp/>option<sp/>right<sp/>now<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>`using`<sp/>statement<sp/>triggers<sp/>the<sp/>parent<sp/>deprecation<sp/>warning<sp/>even<sp/>if<sp/>the<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>isn&apos;t<sp/>even<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685" refid="pytypes_8h_1ab4f94fb1d39306f36e0603accc545b4b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OBJECT_COMMON(Name,<sp/>Parent,<sp/>CheckFun)<sp/>\</highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>public:<sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PYBIND11_DEPRECATED(&quot;Use<sp/>reinterpret_borrow&lt;&quot;</highlight><highlight class="normal">#Name&quot;&gt;()<sp/>or<sp/>reinterpret_steal&lt;&quot;#Name&quot;&gt;()&quot;)<sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name(handle<sp/>h,<sp/>bool<sp/>is_borrowed)<sp/>:<sp/>Parent(is_borrowed<sp/>?<sp/>Parent(h,<sp/>borrowed_t{})<sp/>:<sp/>Parent(h,<sp/>stolen_t{}))<sp/>{<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name(handle<sp/>h,<sp/>borrowed_t)<sp/>:<sp/>Parent(h,<sp/>borrowed_t{})<sp/>{<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name(handle<sp/>h,<sp/>stolen_t)<sp/>:<sp/>Parent(h,<sp/>stolen_t{})<sp/>{<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PYBIND11_DEPRECATED(&quot;Use<sp/>py::isinstance&lt;py::python_type&gt;(obj)<sp/>instead&quot;)<sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>check()<sp/>const<sp/>{<sp/>return<sp/>m_ptr<sp/>!=<sp/>nullptr<sp/>&amp;&amp;<sp/>(bool)<sp/>CheckFun(m_ptr);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>check_(handle<sp/>h)<sp/>{<sp/>return<sp/>h.ptr()<sp/>!=<sp/>nullptr<sp/>&amp;&amp;<sp/>CheckFun(h.ptr());<sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OBJECT_CVT(Name,<sp/>Parent,<sp/>CheckFun,<sp/>ConvertFun)<sp/>\</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OBJECT_COMMON(Name,<sp/>Parent,<sp/>CheckFun)<sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>deliberately<sp/>not<sp/>&apos;explicit&apos;<sp/>to<sp/>allow<sp/>implicit<sp/>conversion<sp/>from<sp/>object:<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Name(const<sp/>object<sp/>&amp;o)<sp/>:<sp/>Parent(ConvertFun(o.ptr()),<sp/>stolen_t{})<sp/>{<sp/>if<sp/>(!m_ptr)<sp/>throw<sp/>error_already_set();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="pytypes_8h_1ad4b7fc54168d44c54c0ca9863af90858" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OBJECT(Name,<sp/>Parent,<sp/>CheckFun)<sp/>\</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OBJECT_COMMON(Name,<sp/>Parent,<sp/>CheckFun)<sp/>\</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>deliberately<sp/>not<sp/>&apos;explicit&apos;<sp/>to<sp/>allow<sp/>implicit<sp/>conversion<sp/>from<sp/>object:<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Name(const<sp/>object<sp/>&amp;o)<sp/>:<sp/>Parent(o)<sp/>{<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Name(object<sp/>&amp;&amp;o)<sp/>:<sp/>Parent(std::move(o))<sp/>{<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706" refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OBJECT_DEFAULT(Name,<sp/>Parent,<sp/>CheckFun)<sp/>\</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OBJECT(Name,<sp/>Parent,<sp/>CheckFun)<sp/>\</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Name()<sp/>:<sp/>Parent()<sp/>{<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="classpybind11_1_1iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="723" refid="classpybind11_1_1iterator_1a6a4be18d68a1049272e688e31e1810e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1iterator_1a6a4be18d68a1049272e688e31e1810e7" kindref="member">iterator_category</ref><sp/>=<sp/>std::input_iterator_tag;</highlight></codeline>
<codeline lineno="724" refid="classpybind11_1_1iterator_1aadc3b2d35874175edbf21313423cf378" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1iterator_1aadc3b2d35874175edbf21313423cf378" kindref="member">difference_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>;</highlight></codeline>
<codeline lineno="725" refid="classpybind11_1_1iterator_1a24a7a60b9970835066a25a957abc17a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">value_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="726" refid="classpybind11_1_1iterator_1af57442e13a1871542ef0db9b64ea1220" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">reference</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="727" refid="classpybind11_1_1iterator_1a91c1b2259f1293462825af2cbbe7927d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">pointer</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>*;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="classpybind11_1_1iterator_1a9dd9f1c15ed36d39e2f39e067941564f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyIter_Check)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref>&amp;<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutf8_1a411eec0d2919810bb26966be242c1e9e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutf8_1a411eec0d2919810bb26966be242c1e9e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/><ref refid="namespacepybind11_1_1detail_1a55012192e1c870eb333993d1bbabe10c" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ptr<sp/>&amp;&amp;<sp/>!value.ptr())<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">iterator<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.advance();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="namespacepybind11_1_1detail_1a55012192e1c870eb333993d1bbabe10c" kindref="member">operator*</ref>();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value;<sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>iterator<sp/>sentinel()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1a87898d966ebb2cf7326f2ef778daad96" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iterator<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iterator<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;ptr()<sp/>==<sp/>b-&gt;ptr();<sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacexlnt_1a427646713a34d6803c6338e09315c84e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iterator<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iterator<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;ptr()<sp/>!=<sp/>b-&gt;ptr();<sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutf8_1a411eec0d2919810bb26966be242c1e9e" kindref="member">advance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>reinterpret_steal&lt;object&gt;(PyIter_Next(m_ptr));</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>error_already_set();<sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="778"><highlight class="normal">};</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="classpybind11_1_1iterable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1iterable" kindref="compound">iterable</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="782" refid="classpybind11_1_1iterable_1a26b1f4a19a2ac54e4a4181042167a708" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1iterable" kindref="compound">iterable</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a41123cf41281d72a90d10b3e1802dc44" kindref="member">detail::PyIterable_Check</ref>)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">};</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787" refid="classpybind11_1_1str" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1str" kindref="compound">str</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="789" refid="classpybind11_1_1str_1a53fa1ee14883e0aa85cf51d20c06fe4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1str" kindref="compound">str</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a4ba91d12e5d5b5c70453e1d27aa3a3c0" kindref="member">detail::PyUnicode_Check_Permissive</ref>,<sp/>raw_str)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyUnicode_FromStringAndSize(c,<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>n),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>string<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;explicit&apos;<sp/>is<sp/>explicitly<sp/>omitted<sp/>from<sp/>the<sp/>following<sp/>constructors<sp/>to<sp/>allow<sp/>implicit<sp/>conversion<sp/>to<sp/>py::str<sp/>from<sp/>C++<sp/>string-like<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyUnicode_FromString(c),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>string<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>:<sp/>str(s.data(),<sp/>s.size())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bytes<sp/>&amp;b);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="810" refid="group__pytypes_1ga12ddea01b1dcd952e07b03c209d598a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="group__pytypes_1ga12ddea01b1dcd952e07b03c209d598a8" kindref="member">str</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(raw_str(h.ptr()),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812" refid="classpybind11_1_1str_1abeca7f6f8718e98bf5c3b642cef1177e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyUnicode_Check(m_ptr))<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>reinterpret_steal&lt;object&gt;(PyUnicode_AsUTF8String(m_ptr));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>string<sp/>contents!<sp/>(encoding<sp/>issue)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>length;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8h_1a639f3ae94f69a47c9e269495e0da807c" kindref="member">PYBIND11_BYTES_AS_STRING_AND_SIZE</ref>(temp.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>&amp;<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>&amp;length))</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>string<sp/>contents!<sp/>(invalid<sp/>type)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>length);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="827" refid="classpybind11_1_1str_1a834ff688cd92945ddeb47409f145f1c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref><sp/><ref refid="classpybind11_1_1str_1a834ff688cd92945ddeb47409f145f1c6" kindref="member">format</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attr(</highlight><highlight class="stringliteral">&quot;format&quot;</highlight><highlight class="normal">)(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*raw_str(PyObject<sp/>*op)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*str_value<sp/>=<sp/>PyObject_Str(op);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str_value)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*unicode<sp/>=<sp/>PyUnicode_FromEncodedObject(str_value,<sp/></highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(str_value);<sp/>str_value<sp/>=<sp/>unicode;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_value;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal">};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="849" refid="namespacepybind11_1_1literals_1ac64ce16d2a0ab3f9e80fdde0e0857224" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_s(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s,<sp/>size};<sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="854" refid="classpybind11_1_1bytes" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="856" refid="classpybind11_1_1bytes_1ad380a39f1d9d6341a66d4af9e731e707" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1ad4b7fc54168d44c54c0ca9863af90858" kindref="member">PYBIND11_OBJECT</ref>(<ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="common_8h_1a88e12d91c83488db6594602d276f6ebb" kindref="member">PYBIND11_BYTES_CHECK</ref>)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>implicit<sp/>conversion:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(<ref refid="common_8h_1a77c80e7232ce873995a75ad22a6f876c" kindref="member">PYBIND11_BYTES_FROM_STRING</ref>(c),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>bytes<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1bytes" kindref="compound">bytes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(<ref refid="common_8h_1a2035228df69404443c62a841a7932fee" kindref="member">PYBIND11_BYTES_FROM_STRING_AND_SIZE</ref>(c,<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>n),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>bytes<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>implicit<sp/>conversion:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>:<sp/>bytes(s.data(),<sp/>s.size())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>bytes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref><sp/>&amp;s);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874" refid="classpybind11_1_1bytes_1aec57b24ee40f5b96dff7a5c836b247d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>length;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8h_1a639f3ae94f69a47c9e269495e0da807c" kindref="member">PYBIND11_BYTES_AS_STRING_AND_SIZE</ref>(m_ptr,<sp/>&amp;<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>&amp;length))</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>bytes<sp/>contents!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>length);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal">};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>bytes::bytes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyUnicode_Check(s.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>reinterpret_steal&lt;object&gt;(PyUnicode_AsUTF8String(s.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>string<sp/>contents!<sp/>(encoding<sp/>issue)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>length;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8h_1a639f3ae94f69a47c9e269495e0da807c" kindref="member">PYBIND11_BYTES_AS_STRING_AND_SIZE</ref>(temp.ptr(),<sp/>&amp;<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>,<sp/>&amp;length))</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>string<sp/>contents!<sp/>(invalid<sp/>type)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>reinterpret_steal&lt;object&gt;(<ref refid="common_8h_1a2035228df69404443c62a841a7932fee" kindref="member">PYBIND11_BYTES_FROM_STRING_AND_SIZE</ref>(<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>,<sp/>length));</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>bytes<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>obj.release().ptr();</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>str::str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bytes&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>length;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8h_1a639f3ae94f69a47c9e269495e0da807c" kindref="member">PYBIND11_BYTES_AS_STRING_AND_SIZE</ref>(b.ptr(),<sp/>&amp;<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>,<sp/>&amp;length))</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>bytes<sp/>contents!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>reinterpret_steal&lt;object&gt;(PyUnicode_FromStringAndSize(<ref refid="xmlparse_8c_1aaadc06b5dac8070de2c8677210967bdb" kindref="member">buffer</ref>,<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>length));</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>string<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>obj.release().ptr();</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911" refid="classpybind11_1_1none" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1none" kindref="compound">none</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="913" refid="classpybind11_1_1none_1a4166ee894c0d9c15a29e0cae00ad2693" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1ad4b7fc54168d44c54c0ca9863af90858" kindref="member">PYBIND11_OBJECT</ref>(<ref refid="classpybind11_1_1none" kindref="compound">none</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a14fdc572afcc1bfc99227ebb2ecc39d2" kindref="member">detail::PyNone_Check</ref>)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(Py_None,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref>{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal">};</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917" refid="classpybind11_1_1bool__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1bool__" kindref="compound">bool_</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="919" refid="classpybind11_1_1bool___1af50c42e887c85d212a24f4839fb0a490" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1bool__" kindref="compound">bool_</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyBool_Check,<sp/>raw_bool)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1bool__" kindref="compound">bool_</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(Py_False,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref>{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>implicit<sp/>conversion<sp/>from<sp/>and<sp/>to<sp/>`bool`:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1bool__" kindref="compound">bool_</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(value<sp/>?<sp/>Py_True<sp/>:<sp/>Py_False,<sp/>borrowed_t{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ptr<sp/>&amp;&amp;<sp/>PyLong_AsLong(m_ptr)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*raw_bool(PyObject<sp/>*op)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>PyObject_IsTrue(op);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(value<sp/>?<sp/>Py_True<sp/>:<sp/>Py_False).inc_ref().ptr();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal">};</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>value<sp/>to<sp/>the<sp/>given<sp/>unsigned<sp/>type.<sp/><sp/>If<sp/>an<sp/>error<sp/>occurs,<sp/>you<sp/>get<sp/>back<sp/>(Unsigned)<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>you<sp/>get<sp/>back<sp/>the<sp/>unsigned<sp/>long<sp/>or<sp/>unsigned<sp/>long<sp/>long<sp/>value<sp/>cast<sp/>to<sp/>(Unsigned).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(The<sp/>distinction<sp/>is<sp/>critically<sp/>important<sp/>when<sp/>casting<sp/>a<sp/>returned<sp/>-1<sp/>error<sp/>value<sp/>to<sp/>some<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unsigned<sp/>type:<sp/>(A)-1<sp/>!=<sp/>(B)-1<sp/>when<sp/>A<sp/>and<sp/>B<sp/>are<sp/>unsigned<sp/>types<sp/>of<sp/>different<sp/>sizes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Un</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="940" refid="namespacepybind11_1_1detail_1a532f0bd10c659b7ab1ce6e0aa3f8a22c" refkind="member"><highlight class="normal">Unsigned<sp/><ref refid="namespacepybind11_1_1detail_1a532f0bd10c659b7ab1ce6e0aa3f8a22c" kindref="member">as_unsigned</ref>(PyObject<sp/>*o)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Unsigned)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="942"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03000000</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>PyInt_Check(o)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>PyLong_AsUnsignedLong(o);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)<sp/>-1<sp/>&amp;&amp;<sp/>PyErr_Occurred()<sp/>?<sp/>(Unsigned)<sp/>-1<sp/>:<sp/>(Unsigned)<sp/>v;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>PyLong_AsUnsignedLongLong(o);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long)<sp/>-1<sp/>&amp;&amp;<sp/>PyErr_Occurred()<sp/>?<sp/>(Unsigned)<sp/>-1<sp/>:<sp/>(Unsigned)<sp/>v;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="classpybind11_1_1int__" refkind="compound"><highlight class="normal">class<sp/><ref refid="classpybind11_1_1int__" kindref="compound">int_</ref><sp/>:<sp/>public<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="958" refid="classpybind11_1_1int___1a6f09fdcd92165fd0cf2f0b85cb0de94f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1int__" kindref="compound">int_</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="common_8h_1a8b4988058713dfd2429d330586a9f334" kindref="member">PYBIND11_LONG_CHECK</ref>,<sp/>PyNumber_Long)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a20fe1c2f5fbb219cb211956780afee53" kindref="member">int_</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyLong_FromLong(0),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>implicit<sp/>conversion<sp/>from<sp/>C++<sp/>integral<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961" refid="classpybind11_1_1int___1a5107fd03b995bc833e03911f6cf3ca35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;std::is_integral&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a20fe1c2f5fbb219cb211956780afee53" kindref="member">int_</ref>(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_signed&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyLong_FromLong((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyLong_FromUnsignedLong((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_signed&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyLong_FromLongLong((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyLong_FromUnsignedLongLong((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>int<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;std::is_integral&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_unsigned&lt;T&gt;::value</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>detail::as_unsigned&lt;T&gt;(m_ptr)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>sizeof(T)<sp/>&lt;=<sp/>sizeof(long)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(T)<sp/>PyLong_AsLong(m_ptr)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(T)<sp/><ref refid="common_8h_1a1875e825dd4cdcb110d87a5ad227f8d6" kindref="member">PYBIND11_LONG_AS_LONGLONG</ref>(m_ptr);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal">};</highlight></codeline>
<codeline lineno="988" refid="classpybind11_1_1float__" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1float__" kindref="compound">float_</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="990" refid="classpybind11_1_1float___1a69bf3fc8efe243c9a7dd2fa173db13b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1float__" kindref="compound">float_</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyFloat_Check,<sp/>PyNumber_Float)</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>implicit<sp/>conversion<sp/>from<sp/>float/double:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a8a0e9eafeb80441295ad0b0aedc7ad24" kindref="member">float_</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyFloat_FromDouble((double)<sp/>value),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>float<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a8a0e9eafeb80441295ad0b0aedc7ad24" kindref="member">float_</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>.0)<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyFloat_FromDouble((double)<sp/>value),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>float<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>float()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>PyFloat_AsDouble(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>double()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>PyFloat_AsDouble(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1002" refid="classpybind11_1_1weakref" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1004" refid="classpybind11_1_1weakref_1a2fa7450c743b3d76edf4a2dc3a723d6c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyWeakref_Check)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>callback<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(PyWeakref_NewRef(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>callback.ptr()),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>weak<sp/>reference!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1011" refid="classpybind11_1_1slice" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1slice" kindref="compound">slice</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1013" refid="classpybind11_1_1slice_1a4ea44402466634c5fa76a42883514fa1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1slice" kindref="compound">slice</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PySlice_Check)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1slice" kindref="compound">slice</ref>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>start_,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>stop_,<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>step_)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1int__" kindref="compound">int_</ref><sp/><ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref>(start_),<sp/>stop(stop_),<sp/>step(step_);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PySlice_New(<ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref>.ptr(),<sp/>stop.ptr(),<sp/>step.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>slice<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compute(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*stop,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*step,</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*slicelength)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PySlice_GetIndicesEx((<ref refid="common_8h_1af86a8b4554e6b97571555ea879ce7620" kindref="member">PYBIND11_SLICE_OBJECT</ref><sp/>*)<sp/>m_ptr,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>length,<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*)<sp/><ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*)<sp/>stop,<sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*)<sp/>step,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>*)<sp/>slicelength)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1028" refid="classpybind11_1_1capsule" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1030" refid="classpybind11_1_1capsule_1a894d726bca944cd10b2d2c613e773610" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyCapsule_CheckExact)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>reinterpret_borrow&lt;capsule&gt;()<sp/>or<sp/>reinterpret_steal&lt;capsule&gt;()&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref>(PyObject<sp/>*ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_borrowed)<sp/>:<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(is_borrowed<sp/>?<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(ptr,<sp/><ref refid="structpybind11_1_1object_1_1borrowed__t" kindref="compound">borrowed_t</ref>{})<sp/>:<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(ptr,<sp/>stolen_t{}))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>capsule(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destructor)(PyObject<sp/>*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>object(PyCapsule_New(const_cast&lt;void<sp/>*&gt;(value),<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/>destructor),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>capsule<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Please<sp/>pass<sp/>a<sp/>destructor<sp/>that<sp/>takes<sp/>a<sp/>void<sp/>pointer<sp/>as<sp/>input&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>capsule(const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destruct)(PyObject<sp/>*))</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(PyCapsule_New(const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*&gt;(value),<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">,<sp/>destruct),<sp/>stolen_t{})<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>capsule<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>capsule(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destructor)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyCapsule_New(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>[](PyObject<sp/>*o)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>destructor<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(PyCapsule_GetContext(o));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>PyCapsule_GetPointer(o,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destructor(ptr);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>capsule<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyCapsule_SetContext(m_ptr,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>destructor)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>set<sp/>capsule<sp/>context!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>capsule(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destructor)())<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyCapsule_New(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(destructor),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>[](PyObject<sp/>*o)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>destructor<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(PyCapsule_GetPointer(o,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destructor();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>capsule<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T<sp/>*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref><sp/>=<sp/>this-&gt;<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(PyCapsule_GetPointer(m_ptr,<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>extract<sp/>capsule<sp/>contents!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyCapsule_GetName(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1081" refid="classpybind11_1_1tuple" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1083" refid="classpybind11_1_1tuple_1a6bb5150be51e34ec73ef9d984c4deb15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyTuple_Check,<sp/>PySequence_Tuple)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyTuple_New((<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>size),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>tuple<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>PyTuple_Size(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1af5fb98309375f32c5766731b02966426" kindref="member">detail::tuple_accessor</ref><sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index};<sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ac76d84208a728a87ca2d8d8c2bcc82e2" kindref="member">detail::tuple_iterator</ref><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0};<sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ac76d84208a728a87ca2d8d8c2bcc82e2" kindref="member">detail::tuple_iterator</ref><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>PyTuple_GET_SIZE(m_ptr)};<sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1093" refid="classpybind11_1_1dict" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1095" refid="classpybind11_1_1dict_1a5e2fd58b80fa96d8381c5c4471d90e77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1dict" kindref="compound">dict</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyDict_Check,<sp/>raw_dict)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyDict_New(),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>dict<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t&lt;detail::all_of&lt;detail::is_keyword_or_ds&lt;Args&gt;</ref>...&gt;::value&gt;,</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>workaround:<sp/>it<sp/>can&apos;t<sp/>compile<sp/>an<sp/>out-of-line<sp/>definition,<sp/>so<sp/>defer<sp/>the<sp/>collector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103" refid="classpybind11_1_1dict_1a0c8dab1fd837731a7b92ec40546e9d8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structcollector" kindref="compound">collector</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a1fffccaed4292498c73fe2f97a229d6c" kindref="member">detail::deferred_t&lt;detail::unpacking_collector&lt;&gt;</ref>,<sp/>Args...&gt;&gt;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>:<sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref>(<ref refid="structcollector" kindref="compound">collector</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...).<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1105" refid="classpybind11_1_1dict_1a6bef407c81ee369871ddf236a6eb1968" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106" refid="classpybind11_1_1dict_1a8812a0347e5f01a1067c489c7d8b9562" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>PyDict_Size(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1107" refid="classpybind11_1_1dict_1ae877421df343da3652a26f75b35a46ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">detail::dict_iterator</ref><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0};<sp/>}</highlight></codeline>
<codeline lineno="1108" refid="classpybind11_1_1dict_1aef15a5216d12d48732bcbd0a880d3dc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1generic__iterator" kindref="compound">detail::dict_iterator</ref><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="1109" refid="classpybind11_1_1dict_1aed24c6a2b7fb47ec8a20fc9e19f63dd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>PyDict_Clear(ptr());<sp/>}</highlight></codeline>
<codeline lineno="1110" refid="classpybind11_1_1dict_1ab1e805e4858bf7659362bc87927d69ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dict_1ab1e805e4858bf7659362bc87927d69ca" kindref="member">contains</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyDict_Contains(ptr(),<sp/>key.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>==<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyDict_Contains(ptr(),<sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(key).ptr())<sp/>==<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*raw_dict(PyObject<sp/>*op)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_Check(op))</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(op).inc_ref().ptr();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyObject_CallFunctionObjArgs((PyObject<sp/>*)<sp/>&amp;PyDict_Type,<sp/>op,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1121" refid="classpybind11_1_1sequence" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1sequence" kindref="compound">sequence</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1123" refid="classpybind11_1_1sequence_1aa4a846f9095d0f171500ae939e2b4d40" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1sequence" kindref="compound">sequence</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PySequence_Check)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>PySequence_Size(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">detail::sequence_accessor</ref><sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index};<sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a61d218894f9d6ae7475f099f5ff77cdb" kindref="member">detail::sequence_iterator</ref><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0};<sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a61d218894f9d6ae7475f099f5ff77cdb" kindref="member">detail::sequence_iterator</ref><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>PySequence_Size(m_ptr)};<sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1130" refid="classpybind11_1_1list" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1132" refid="classpybind11_1_1list_1aad28fd5a5710bdd92db5f82334a74f46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1list" kindref="compound">list</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyList_Check,<sp/>PySequence_List)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PyList_New((<ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref>)<sp/>size),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>list<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>PyList_Size(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a65ba47be7485efc588a4e1a06f235d57" kindref="member">detail::list_accessor</ref><sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index};<sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a84ada7a5368f23523f2b6de71300590e" kindref="member">detail::list_iterator</ref><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0};<sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a84ada7a5368f23523f2b6de71300590e" kindref="member">detail::list_iterator</ref><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>PyList_GET_SIZE(m_ptr)};<sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutf8_1a3827e78596fc38cfdebd721e9c45c901" kindref="member">append</ref>(T<sp/>&amp;&amp;val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyList_Append(m_ptr,<sp/><ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">detail::object_or_cast</ref>(std::forward&lt;T&gt;(val)).ptr());</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1145" refid="classpybind11_1_1args_1a0710b0b583cf83dbb8b5139c366ee07a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146" refid="classpybind11_1_1kwargs_1a960f7ba39101d9e8f53ef05fca29dfaa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1args" kindref="compound">args</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>{<sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>,<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>,<sp/>PyTuple_Check)<sp/>};</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/>{<sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>,<sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref>,<sp/>PyDict_Check)<sp/><sp/>};</highlight></codeline>
<codeline lineno="1148" refid="classpybind11_1_1set" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1set" kindref="compound">set</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1150" refid="classpybind11_1_1set_1a21b05651f7745de231bb7748c84c9dd3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1set" kindref="compound">set</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PySet_Check,<sp/>PySet_New)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1set" kindref="compound">set</ref>()<sp/>:<sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref>(PySet_New(nullptr),<sp/><ref refid="structpybind11_1_1object_1_1stolen__t" kindref="compound">stolen_t</ref>{})<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)<sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>allocate<sp/>set<sp/>object!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>PySet_Size(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add(T<sp/>&amp;&amp;val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PySet_Add(m_ptr,<sp/><ref refid="namespacepybind11_1_1detail_1a871d354267ac026b622c572f0f95b0a0" kindref="member">detail::object_or_cast</ref>(std::forward&lt;T&gt;(val)).ptr())<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>PySet_Clear(m_ptr);<sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1161" refid="classpybind11_1_1function" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1function" kindref="compound">function</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1163" refid="classpybind11_1_1function_1a5a6f5278ff50ebe54e71fcdf94936bf1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyCallable_Check)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>fun<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aa3f15fd5f825d58b0d9dc754fa96af55" kindref="member">detail::get_function</ref>(m_ptr);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fun<sp/>&amp;&amp;<sp/>PyCFunction_Check(fun.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_cpp_function()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1173" refid="classpybind11_1_1buffer" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1175" refid="classpybind11_1_1buffer_1aedc3881a04149ee1095f22ce454a0eaa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1buffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyObject_CheckBuffer)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref><sp/>request(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>PyBUF_STRIDES<sp/>|<sp/>PyBUF_FORMAT;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)<sp/>flags<sp/>|=<sp/>PyBUF_WRITABLE;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_buffer<sp/>*view<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Py_buffer();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_GetBuffer(m_ptr,<sp/>view,<sp/>flags)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>view;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>(view);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1189" refid="classpybind11_1_1memoryview" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1memoryview" kindref="compound">memoryview</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1191" refid="classpybind11_1_1memoryview_1a24fdbd6f667cb9b256a7881f0926a9be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1memoryview" kindref="compound">memoryview</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Py_buffer<sp/>buf<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Py_buffer<sp/>uses<sp/>signed<sp/>sizes,<sp/>strides<sp/>and<sp/>shape!..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;Py_ssize_t&gt;<sp/>py_strides<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;Py_ssize_t&gt;<sp/>py_shape<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.buf<sp/>=<sp/>info.<ref refid="structpybind11_1_1buffer__info_1ae76be2c1e7c0719ab49dfb4d4de56377" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.itemsize<sp/>=<sp/>info.<ref refid="structpybind11_1_1buffer__info_1acf1ef96f83718e98bbe9ab4c2f8d45ef" kindref="member">itemsize</ref>;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.format<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(info.<ref refid="structpybind11_1_1buffer__info_1a90c21deeddd49bc4436d8654b76ad9a5" kindref="member">format</ref>.c_str());</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.ndim<sp/>=<sp/>(int)<sp/>info.<ref refid="structpybind11_1_1buffer__info_1a3d1de61ded85de5f2bffa71c3f99b62c" kindref="member">ndim</ref>;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.len<sp/>=<sp/>info.<ref refid="structpybind11_1_1buffer__info_1a4c32c997a99827a3c074ec09cbcf16ec" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_strides.clear();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_shape.clear();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>info.<ref refid="structpybind11_1_1buffer__info_1a3d1de61ded85de5f2bffa71c3f99b62c" kindref="member">ndim</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_strides.push_back(info.<ref refid="structpybind11_1_1buffer__info_1a451b5dbcc97130bf0f41090fa7f3fadf" kindref="member">strides</ref>[i]);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_shape.push_back(info.<ref refid="structpybind11_1_1buffer__info_1a23473655ad61dee362f67eade9cfddde" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.strides<sp/>=<sp/>py_strides.data();</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.shape<sp/>=<sp/>py_shape.data();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.suboffsets<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.readonly<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.internal<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyMemoryView_FromBuffer(&amp;buf);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>memoryview<sp/>from<sp/>buffer<sp/>descriptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218" refid="classpybind11_1_1memoryview_1a28611d40625debabfbd95ab6ba4e5088" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a4fc2dbd315f5508afb7a5940a7c5e823" kindref="member">PYBIND11_OBJECT_CVT</ref>(<ref refid="classpybind11_1_1memoryview" kindref="compound">memoryview</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyMemoryView_Check,<sp/>PyMemoryView_FromObject)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1222"></codeline>
<codeline lineno="1225"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1ga443ea89aee29c1a3b9d57324d4d089b6" kindref="member">len</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>result<sp/>=<sp/>PyObject_Length(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>compute<sp/>length<sp/>of<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>result;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231" refid="group__python__builtins_1gad03802ec7d35cdd35a26c59cd53db480" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref><sp/><ref refid="group__python__builtins_1gad03802ec7d35cdd35a26c59cd53db480" kindref="member">repr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*str_value<sp/>=<sp/>PyObject_Repr(h.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str_value)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*unicode<sp/>=<sp/>PyUnicode_FromEncodedObject(str_value,<sp/></highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(str_value);<sp/>str_value<sp/>=<sp/>unicode;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str_value)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;str&gt;(str_value);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242" refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_GetIter(obj.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;iterator&gt;(result);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250" refid="classpybind11_1_1detail_1_1object__api_1a186bda3e95a07f59f9449ce0d050ae5e" refkind="member"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="1251" refid="classpybind11_1_1detail_1_1object__api_1a011483f62a9bd3c0fb60bfc7749fc28f" refkind="member"><highlight class="normal">template<sp/>&lt;typename<sp/>D&gt;<sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api</ref>&lt;D&gt;::begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__python__builtins_1gab4e8cc0cdd5b04fd00f4ba1f2d0f5b8d" kindref="member">iter</ref>(derived());<sp/>}</highlight></codeline>
<codeline lineno="1252" refid="classpybind11_1_1detail_1_1object__api_1ae10abab736d193f170eaa6cfbdab6d01" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">object_api&lt;D&gt;::end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator::sentinel();<sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">item_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;D&gt;::operator[]</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{derived(),<sp/>reinterpret_borrow&lt;object&gt;(key)};</highlight></codeline>
<codeline lineno="1255" refid="classpybind11_1_1detail_1_1object__api_1a579d2eeebff07ddab98814ccbfbe2728" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">item_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;D&gt;::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{derived(),<sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(key)};</highlight></codeline>
<codeline lineno="1258" refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">obj_attr_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;D&gt;::attr</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{derived(),<sp/>reinterpret_borrow&lt;object&gt;(key)};</highlight></codeline>
<codeline lineno="1261" refid="classpybind11_1_1detail_1_1object__api_1a1ed2f42e544637c80b31c05c88cb916e" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/><ref refid="classpybind11_1_1detail_1_1accessor" kindref="compound">str_attr_accessor</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;D&gt;::attr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{derived(),<sp/>key};</highlight></codeline>
<codeline lineno="1264" refid="classpybind11_1_1detail_1_1object__api_1a5babe5939b794c3408711be7fde14ee0" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/><ref refid="classpybind11_1_1detail_1_1args__proxy" kindref="compound">args_proxy</ref><sp/><ref refid="namespacepybind11_1_1detail_1a55012192e1c870eb333993d1bbabe10c" kindref="member">object_api&lt;D&gt;::operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1args__proxy" kindref="compound">args_proxy</ref>(derived().ptr());</highlight></codeline>
<codeline lineno="1267" refid="classpybind11_1_1detail_1_1object__api_1a18a4dd49680420a502a89d6d75e07748" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;D&gt;::contains</ref>(T<sp/>&amp;&amp;item)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attr(</highlight><highlight class="stringliteral">&quot;__contains__&quot;</highlight><highlight class="normal">)(std::forward&lt;T&gt;(item)).</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>cast&lt;bool&gt;();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref><sp/>object_api&lt;D&gt;::str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(derived());<sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1afe653288f3797c8a5626446af6656895" kindref="member">str_attr_accessor</ref><sp/>object_api&lt;D&gt;::doc()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attr(</highlight><highlight class="stringliteral">&quot;__doc__&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278" refid="classpybind11_1_1detail_1_1object__api_1ab2bf58fa4e77779d723142a1a51a9033" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1detail_1_1object__api" kindref="compound">object_api&lt;D&gt;::get_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyObject<sp/>*)<sp/>Py_TYPE(derived().ptr());<sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pytypes.h"/>
  </compounddef>
</doxygen>
