<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="eigen_8h" kind="file" language="C++">
    <compoundname>eigen.h</compoundname>
    <includes refid="numpy_8h" local="yes">numpy.h</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">Eigen/SparseCore</includes>
    <incdepgraph>
      <node id="3">
        <label>pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>functional</label>
      </node>
      <node id="29">
        <label>limits</label>
      </node>
      <node id="2">
        <label>numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stdexcept</label>
      </node>
      <node id="35">
        <label>numeric</label>
      </node>
      <node id="27">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Eigen/Core</label>
      </node>
      <node id="31">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="22">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>unordered_set</label>
      </node>
      <node id="5">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>frameobject.h</label>
      </node>
      <node id="25">
        <label>cstdio</label>
      </node>
      <node id="24">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>tuple</label>
      </node>
      <node id="8">
        <label>Python.h</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="10">
        <label>pythread.h</label>
      </node>
      <node id="23">
        <label>utility</label>
      </node>
      <node id="28">
        <label>array</label>
      </node>
      <node id="37">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>cstdlib</label>
      </node>
      <node id="41">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="11">
        <label>cstddef</label>
      </node>
      <node id="18">
        <label>unordered_map</label>
      </node>
      <node id="4">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>complex</label>
      </node>
      <node id="36">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>forward_list</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="33">
        <label>complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="38">
        <label>initializer_list</label>
      </node>
      <node id="20">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpybind11_1_1detail_1_1_eigen_conformable" prot="public">pybind11::detail::EigenConformable</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__extract__stride" prot="public">pybind11::detail::eigen_extract_stride</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_map_3_01_plain_object_type_00_aca7d353488c69b762feb9ff1da45e7c" prot="public">pybind11::detail::eigen_extract_stride&lt; Eigen::Map&lt; PlainObjectType, MapOptions, StrideType &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_ref_3_01_plain_object_type_00_2ece5a85c2ce8d0e734e1a3db6e91031" prot="public">pybind11::detail::eigen_extract_stride&lt; Eigen::Ref&lt; PlainObjectType, Options, StrideType &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1_eigen_props" prot="public">pybind11::detail::EigenProps</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_dense_plain&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1return__value__policy__override_3_01_return_00_01enable__if__t_3_01i184da9ad43b0913cb59beaeb2cf4ac67" prot="public">pybind11::detail::return_value_policy_override&lt; Return, enable_if_t&lt; is_eigen_dense_map&lt; Return &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1eigen__map__caster" prot="public">pybind11::detail::eigen_map_caster</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__map_596f24ff8ce0d5964c3d4c19429856d7" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_dense_map&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f" prot="public">pybind11::detail::type_caster&lt; Eigen::Ref&lt; PlainObjectType, 0, StrideType &gt;, enable_if_t&lt; is_eigen_dense_map&lt; Eigen::Ref&lt; PlainObjectType, 0, StrideType &gt; &gt;::value &gt;&gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_other&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::type_caster&lt; Type, enable_if_t&lt; is_eigen_sparse&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/eigen.h:<sp/>Transparent<sp/>conversion<sp/>for<sp/>dense<sp/>and<sp/>sparse<sp/>Eigen<sp/>matrices</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="numpy_8h" kindref="compound">numpy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>1682)<sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>conversion<sp/>of<sp/>a<sp/>64-bit<sp/>integral<sp/>type<sp/>to<sp/>a<sp/>smaller<sp/>integral<sp/>type<sp/>(potential<sp/>portability<sp/>problem)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUG__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdeprecated-declarations&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__GNUC__<sp/>&gt;=<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wint-in-bool-context&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/SparseCore&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4127)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4127:<sp/>Conditional<sp/>expression<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen<sp/>prior<sp/>to<sp/>3.2.7<sp/>doesn&apos;t<sp/>have<sp/>proper<sp/>move<sp/>constructors--but<sp/>worse,<sp/>some<sp/>classes<sp/>get<sp/>implicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>move<sp/>constructors<sp/>that<sp/>break<sp/>things.<sp/><sp/>We<sp/>could<sp/>detect<sp/>this<sp/>an<sp/>explicitly<sp/>copy,<sp/>but<sp/>an<sp/>extra<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>matrices<sp/>seems<sp/>highly<sp/>undesirable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">static_assert(EIGEN_VERSION_AT_LEAST(3,2,7),<sp/></highlight><highlight class="stringliteral">&quot;Eigen<sp/>support<sp/>in<sp/>pybind11<sp/>requires<sp/>Eigen<sp/>&gt;=<sp/>3.2.7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provide<sp/>a<sp/>convenience<sp/>alias<sp/>for<sp/>easier<sp/>pass-by-ref<sp/>usage<sp/>with<sp/>fully<sp/>dynamic<sp/>strides:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" refkind="member"><highlight class="normal">using<sp/><ref refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" kindref="member">EigenDStride</ref><sp/>=<sp/>Eigen::Stride&lt;Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="42" refid="namespacepybind11_1a23484f7bb5fa23363d338c66c71dc6a8" refkind="member"><highlight class="normal">template<sp/>&lt;typename<sp/>MatrixType&gt;<sp/>using<sp/><ref refid="namespacepybind11_1a23484f7bb5fa23363d338c66c71dc6a8" kindref="member">EigenDRef</ref><sp/>=<sp/>Eigen::Ref&lt;MatrixType,<sp/>0,<sp/><ref refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" kindref="member">EigenDStride</ref>&gt;;</highlight></codeline>
<codeline lineno="43" refid="namespacepybind11_1a6f353deb5dca5ef06dd63358f9a9bb20" refkind="member"><highlight class="normal">template<sp/>&lt;typename<sp/>MatrixType&gt;<sp/>using<sp/><ref refid="namespacepybind11_1a6f353deb5dca5ef06dd63358f9a9bb20" kindref="member">EigenDMap</ref><sp/>=<sp/>Eigen::Map&lt;MatrixType,<sp/>0,<sp/><ref refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" kindref="member">EigenDStride</ref>&gt;;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>EIGEN_VERSION_AT_LEAST(3,3,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>=<sp/>Eigen::Index;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>=<sp/>EIGEN_DEFAULT_DENSE_INDEX_TYPE;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>Eigen::Map,<sp/>Eigen::Ref,<sp/>blocks,<sp/>etc:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of&lt;is_template_base_of&lt;Eigen::DenseBase, T&gt;</ref>,<sp/>std::is_base_of&lt;Eigen::MapBase&lt;T,<sp/>Eigen::ReadOnlyAccessors&gt;,<sp/>T&gt;&gt;;</highlight></codeline>
<codeline lineno="55" refid="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" kindref="member">is_eigen_mutable_map</ref><sp/>=<sp/>std::is_base_of&lt;Eigen::MapBase&lt;T,<sp/>Eigen::WriteAccessors&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="56" refid="namespacepybind11_1_1detail_1a1d93eef8d648e5961ee24df6bed11208" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a1d93eef8d648e5961ee24df6bed11208" kindref="member">is_eigen_dense_plain</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of&lt;negation&lt;is_eigen_dense_map&lt;T&gt;</ref>&gt;,<sp/><ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of&lt;Eigen::PlainObjectBase, T&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="57" refid="namespacepybind11_1_1detail_1aede2f7fd875e4a0813a90270d9c3c625" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aede2f7fd875e4a0813a90270d9c3c625" kindref="member">is_eigen_sparse</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of&lt;Eigen::SparseMatrixBase, T&gt;</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>for<sp/>objects<sp/>inheriting<sp/>from<sp/>EigenBase&lt;Derived&gt;<sp/>that<sp/>aren&apos;t<sp/>captured<sp/>by<sp/>the<sp/>above.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>basically<sp/>covers<sp/>anything<sp/>that<sp/>can<sp/>be<sp/>assigned<sp/>to<sp/>a<sp/>dense<sp/>matrix<sp/>but<sp/>that<sp/>don&apos;t<sp/>have<sp/>a<sp/>typical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matrix<sp/>data<sp/>layout<sp/>that<sp/>can<sp/>be<sp/>copied<sp/>from<sp/>their<sp/>.data().<sp/><sp/>For<sp/>example,<sp/>DiagonalMatrix<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SelfAdjointView<sp/>fall<sp/>into<sp/>this<sp/>category.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="namespacepybind11_1_1detail_1a8bbb502df4638305b839d608cd60ad9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a8bbb502df4638305b839d608cd60ad9e" kindref="member">is_eigen_other</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">all_of</ref>&lt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a1564bbd89106287039033e5e30303258" kindref="member">is_template_base_of&lt;Eigen::EigenBase, T&gt;</ref>,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">negation&lt;any_of&lt;is_eigen_dense_map&lt;T&gt;</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a1d93eef8d648e5961ee24df6bed11208" kindref="member">is_eigen_dense_plain&lt;T&gt;</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1aede2f7fd875e4a0813a90270d9c3c625" kindref="member">is_eigen_sparse&lt;T&gt;</ref>&gt;&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Captures<sp/>numpy/eigen<sp/>conformability<sp/>status<sp/>(returned<sp/>by<sp/>EigenProps::conformable()):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structpybind11_1_1detail_1_1_eigen_conformable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EigenRowMajor&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_eigen_conformable" kindref="compound">EigenConformable</ref><sp/>{</highlight></codeline>
<codeline lineno="69" refid="structpybind11_1_1detail_1_1_eigen_conformable_1a5f2285c65863f0ec340a39bc32801773" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>conformable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70" refid="structpybind11_1_1detail_1_1_eigen_conformable_1aef7993210c0df1488430367161a53809" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>rows<sp/>=<sp/>0,<sp/>cols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71" refid="structpybind11_1_1detail_1_1_eigen_conformable_1a1d1e2da8ad5fc9325f31f8f8d7e221c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a9c1dc06329bd734b9632f108e2006e25" kindref="member">EigenDStride</ref><sp/>stride{0,<sp/>0};<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>valid<sp/>if<sp/>negativestrides<sp/>is<sp/>false!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structpybind11_1_1detail_1_1_eigen_conformable_1a143623b4a936817192ec28bac5ca1f0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negativestrides<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>do<sp/>not<sp/>use<sp/>stride!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structpybind11_1_1detail_1_1_eigen_conformable_1a5247c5a7a9b571a0ee9a64921b486527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1a5247c5a7a9b571a0ee9a64921b486527" kindref="member">EigenConformable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fits<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/>conformable{fits}<sp/>{}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrix<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structpybind11_1_1detail_1_1_eigen_conformable_1a5ecd2d94539f82d6be37350f50bba281" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1a5ecd2d94539f82d6be37350f50bba281" kindref="member">EigenConformable</ref>(<ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>r,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>c,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>rstride,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>cstride)<sp/>:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conformable{true},<sp/>rows{r},<sp/>cols{c}<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>when<sp/>Eigen<sp/>bug<sp/>#747<sp/>is<sp/>fixed,<sp/>remove<sp/>the<sp/>tests<sp/>for<sp/>non-negativity.<sp/>http://eigen.tuxfamily.org/bz/show_bug.cgi?id=747</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rstride<sp/>&lt;<sp/>0<sp/>||<sp/>cstride<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negativestrides<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride<sp/>=<sp/>{EigenRowMajor<sp/>?<sp/>rstride<sp/>:<sp/>cstride<sp/></highlight><highlight class="comment">/*<sp/>outer<sp/>stride<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EigenRowMajor<sp/>?<sp/>cstride<sp/>:<sp/>rstride<sp/></highlight><highlight class="comment">/*<sp/>inner<sp/>stride<sp/>*/</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structpybind11_1_1detail_1_1_eigen_conformable_1ab36e16001136b0fe6388b7c62995831f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1ab36e16001136b0fe6388b7c62995831f" kindref="member">EigenConformable</ref>(<ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>r,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>c,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>stride)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable" kindref="compound">EigenConformable</ref>(r,<sp/>c,<sp/>r<sp/>==<sp/>1<sp/>?<sp/>c*stride<sp/>:<sp/>stride,<sp/>c<sp/>==<sp/>1<sp/>?<sp/>r<sp/>:<sp/>r*stride)<sp/>{}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structpybind11_1_1detail_1_1_eigen_conformable_1a3f4c69db326411aab1add61b12a52808" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>props&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1a3f4c69db326411aab1add61b12a52808" kindref="member">stride_compatible</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>have<sp/>compatible<sp/>strides,<sp/>we<sp/>need<sp/>(on<sp/>both<sp/>dimensions)<sp/>one<sp/>of<sp/>fully<sp/>dynamic<sp/>strides,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matching<sp/>strides,<sp/>or<sp/>a<sp/>dimension<sp/>size<sp/>of<sp/>1<sp/>(in<sp/>which<sp/>case<sp/>the<sp/>stride<sp/>value<sp/>is<sp/>irrelevant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!negativestrides<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(props::inner_stride<sp/>==<sp/>Eigen::Dynamic<sp/>||<sp/>props::inner_stride<sp/>==<sp/>stride.inner()<sp/>||</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(EigenRowMajor<sp/>?<sp/>cols<sp/>:<sp/>rows)<sp/>==<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(props::outer_stride<sp/>==<sp/>Eigen::Dynamic<sp/>||<sp/>props::outer_stride<sp/>==<sp/>stride.outer()<sp/>||</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(EigenRowMajor<sp/>?<sp/>rows<sp/>:<sp/>cols)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101" refid="structpybind11_1_1detail_1_1_eigen_conformable_1af8a21554f292f8923b26d53c8ec5e90c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conformable;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structpybind11_1_1detail_1_1eigen__extract__stride_1a99e186e7e6adafd22ab862824fb043ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride" kindref="compound">eigen_extract_stride</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride_1a99e186e7e6adafd22ab862824fb043ee" kindref="member">type</ref><sp/>=<sp/>Type;<sp/>};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PlainObjectType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MapOptions,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eType&gt;</highlight></codeline>
<codeline lineno="106" refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_map_3_01_plain_object_type_00_aca7d353488c69b762feb9ff1da45e7c_1a2fb696685f43a8177eca8f6726816992" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride" kindref="compound">eigen_extract_stride</ref>&lt;Eigen::Map&lt;PlainObjectType,<sp/>MapOptions,<sp/>StrideType&gt;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_map_3_01_plain_object_type_00_aca7d353488c69b762feb9ff1da45e7c_1a2fb696685f43a8177eca8f6726816992" kindref="member">type</ref><sp/>=<sp/>StrideType;<sp/>};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PlainObjectType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Options,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eType&gt;</highlight></codeline>
<codeline lineno="108" refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_ref_3_01_plain_object_type_00_2ece5a85c2ce8d0e734e1a3db6e91031_1a2d2bbf026a09cf0ad995403bcd37f8dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride" kindref="compound">eigen_extract_stride</ref>&lt;Eigen::Ref&lt;PlainObjectType,<sp/>Options,<sp/>StrideType&gt;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride_3_01_eigen_1_1_ref_3_01_plain_object_type_00_2ece5a85c2ce8d0e734e1a3db6e91031_1a2d2bbf026a09cf0ad995403bcd37f8dc" kindref="member">type</ref><sp/>=<sp/>StrideType;<sp/>};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>struct<sp/>for<sp/>extracting<sp/>information<sp/>from<sp/>an<sp/>Eigen<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structpybind11_1_1detail_1_1_eigen_props" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type_&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">EigenProps</ref><sp/>{</highlight></codeline>
<codeline lineno="112" refid="structpybind11_1_1detail_1_1_eigen_props_1a893ce18099621ac27d5610e919376e55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1a893ce18099621ac27d5610e919376e55" kindref="member">Type</ref><sp/>=<sp/>Type_;</highlight></codeline>
<codeline lineno="113" refid="structpybind11_1_1detail_1_1_eigen_props_1ad1aae9a5a8ab868b29819d302211166b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1ad1aae9a5a8ab868b29819d302211166b" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type::Scalar;</highlight></codeline>
<codeline lineno="114" refid="structpybind11_1_1detail_1_1_eigen_props_1a2ba20b2aa808e3924089b2113d158546" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1a2ba20b2aa808e3924089b2113d158546" kindref="member">StrideType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__extract__stride_1a99e186e7e6adafd22ab862824fb043ee" kindref="member">eigen_extract_stride&lt;Type&gt;::type</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref></highlight></codeline>
<codeline lineno="116" refid="structpybind11_1_1detail_1_1_eigen_props_1aa2c36beb0880f4d575c74be81cefd8c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>Type::RowsAtCompileTime,</highlight></codeline>
<codeline lineno="117" refid="structpybind11_1_1detail_1_1_eigen_props_1a8933a1c37cedd6ff7fb8891ca58cad33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols<sp/>=<sp/>Type::ColsAtCompileTime,</highlight></codeline>
<codeline lineno="118" refid="structpybind11_1_1detail_1_1_eigen_props_1a73d87e4860b78e75c44fba49e98ac87d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>Type::SizeAtCompileTime;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structpybind11_1_1detail_1_1_eigen_props_1a42a93eb1792440f84da8a1883339c7f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_major<sp/>=<sp/>Type::IsRowMajor,</highlight></codeline>
<codeline lineno="121" refid="structpybind11_1_1detail_1_1_eigen_props_1a54b1d2a6f1280eaa0bb1170ea5ad4338" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>=<sp/>Type::IsVectorAtCompileTime,<sp/></highlight><highlight class="comment">//<sp/>At<sp/>least<sp/>one<sp/>dimension<sp/>has<sp/>fixed<sp/>size<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="structpybind11_1_1detail_1_1_eigen_props_1a633618a1121bbad9fc6a75d9d0cf178c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_rows<sp/>=<sp/>rows<sp/>!=<sp/>Eigen::Dynamic,</highlight></codeline>
<codeline lineno="123" refid="structpybind11_1_1detail_1_1_eigen_props_1adc5590ddbeac2edb8934a002f8842388" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_cols<sp/>=<sp/>cols<sp/>!=<sp/>Eigen::Dynamic,</highlight></codeline>
<codeline lineno="124" refid="structpybind11_1_1detail_1_1_eigen_props_1a5df9ffd3465a7cf633eb7e4689788c87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed<sp/>=<sp/>size<sp/>!=<sp/>Eigen::Dynamic,<sp/></highlight><highlight class="comment">//<sp/>Fully-fixed<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structpybind11_1_1detail_1_1_eigen_props_1ab95b5917f9f3ddf4a41bc3ca6c08af6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic<sp/>=<sp/>!fixed_rows<sp/>&amp;&amp;<sp/>!fixed_cols;<sp/></highlight><highlight class="comment">//<sp/>Fully-dynamic<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structpybind11_1_1detail_1_1_eigen_props_1afba7f0f27649a085aa93a9836719018d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;EigenIndex<sp/>i,<sp/>EigenIndex<sp/>ifzero&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1afba7f0f27649a085aa93a9836719018d" kindref="member">if_zero</ref><sp/>=<sp/>std::integral_constant&lt;EigenIndex,<sp/>i<sp/>==<sp/>0<sp/>?<sp/>ifzero<sp/>:<sp/>i&gt;;</highlight></codeline>
<codeline lineno="128" refid="structpybind11_1_1detail_1_1_eigen_props_1a2d09d2b48bb988e908fc2f91a46a77fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>inner_stride<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1afba7f0f27649a085aa93a9836719018d" kindref="member">if_zero&lt;StrideType::InnerStrideAtCompileTime, 1&gt;::value</ref>,</highlight></codeline>
<codeline lineno="129" refid="structpybind11_1_1detail_1_1_eigen_props_1a6a18b5d741de9b0486b087cde0a05dd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outer_stride<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1afba7f0f27649a085aa93a9836719018d" kindref="member">if_zero</ref>&lt;StrideType::OuterStrideAtCompileTime,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>?<sp/>size<sp/>:<sp/>row_major<sp/>?<sp/>cols<sp/>:<sp/>rows&gt;::value;</highlight></codeline>
<codeline lineno="131" refid="structpybind11_1_1detail_1_1_eigen_props_1a99d9581b1f7c0c877cbb39540bfc19a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dynamic_stride<sp/>=<sp/>inner_stride<sp/>==<sp/>Eigen::Dynamic<sp/>&amp;&amp;<sp/>outer_stride<sp/>==<sp/>Eigen::Dynamic;</highlight></codeline>
<codeline lineno="132" refid="structpybind11_1_1detail_1_1_eigen_props_1a006fa9281b46036bcabaa8fd8a3c7aa5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>requires_row_major<sp/>=<sp/>!dynamic_stride<sp/>&amp;&amp;<sp/>!vector<sp/>&amp;&amp;<sp/>(row_major<sp/>?<sp/>inner_stride<sp/>:<sp/>outer_stride)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="133" refid="structpybind11_1_1detail_1_1_eigen_props_1afc61bd7801ec035592c8f0a044218286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>requires_col_major<sp/>=<sp/>!dynamic_stride<sp/>&amp;&amp;<sp/>!vector<sp/>&amp;&amp;<sp/>(row_major<sp/>?<sp/>outer_stride<sp/>:<sp/>inner_stride)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Takes<sp/>an<sp/>input<sp/>array<sp/>and<sp/>determines<sp/>whether<sp/>we<sp/>can<sp/>make<sp/>it<sp/>fit<sp/>into<sp/>the<sp/>Eigen<sp/>type.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>array<sp/>is<sp/>a<sp/>vector,<sp/>we<sp/>attempt<sp/>to<sp/>fit<sp/>it<sp/>into<sp/>either<sp/>an<sp/>Eigen<sp/>1xN<sp/>or<sp/>Nx1<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(preferring<sp/>the<sp/>latter<sp/>if<sp/>it<sp/>will<sp/>fit<sp/>in<sp/>either,<sp/>i.e.<sp/>for<sp/>a<sp/>fully<sp/>dynamic<sp/>matrix<sp/>type).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structpybind11_1_1detail_1_1_eigen_props_1ab023f98019435ca890533c88564d95e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable" kindref="compound">EigenConformable&lt;row_major&gt;</ref><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1ab023f98019435ca890533c88564d95e3" kindref="member">conformable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a1f347b49d01c2f35ad5fadc7e620d8ad" kindref="member">ndim</ref>();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims<sp/>&lt;<sp/>1<sp/>||<sp/>dims<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims<sp/>==<sp/>2)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Matrix<sp/>type:<sp/>require<sp/>exact<sp/>match<sp/>(or<sp/>dynamic)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np_rows<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>(0),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np_cols<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>(1),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np_rstride<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>(0)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1_eigen_props_1ad1aae9a5a8ab868b29819d302211166b" kindref="member">Scalar</ref>)),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np_cstride<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>(1)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1_eigen_props_1ad1aae9a5a8ab868b29819d302211166b" kindref="member">Scalar</ref>));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fixed_rows<sp/>&amp;&amp;<sp/>np_rows<sp/>!=<sp/>rows)<sp/>||<sp/>(fixed_cols<sp/>&amp;&amp;<sp/>np_cols<sp/>!=<sp/>cols))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{np_rows,<sp/>np_cols,<sp/>np_rstride,<sp/>np_cstride};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we&apos;re<sp/>storing<sp/>an<sp/>n-vector.<sp/><sp/>Only<sp/>one<sp/>of<sp/>the<sp/>strides<sp/>will<sp/>be<sp/>used,<sp/>but<sp/>whichever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>used,<sp/>we<sp/>want<sp/>the<sp/>(single)<sp/>numpy<sp/>stride<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>n<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a1babc40ac1727b89010bc9617d2221dd" kindref="member">shape</ref>(0),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride<sp/>=<sp/>a.<ref refid="classpybind11_1_1array_1a313b0d36b25a7dd0eb134b57406b257b" kindref="member">strides</ref>(0)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpybind11_1_1detail_1_1_eigen_props_1ad1aae9a5a8ab868b29819d302211166b" kindref="member">Scalar</ref>));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Eigen<sp/>type<sp/>is<sp/>a<sp/>compile-time<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed<sp/>&amp;&amp;<sp/>size<sp/>!=<sp/>n)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>size<sp/>mismatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rows<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>n,<sp/>cols<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>n,<sp/>stride};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>has<sp/>a<sp/>fixed<sp/>size,<sp/>but<sp/>is<sp/>not<sp/>a<sp/>vector:<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed_cols)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>this<sp/>isn&apos;t<sp/>a<sp/>vector,<sp/>cols<sp/>must<sp/>be<sp/>!=<sp/>1.<sp/><sp/>We<sp/>allow<sp/>this<sp/>only<sp/>if<sp/>it<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equals<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>(rows<sp/>is<sp/>Dynamic,<sp/>and<sp/>so<sp/>1<sp/>row<sp/>is<sp/>allowed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cols<sp/>!=<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{1,<sp/>n,<sp/>stride};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>it&apos;s<sp/>either<sp/>fully<sp/>dynamic,<sp/>or<sp/>column<sp/>dynamic;<sp/>both<sp/>become<sp/>a<sp/>column<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed_rows<sp/>&amp;&amp;<sp/>rows<sp/>!=<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{n,<sp/>1,<sp/>stride};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="structpybind11_1_1detail_1_1_eigen_props_1ad1b8d5bf4afb27d6f529020967c92940" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1ad1b8d5bf4afb27d6f529020967c92940" kindref="member">descriptor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_writeable<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map&lt;Type&gt;::value</ref><sp/>&amp;&amp;<sp/><ref refid="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" kindref="member">is_eigen_mutable_map&lt;Type&gt;::value</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_order<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map&lt;Type&gt;::value</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_c_contiguous<sp/>=<sp/>show_order<sp/>&amp;&amp;<sp/>requires_row_major;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_f_contiguous<sp/>=<sp/>!show_c_contiguous<sp/>&amp;&amp;<sp/>show_order<sp/>&amp;&amp;<sp/>requires_col_major;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_descr(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;numpy.ndarray[&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor&lt;Scalar&gt;::name</ref>()<sp/>+</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">)<sp/><sp/>+<sp/>_&lt;fixed_rows&gt;(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>&lt;(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>rows&gt;(),<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">))<sp/>+</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>_&lt;fixed_cols&gt;(<ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>&lt;(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>cols&gt;(),<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>+</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>reference<sp/>type<sp/>(e.g.<sp/>Ref&lt;MatrixXd&gt;)<sp/>we<sp/>have<sp/>other<sp/>constraints<sp/>that<sp/>might<sp/>need<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>satisfied:<sp/>writeable=True<sp/>(for<sp/>a<sp/>mutable<sp/>reference),<sp/>and,<sp/>depending<sp/>on<sp/>the<sp/>map&apos;s<sp/>stride</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>options,<sp/>possibly<sp/>f_contiguous<sp/>or<sp/>c_contiguous.<sp/><sp/>We<sp/>include<sp/>them<sp/>in<sp/>the<sp/>descriptor<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>provide<sp/>some<sp/>hint<sp/>as<sp/>to<sp/>why<sp/>a<sp/>TypeError<sp/>is<sp/>occurring<sp/>(otherwise<sp/>it<sp/>can<sp/>be<sp/>confusing<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>that<sp/>a<sp/>function<sp/>accepts<sp/>a<sp/>&apos;numpy.ndarray[float64[3,2]]&apos;<sp/>and<sp/>an<sp/>error<sp/>message<sp/>that<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*gave*<sp/>a<sp/>numpy.ndarray<sp/>of<sp/>the<sp/>right<sp/>type<sp/>and<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_&lt;show_writeable&gt;(</highlight><highlight class="stringliteral">&quot;,<sp/>flags.writeable&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_&lt;show_c_contiguous&gt;(</highlight><highlight class="stringliteral">&quot;,<sp/>flags.c_contiguous&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_&lt;show_f_contiguous&gt;(</highlight><highlight class="stringliteral">&quot;,<sp/>flags.f_contiguous&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Casts<sp/>an<sp/>Eigen<sp/>type<sp/>to<sp/>numpy<sp/>array.<sp/><sp/>If<sp/>given<sp/>a<sp/>base,<sp/>the<sp/>numpy<sp/>array<sp/>references<sp/>the<sp/>src<sp/>data,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>it&apos;ll<sp/>make<sp/>a<sp/>copy.<sp/><sp/>writeable<sp/>lets<sp/>you<sp/>turn<sp/>off<sp/>the<sp/>writeable<sp/>flag<sp/>for<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="namespacepybind11_1_1detail_1a4d5c662f1a4dec1e4a9b377568b0376a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>props&gt;<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a4d5c662f1a4dec1e4a9b377568b0376a" kindref="member">eigen_array_cast</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>props::Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;src,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespacepybind11_1a51e3d317b399f8925c3b9f1980018481" kindref="member">ssize_t</ref><sp/>elem_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>props::Scalar);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>a;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(props::vector)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>({<sp/>src.size()<sp/>},<sp/>{<sp/>elem_size<sp/>*<sp/>src.innerStride()<sp/>},<sp/>src.data(),<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref>({<sp/>src.rows(),<sp/>src.cols()<sp/>},<sp/>{<sp/>elem_size<sp/>*<sp/>src.rowStride(),<sp/>elem_size<sp/>*<sp/>src.colStride()<sp/>},</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src.data(),<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!writeable)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a5b98a9783ca34a76463d4bdfc46f0fb5" kindref="member">array_proxy</ref>(a.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())-&gt;<ref refid="structpybind11_1_1detail_1_1_py_array___proxy_1ab2f1675a90ae59d15889dae88ff40e63" kindref="member">flags</ref><sp/>&amp;=<sp/>~detail::npy_api::NPY_ARRAY_WRITEABLE_;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Takes<sp/>an<sp/>lvalue<sp/>ref<sp/>to<sp/>some<sp/>Eigen<sp/>type<sp/>and<sp/>a<sp/>(python)<sp/>base<sp/>object,<sp/>creating<sp/>a<sp/>numpy<sp/>array<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>the<sp/>Eigen<sp/>object&apos;s<sp/>data<sp/>with<sp/>`base`<sp/>as<sp/>the<sp/>python-registered<sp/>base<sp/>class<sp/>(if<sp/>omitted,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>base<sp/>will<sp/>be<sp/>set<sp/>to<sp/>None,<sp/>and<sp/>lifetime<sp/>management<sp/>is<sp/>up<sp/>to<sp/>the<sp/>caller).<sp/><sp/>The<sp/>numpy<sp/>array<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-writeable<sp/>if<sp/>the<sp/>given<sp/>type<sp/>is<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>props,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="229" refid="namespacepybind11_1_1detail_1a02ebf3bb9b6e27bac2e025ff4348db95" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a02ebf3bb9b6e27bac2e025ff4348db95" kindref="member">eigen_ref_array</ref>(Type<sp/>&amp;src,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent<sp/>=<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>())<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>none<sp/>here<sp/>is<sp/>to<sp/>get<sp/>past<sp/>array&apos;s<sp/>should-we-copy<sp/>detection,<sp/>which<sp/>currently<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copies<sp/>when<sp/>there<sp/>is<sp/>no<sp/>base.<sp/><sp/>Setting<sp/>the<sp/>base<sp/>to<sp/>None<sp/>should<sp/>be<sp/>harmless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_array_cast&lt;props&gt;(src,<sp/>parent,<sp/>!std::is_const&lt;Type&gt;::value);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Takes<sp/>a<sp/>pointer<sp/>to<sp/>some<sp/>dense,<sp/>plain<sp/>Eigen<sp/>type,<sp/>builds<sp/>a<sp/>capsule<sp/>around<sp/>it,<sp/>then<sp/>returns<sp/>a<sp/>numpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array<sp/>that<sp/>references<sp/>the<sp/>encapsulated<sp/>data<sp/>with<sp/>a<sp/>python-side<sp/>reference<sp/>to<sp/>the<sp/>capsule<sp/>to<sp/>tie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>destruction<sp/>to<sp/>that<sp/>of<sp/>any<sp/>dependent<sp/>python<sp/>objects.<sp/><sp/>Const-ness<sp/>is<sp/>determined<sp/>by<sp/>whether<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>the<sp/>Type<sp/>of<sp/>the<sp/>pointer<sp/>given<sp/>is<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">template<sp/>&lt;typename<sp/>props,<sp/>typename<sp/>Type,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_eigen_dense_plain&lt;Type&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="240" refid="namespacepybind11_1_1detail_1a461794eb5f7735f9559d1143076f54f3" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a461794eb5f7735f9559d1143076f54f3" kindref="member">eigen_encapsulate</ref>(Type<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>(src,<sp/>[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*o)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o);<sp/>});</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_ref_array&lt;props&gt;(*src,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>caster<sp/>for<sp/>regular,<sp/>dense<sp/>matrix<sp/>types<sp/>(e.g.<sp/>MatrixXd),<sp/>but<sp/>not<sp/>maps/refs/etc.<sp/>of<sp/>dense</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="248" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;Type,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a1d93eef8d648e5961ee24df6bed11208" kindref="member">is_eigen_dense_plain</ref>&lt;Type&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="249" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a1087714a9028e933bed86175b6569859" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a1087714a9028e933bed86175b6569859" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type::Scalar;</highlight></codeline>
<codeline lineno="250" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1af9cf10d3d9ba9d80b1f21a5703044364" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">props</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">EigenProps&lt;Type&gt;</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a0fde806d1a76c4a725d5110b242a14ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a0fde806d1a76c4a725d5110b242a14ba" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>in<sp/>no-convert<sp/>mode,<sp/>only<sp/>load<sp/>if<sp/>given<sp/>an<sp/>array<sp/>of<sp/>the<sp/>correct<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert<sp/>&amp;&amp;<sp/>!<ref refid="namespacepybind11_1_1detail_1ab4876e0a1d4c619f690c6fdbc3216e6d" kindref="member">isinstance</ref>&lt;<ref refid="classpybind11_1_1array__t" kindref="compound">array_t&lt;Scalar&gt;</ref>&gt;(src))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coerce<sp/>into<sp/>an<sp/>array,<sp/>but<sp/>don&apos;t<sp/>do<sp/>type<sp/>conversion<sp/>yet;<sp/>the<sp/>copy<sp/>below<sp/>handles<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buf<sp/>=<sp/>array::ensure(src);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buf)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/>buf.ndim();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims<sp/>&lt;<sp/>1<sp/>||<sp/>dims<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fits<sp/>=<sp/>props::conformable(buf);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fits)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>new<sp/>type,<sp/>then<sp/>build<sp/>a<sp/>numpy<sp/>reference<sp/>into<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Type(fits.rows,<sp/>fits.cols);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/>reinterpret_steal&lt;array&gt;(eigen_ref_array&lt;props&gt;(value));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims<sp/>==<sp/>1)<sp/>ref<sp/>=<sp/>ref.squeeze();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>detail::npy_api::get().PyArray_CopyInto_(ref.ptr(),<sp/>buf.ptr());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>failed!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CType&gt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>cast_impl(CType<sp/>*src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(policy)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::take_ownership:</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::automatic:</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_encapsulate&lt;props&gt;(src);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">return_value_policy::move</ref>:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_encapsulate&lt;props&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CType(std::move(*src)));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::copy:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_array_cast&lt;props&gt;(*src);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::reference:</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::automatic_reference:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_ref_array&lt;props&gt;(*src);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::reference_internal:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_ref_array&lt;props&gt;(*src,<sp/>parent);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cast__error" kindref="compound">cast_error</ref>(</highlight><highlight class="stringliteral">&quot;unhandled<sp/>return_value_policy:<sp/>should<sp/>not<sp/>happen!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>returned<sp/>non-reference,<sp/>non-const<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a60d86c2ea87627c8e76067bd5df1ff33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a60d86c2ea87627c8e76067bd5df1ff33" kindref="member">cast</ref>(Type<sp/>&amp;&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_impl(&amp;src,<sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">return_value_policy::move</ref>,<sp/>parent);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>return<sp/>a<sp/>non-reference<sp/>const,<sp/>we<sp/>mark<sp/>the<sp/>numpy<sp/>array<sp/>readonly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a7a85859ccd314cdcb9458a8a3d58193d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a7a85859ccd314cdcb9458a8a3d58193d" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_impl(&amp;src,<sp/><ref refid="namespacepybind11_1a3cadb7f665dad17868aa4cd045f3b017" kindref="member">return_value_policy::move</ref>,<sp/>parent);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lvalue<sp/>reference<sp/>return;<sp/>default<sp/>(automatic)<sp/>becomes<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a3556f719ef08be9aafebac9f7642d4a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a3556f719ef08be9aafebac9f7642d4a5" kindref="member">cast</ref>(Type<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy<sp/>==<sp/>return_value_policy::automatic<sp/>||<sp/>policy<sp/>==<sp/>return_value_policy::automatic_reference)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>return_value_policy::copy;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_impl(&amp;src,<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>lvalue<sp/>reference<sp/>return;<sp/>default<sp/>(automatic)<sp/>becomes<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1aa243a753452e5a95633dc3e06ebfef97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1aa243a753452e5a95633dc3e06ebfef97" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy<sp/>==<sp/>return_value_policy::automatic<sp/>||<sp/>policy<sp/>==<sp/>return_value_policy::automatic_reference)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>return_value_policy::copy;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>(&amp;src,<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-const<sp/>pointer<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1ad3a9923154211a6614c8b68b3eef88ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1ad3a9923154211a6614c8b68b3eef88ab" kindref="member">cast</ref>(Type<sp/>*src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_impl(src,<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>pointer<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a384d2d390ccaee8d4cdd59d369c2a8c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a384d2d390ccaee8d4cdd59d369c2a8c8" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_impl(src,<sp/>policy,<sp/>parent);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a96c2a0cb310bc220964b673ac2c725a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a96c2a0cb310bc220964b673ac2c725a7" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>props::descriptor();<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a18a3a341b7d12c603177cc41a233ce1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Type*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value;<sp/>}</highlight></codeline>
<codeline lineno="343" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a2fd877226c550ebdc9de68383eb2bf73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Type&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="344" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1aa29133e81d2d6b255640597d82fe9f38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Type&amp;&amp;()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(value);<sp/>}</highlight></codeline>
<codeline lineno="345" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a6cc3dcc69e9aaa8603ef95334bef32d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__plai0d45ca5c7f7dcd2a08f75eeb37b517bc_1a6cc3dcc69e9aaa8603ef95334bef32d5" kindref="member">cast_op_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a3e4f52c827f0391c3ca8166590c559c9" kindref="member">movable_cast_op_type&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>Type<sp/>value;</highlight></codeline>
<codeline lineno="349"><highlight class="normal">};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen<sp/>Ref/Map<sp/>classes<sp/>have<sp/>slightly<sp/>different<sp/>policy<sp/>requirements,<sp/>meaning<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`move`<sp/>when<sp/>a<sp/>Ref/Map<sp/>rvalue<sp/>is<sp/>returned;<sp/>we<sp/>treat<sp/>Ref&lt;&gt;<sp/>sort<sp/>of<sp/>like<sp/>a<sp/>pointer<sp/>(we<sp/>care<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>underlying<sp/>data,<sp/>not<sp/>the<sp/>outer<sp/>shell).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return&gt;</highlight></codeline>
<codeline lineno="355" refid="structpybind11_1_1detail_1_1return__value__policy__override_3_01_return_00_01enable__if__t_3_01i184da9ad43b0913cb59beaeb2cf4ac67" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1return__value__policy__override" kindref="compound">return_value_policy_override</ref>&lt;Return,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map</ref>&lt;Return&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="356" refid="structpybind11_1_1detail_1_1return__value__policy__override_3_01_return_00_01enable__if__t_3_01i184da9ad43b0913cb59beaeb2cf4ac67_1af1ba6be893ec9d194d1cd333c90aa5af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/><ref refid="structpybind11_1_1detail_1_1return__value__policy__override_3_01_return_00_01enable__if__t_3_01i184da9ad43b0913cb59beaeb2cf4ac67_1af1ba6be893ec9d194d1cd333c90aa5af" kindref="member">policy</ref>(<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>casting<sp/>reference/map/block/etc.<sp/>objects<sp/>back<sp/>to<sp/>python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="structpybind11_1_1detail_1_1eigen__map__caster" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MapType&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1eigen__map__caster" kindref="compound">eigen_map_caster</ref><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">props</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">EigenProps&lt;MapType&gt;</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Directly<sp/>referencing<sp/>a<sp/>ref/map&apos;s<sp/>data<sp/>is<sp/>a<sp/>bit<sp/>dangerous<sp/>(whatever<sp/>the<sp/>map/ref<sp/>points<sp/>to<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>stay<sp/>around),<sp/>but<sp/>we&apos;ll<sp/>allow<sp/>it<sp/>under<sp/>the<sp/>assumption<sp/>that<sp/>you<sp/>know<sp/>what<sp/>you&apos;re<sp/>doing<sp/>(and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>an<sp/>appropriate<sp/>keep_alive<sp/>in<sp/>place).<sp/><sp/>We<sp/>return<sp/>a<sp/>numpy<sp/>array<sp/>pointing<sp/>directly<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ref&apos;s<sp/>data<sp/>(The<sp/>numpy<sp/>array<sp/>ends<sp/>up<sp/>read-only<sp/>if<sp/>the<sp/>ref<sp/>was<sp/>to<sp/>a<sp/>const<sp/>matrix<sp/>type.)<sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>this<sp/>means<sp/>you<sp/>need<sp/>to<sp/>ensure<sp/>you<sp/>don&apos;t<sp/>destroy<sp/>the<sp/>object<sp/>in<sp/>some<sp/>other<sp/>way<sp/>(e.g.<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>appropriate<sp/>keep_alive,<sp/>or<sp/>with<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>statically<sp/>allocated<sp/>matrix).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="structpybind11_1_1detail_1_1eigen__map__caster_1a2a7431915a431d0bfa71e09398644a33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1eigen__map__caster_1a2a7431915a431d0bfa71e09398644a33" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MapType<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(policy)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::copy:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_array_cast&lt;props&gt;(src);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::reference_internal:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_array_cast&lt;props&gt;(src,<sp/>parent,<sp/><ref refid="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" kindref="member">is_eigen_mutable_map&lt;MapType&gt;::value</ref>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::reference:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::automatic:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>return_value_policy::automatic_reference:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigen_array_cast&lt;props&gt;(src,<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>(),<sp/><ref refid="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" kindref="member">is_eigen_mutable_map&lt;MapType&gt;::value</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move,<sp/>take_ownership<sp/>don&apos;t<sp/>make<sp/>any<sp/>sense<sp/>for<sp/>a<sp/>ref/map:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>return_value_policy<sp/>for<sp/>Eigen<sp/>Map/Ref/Block<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="structpybind11_1_1detail_1_1eigen__map__caster_1a6e21f8b04570e9abc37251dac3cd2c77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1eigen__map__caster_1a6e21f8b04570e9abc37251dac3cd2c77" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>props::descriptor();<sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Explicitly<sp/>delete<sp/>these:<sp/>support<sp/>python<sp/>-&gt;<sp/>C++<sp/>conversion<sp/>on<sp/>these<sp/>(i.e.<sp/>these<sp/>can<sp/>be<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>types<sp/>but<sp/>not<sp/>bound<sp/>arguments).<sp/><sp/>We<sp/>still<sp/>provide<sp/>them<sp/>(with<sp/>an<sp/>explicitly<sp/>delete)<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>you<sp/>end<sp/>up<sp/>here<sp/>if<sp/>you<sp/>try<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="structpybind11_1_1detail_1_1eigen__map__caster_1a1acd0b934fe5d6e2cff8013bfc3a5c5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__map__caster_1a1acd0b934fe5d6e2cff8013bfc3a5c5a" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394" refid="structpybind11_1_1detail_1_1eigen__map__caster_1ac2fe26a91738ecd9f6713c6dd55dab0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>MapType()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395" refid="structpybind11_1_1detail_1_1eigen__map__caster_1a8fecaabc9e4b5af8d6bf576dae5113e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__map__caster_1a8fecaabc9e4b5af8d6bf576dae5113e7" kindref="member">cast_op_type</ref><sp/>=<sp/>MapType;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>return<sp/>any<sp/>map-like<sp/>object<sp/>(but<sp/>can<sp/>only<sp/>load<sp/>Refs,<sp/>specialized<sp/>next):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__dense__map_596f24ff8ce0d5964c3d4c19429856d7" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;Type,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a31e39736a492f7242716961a49913c35" kindref="member">is_eigen_dense_map</ref>&lt;Type&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1eigen__map__caster" kindref="compound">eigen_map_caster</ref>&lt;Type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loader<sp/>for<sp/>Ref&lt;...&gt;<sp/>arguments.<sp/><sp/>See<sp/>the<sp/>documentation<sp/>for<sp/>info<sp/>on<sp/>how<sp/>to<sp/>make<sp/>this<sp/>work<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copying<sp/>(it<sp/>requires<sp/>some<sp/>extra<sp/>effort<sp/>in<sp/>many<sp/>cases).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PlainObjectType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eType&gt;</highlight></codeline>
<codeline lineno="405" refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Ref&lt;PlainObjectType,<sp/>0,<sp/>StrideType&gt;,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;is_eigen_dense_map&lt;Eigen::Ref&lt;PlainObjectType,<sp/>0,<sp/>StrideType&gt;&gt;::value&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1eigen__map__caster" kindref="compound">eigen_map_caster</ref>&lt;Eigen::Ref&lt;PlainObjectType,<sp/>0,<sp/>StrideType&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Type<sp/>=<sp/>Eigen::Ref&lt;PlainObjectType,<sp/>0,<sp/>StrideType&gt;;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">props</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">EigenProps&lt;Type&gt;</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Scalar<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props_1ad1aae9a5a8ab868b29819d302211166b" kindref="member">props::Scalar</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>MapType<sp/>=<sp/>Eigen::Map&lt;PlainObjectType,<sp/>0,<sp/>StrideType&gt;;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">Array</ref><sp/>=<sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t</ref>&lt;Scalar,<sp/>array::forcecast<sp/>|</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((props::row_major<sp/>?<sp/>props::inner_stride<sp/>:<sp/>props::outer_stride)<sp/>==<sp/>1<sp/>?<sp/>array::c_style<sp/>:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(props::row_major<sp/>?<sp/>props::outer_stride<sp/>:<sp/>props::inner_stride)<sp/>==<sp/>1<sp/>?<sp/>array::f_style<sp/>:<sp/>0)&gt;;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_writeable<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ae70ef9cdc64f7b360e092f1adcf6f150" kindref="member">is_eigen_mutable_map&lt;Type&gt;::value</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delay<sp/>construction<sp/>(these<sp/>have<sp/>no<sp/>default<sp/>constructor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;MapType&gt;<sp/>map;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Type&gt;<sp/>ref;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>array.<sp/><sp/>When<sp/>possible,<sp/>this<sp/>is<sp/>just<sp/>a<sp/>numpy<sp/>array<sp/>pointing<sp/>to<sp/>the<sp/>source<sp/>data,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sometimes<sp/>we<sp/>can&apos;t<sp/>avoid<sp/>copying<sp/>(e.g.<sp/>input<sp/>is<sp/>not<sp/>a<sp/>numpy<sp/>array<sp/>at<sp/>all,<sp/>has<sp/>an<sp/>incompatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layout,<sp/>or<sp/>is<sp/>an<sp/>array<sp/>of<sp/>a<sp/>type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>converted).<sp/><sp/>Using<sp/>a<sp/>numpy<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(rather<sp/>than<sp/>an<sp/>Eigen<sp/>temporary)<sp/>saves<sp/>an<sp/>extra<sp/>copy<sp/>when<sp/>we<sp/>need<sp/>both<sp/>type<sp/>conversion<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>storage<sp/>order<sp/>conversion.<sp/><sp/>(Note<sp/>that<sp/>we<sp/>refuse<sp/>to<sp/>use<sp/>this<sp/>temporary<sp/>copy<sp/>when<sp/>loading<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>for<sp/>a<sp/>Ref&lt;M&gt;<sp/>with<sp/>M<sp/>non-const,<sp/>i.e.<sp/>a<sp/>read-write<sp/>reference).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">Array</ref><sp/>copy_or_ref;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="429" refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f_1a5e66e6fb143353dff71aeb276eed85d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f_1a5e66e6fb143353dff71aeb276eed85d0" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>whether<sp/>what<sp/>we<sp/>have<sp/>is<sp/>already<sp/>an<sp/>array<sp/>of<sp/>the<sp/>right<sp/>type.<sp/><sp/>If<sp/>not,<sp/>we<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>a<sp/>copy<sp/>(because<sp/>the<sp/>copy<sp/>is<sp/>also<sp/>going<sp/>to<sp/>do<sp/>type<sp/>conversion).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_copy<sp/>=<sp/>!isinstance&lt;Array&gt;(src);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_conformable" kindref="compound">EigenConformable&lt;props::row_major&gt;</ref><sp/>fits;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!need_copy)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>need<sp/>a<sp/>converting<sp/>copy,<sp/>but<sp/>we<sp/>also<sp/>need<sp/>to<sp/>check<sp/>whether<sp/>the<sp/>strides<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compatible<sp/>with<sp/>the<sp/>Ref&apos;s<sp/>stride<sp/>requirements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">Array</ref><sp/>aref<sp/>=<sp/>reinterpret_borrow&lt;Array&gt;(src);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aref<sp/>&amp;&amp;<sp/>(!need_writeable<sp/>||<sp/>aref.<ref refid="classpybind11_1_1array_1a3e0d57570e47aa5e1637b3d7f872197a" kindref="member">writeable</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>props::conformable(aref);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fits)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Incompatible<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fits.template<sp/>stride_compatible&lt;props&gt;())</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need_copy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_or_ref<sp/>=<sp/>std::move(aref);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need_copy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_copy)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>copy:<sp/>If<sp/>we<sp/>need<sp/>a<sp/>mutable<sp/>reference,<sp/>or<sp/>we&apos;re<sp/>not<sp/>supposed<sp/>to<sp/>convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(either<sp/>because<sp/>we&apos;re<sp/>in<sp/>the<sp/>no-convert<sp/>overload<sp/>pass,<sp/>or<sp/>because<sp/>we&apos;re<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instructed<sp/>not<sp/>to<sp/>copy<sp/>(via<sp/>`py::arg().noconvert()`)<sp/>we<sp/>have<sp/>to<sp/>fail<sp/>loading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!convert<sp/>||<sp/>need_writeable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array__t" kindref="compound">Array</ref><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref><sp/>=<sp/>Array::ensure(src);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>props::conformable(<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fits<sp/>||<sp/>!fits.template<sp/>stride_compatible&lt;props&gt;())</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_or_ref<sp/>=<sp/>std::move(<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69ca12cba3ee81cf4a793796a51b6327c678" kindref="member">copy</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1af62c3b270c006fce8eb96756ca0c3979" kindref="member">loader_life_support::add_patient</ref>(copy_or_ref);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref.reset();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MapType(data(copy_or_ref),<sp/>fits.<ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1ad9eabc35c7ddfca260c6e0a339f592c9" kindref="member">rows</ref>,<sp/>fits.<ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1aef7993210c0df1488430367161a53809" kindref="member">cols</ref>,<sp/>make_stride(fits.<ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1a1d1e2da8ad5fc9325f31f8f8d7e221c3" kindref="member">stride</ref>.outer(),<sp/>fits.<ref refid="structpybind11_1_1detail_1_1_eigen_conformable_1a1d1e2da8ad5fc9325f31f8f8d7e221c3" kindref="member">stride</ref>.inner())));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type(*map));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f_1a73a5760acd495055dd84c60e2c243827" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Type*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref.get();<sp/>}</highlight></codeline>
<codeline lineno="476" refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f_1a4757918286f57f8c400314d0059c8f41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Type&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ref;<sp/>}</highlight></codeline>
<codeline lineno="477" refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f_1a2426cfebed8c7324a581a6c962345562" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_eigen_1_1_ref_3_01_plain_object_type_00_010_00_01_47673883830ccbc02dc6d334fc14583f_1a2426cfebed8c7324a581a6c962345562" kindref="member">cast_op_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1abd8bac29f0de8fe374d7567dfb8bee8d" kindref="member">pybind11::detail::cast_op_type&lt;_T&gt;</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>Type,<sp/>enable_if_t&lt;is_eigen_mutable_map&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>*data(<ref refid="classpybind11_1_1array__t" kindref="compound">Array</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="classpybind11_1_1array_1ac07e441b9918ff66a74537bc0bb39f40" kindref="member">mutable_data</ref>();<sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T<sp/>=<sp/>Type,<sp/>enable_if_t&lt;!is_eigen_mutable_map&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar<sp/>*data(Array<sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="classpybind11_1_1array_1a89cb34c10b4e3cea34bd5d5534623986" kindref="member">data</ref>();<sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>figure<sp/>out<sp/>a<sp/>constructor<sp/>of<sp/>`Stride`<sp/>that<sp/>will<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>both<sp/>strides<sp/>are<sp/>fixed,<sp/>use<sp/>a<sp/>default<sp/>constructor:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>stride_ctor_default<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S::InnerStrideAtCompileTime<sp/>!=<sp/>Eigen::Dynamic<sp/>&amp;&amp;<sp/>S::OuterStrideAtCompileTime<sp/>!=<sp/>Eigen::Dynamic<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_default_constructible&lt;S&gt;::value&gt;;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>if<sp/>there<sp/>is<sp/>a<sp/>two-index<sp/>constructor,<sp/>assume<sp/>it<sp/>is<sp/>(outer,inner)<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen::Stride,<sp/>and<sp/>use<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>stride_ctor_dual<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!stride_ctor_default&lt;S&gt;::value<sp/>&amp;&amp;<sp/>std::is_constructible&lt;S,<sp/>EigenIndex,<sp/>EigenIndex&gt;::value&gt;;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>if<sp/>there<sp/>is<sp/>a<sp/>one-index<sp/>constructor,<sp/>and<sp/>just<sp/>one<sp/>of<sp/>the<sp/>strides<sp/>is<sp/>dynamic,<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>(passing<sp/>whichever<sp/>stride<sp/>is<sp/>dynamic).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>stride_ctor_outer<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!any_of&lt;stride_ctor_default&lt;S&gt;,<sp/>stride_ctor_dual&lt;S&gt;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S::OuterStrideAtCompileTime<sp/>==<sp/>Eigen::Dynamic<sp/>&amp;&amp;<sp/>S::InnerStrideAtCompileTime<sp/>!=<sp/>Eigen::Dynamic<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;S,<sp/>EigenIndex&gt;::value&gt;;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>stride_ctor_inner<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a6ca0ee2a0994f339af2a7ab9c0a08fb3" kindref="member">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!any_of&lt;stride_ctor_default&lt;S&gt;,<sp/>stride_ctor_dual&lt;S&gt;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S::InnerStrideAtCompileTime<sp/>==<sp/>Eigen::Dynamic<sp/>&amp;&amp;<sp/>S::OuterStrideAtCompileTime<sp/>!=<sp/>Eigen::Dynamic<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;S,<sp/>EigenIndex&gt;::value&gt;;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>S<sp/>=<sp/>StrideType,<sp/>enable_if_t&lt;stride_ctor_default&lt;S&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>S<sp/>make_stride(<ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S();<sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>S<sp/>=<sp/>StrideType,<sp/>enable_if_t&lt;stride_ctor_dual&lt;S&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>S<sp/>make_stride(<ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>outer,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>inner)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S(outer,<sp/>inner);<sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>S<sp/>=<sp/>StrideType,<sp/>enable_if_t&lt;stride_ctor_outer&lt;S&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>S<sp/>make_stride(<ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>outer,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S(outer);<sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>S<sp/>=<sp/>StrideType,<sp/>enable_if_t&lt;stride_ctor_inner&lt;S&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>S<sp/>make_stride(<ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a4dd09e9738bcaaf171d987fc201dc92c" kindref="member">EigenIndex</ref><sp/>inner)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S(inner);<sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">};</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type_caster<sp/>for<sp/>special<sp/>matrix<sp/>types<sp/>(e.g.<sp/>DiagonalMatrix),<sp/>which<sp/>are<sp/>EigenBase,<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EigenDense<sp/>(i.e.<sp/>they<sp/>don&apos;t<sp/>have<sp/>a<sp/>data(),<sp/>at<sp/>least<sp/>not<sp/>with<sp/>the<sp/>usual<sp/>matrix<sp/>layout).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>load()<sp/>is<sp/>not<sp/>supported,<sp/>but<sp/>we<sp/>can<sp/>cast<sp/>them<sp/>into<sp/>the<sp/>python<sp/>domain<sp/>by<sp/>first<sp/>copying<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regular<sp/>Eigen::Matrix,<sp/>then<sp/>casting<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="522" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;Type,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a8bbb502df4638305b839d608cd60ad9e" kindref="member">is_eigen_other</ref>&lt;Type&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="524" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a0e3a5af9be865a781c901892ec0b193d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a0e3a5af9be865a781c901892ec0b193d" kindref="member">Matrix</ref><sp/>=<sp/>Eigen::Matrix&lt;typename<sp/>Type::Scalar,<sp/>Type::RowsAtCompileTime,<sp/>Type::ColsAtCompileTime&gt;;</highlight></codeline>
<codeline lineno="525" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1ac796e70da1e4429d0231aca7915973fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">props</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1_eigen_props" kindref="compound">EigenProps&lt;Matrix&gt;</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="527" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a91b59604005d5b0f7e19dd3a05087138" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a91b59604005d5b0f7e19dd3a05087138" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h<sp/>=<sp/>eigen_encapsulate&lt;props&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a0e3a5af9be865a781c901892ec0b193d" kindref="member">Matrix</ref>(src));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a1cb6023a0ed6b142ce334e5f4442efa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a1cb6023a0ed6b142ce334e5f4442efa7" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a1cb6023a0ed6b142ce334e5f4442efa7" kindref="member">cast</ref>(*src,<sp/>policy,<sp/>parent);<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a6bfda121d351697fdbfaca392875d6d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a6bfda121d351697fdbfaca392875d6d1" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>props::descriptor();<sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Explicitly<sp/>delete<sp/>these:<sp/>support<sp/>python<sp/>-&gt;<sp/>C++<sp/>conversion<sp/>on<sp/>these<sp/>(i.e.<sp/>these<sp/>can<sp/>be<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>types<sp/>but<sp/>not<sp/>bound<sp/>arguments).<sp/><sp/>We<sp/>still<sp/>provide<sp/>them<sp/>(with<sp/>an<sp/>explicitly<sp/>delete)<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>you<sp/>end<sp/>up<sp/>here<sp/>if<sp/>you<sp/>try<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a8826c8eb77dea58edf6945dd72648442" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a8826c8eb77dea58edf6945dd72648442" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a7df082b61d58d4c14d78aed601b8c780" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Type()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a9f0dd696853163ff8f0f771dafe89ab6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__other_3_01_type_01_4_1_1value_01_4_01_4_1a9f0dd696853163ff8f0f771dafe89ab6" kindref="member">cast_op_type</ref><sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="544" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">type_caster</ref>&lt;Type,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1aede2f7fd875e4a0813a90270d9c3c625" kindref="member">is_eigen_sparse</ref>&lt;Type&gt;::value&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="545" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a46f9a6901cbe138bd77b2874d91ff88e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type::Scalar<sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a46f9a6901cbe138bd77b2874d91ff88e" kindref="member">Scalar</ref>;</highlight></codeline>
<codeline lineno="546" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a05cec2d27d1f31c6d3aad950c68c2863" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">remove_reference_t&lt;decltype(*std::declval&lt;Type&gt;</ref>().outerIndexPtr())&gt;<sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a05cec2d27d1f31c6d3aad950c68c2863" kindref="member">StorageIndex</ref>;</highlight></codeline>
<codeline lineno="547" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a574f098b81284e4a1e3357ed5a9439c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type::Index<sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a574f098b81284e4a1e3357ed5a9439c2" kindref="member">Index</ref>;</highlight></codeline>
<codeline lineno="548" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a8f46ffc552cc498be7c9a7a694ebe788" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rowMajor<sp/>=<sp/>Type::IsRowMajor;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a4e8095750292a3e7c5cc2ba121de81c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a4e8095750292a3e7c5cc2ba121de81c2" kindref="member">load</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!src)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>reinterpret_borrow&lt;object&gt;(src);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>sparse_module<sp/>=<sp/>module::import(</highlight><highlight class="stringliteral">&quot;scipy.sparse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>matrix_type<sp/>=<sp/>sparse_module.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowMajor<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;csr_matrix&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;csc_matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.get_type().is(matrix_type))<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>matrix_type(obj);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>values<sp/>=<sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t&lt;Scalar&gt;</ref>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>obj.attr(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>innerIndices<sp/>=<sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t&lt;StorageIndex&gt;</ref>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>obj.attr(</highlight><highlight class="stringliteral">&quot;indices&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outerIndices<sp/>=<sp/><ref refid="classpybind11_1_1array__t" kindref="compound">array_t&lt;StorageIndex&gt;</ref>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>obj.attr(</highlight><highlight class="stringliteral">&quot;indptr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">pybind11::tuple</ref>((<ref refid="classpybind11_1_1object" kindref="compound">pybind11::object</ref>)<sp/>obj.attr(</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nnz<sp/>=<sp/>obj.attr(</highlight><highlight class="stringliteral">&quot;nnz&quot;</highlight><highlight class="normal">).cast&lt;<ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1a574f098b81284e4a1e3357ed5a9439c2" kindref="member">Index</ref>&gt;();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!values<sp/>||<sp/>!innerIndices<sp/>||<sp/>!outerIndices)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Eigen::MappedSparseMatrix&lt;Scalar,<sp/>Type::Flags,<sp/>StorageIndex&gt;(</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape[0].cast&lt;Index&gt;(),<sp/>shape[1].cast&lt;Index&gt;(),<sp/>nnz,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outerIndices.mutable_data(),<sp/>innerIndices.mutable_data(),<sp/>values.mutable_data());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1afbeeed2fbd91dcf8c9674232b5ad6bb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1afbeeed2fbd91dcf8c9674232b5ad6bb6" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;src,<sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/></highlight><highlight class="comment">/*<sp/>policy<sp/>*/</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Type&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src).makeCompressed();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>matrix_type<sp/>=<sp/>module::import(</highlight><highlight class="stringliteral">&quot;scipy.sparse&quot;</highlight><highlight class="normal">).<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowMajor<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;csr_matrix&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;csc_matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>data(src.nonZeros(),<sp/>src.valuePtr());</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>outerIndices((rowMajor<sp/>?<sp/>src.rows()<sp/>:<sp/>src.cols())<sp/>+<sp/>1,<sp/>src.outerIndexPtr());</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1array" kindref="compound">array</ref><sp/>innerIndices(src.nonZeros(),<sp/>src.innerIndexPtr());</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix_type(</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" kindref="member">std::make_tuple</ref>(data,<sp/>innerIndices,<sp/>outerIndices),</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(src.rows(),<sp/>src.cols())</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cast_8h_1a026b55873d04f38f5ae026c900d16160" kindref="member">PYBIND11_TYPE_CASTER</ref>(Type,<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>&lt;(Type::IsRowMajor)<sp/>!=<sp/>0&gt;(</highlight><highlight class="stringliteral">&quot;scipy.sparse.csr_matrix[&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;scipy.sparse.csc_matrix[&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="600" refid="structpybind11_1_1detail_1_1type__caster_3_01_type_00_01enable__if__t_3_01is__eigen__sparse_3_01_type_01_4_1_1value_01_4_01_4_1acd814b4da8f26dab25d036f9873e6dab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="structpybind11_1_1detail_1_1npy__format__descriptor" kindref="compound">npy_format_descriptor&lt;Scalar&gt;::name</ref>()<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="601"><highlight class="normal">};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h"/>
  </compounddef>
</doxygen>
