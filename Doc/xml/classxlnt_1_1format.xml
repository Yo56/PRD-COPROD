<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="classxlnt_1_1format" kind="class" language="C++" prot="public">
    <compoundname>xlnt::format</compoundname>
    <includes refid="format_8hpp" local="no">format.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classxlnt_1_1format_1a8f7c8587d229b210b77937e24479888f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct detail::stylesheet</definition>
        <argsstring></argsstring>
        <name>detail::stylesheet</name>
        <param>
          <type><ref refid="structxlnt_1_1detail_1_1stylesheet" kindref="compound">detail::stylesheet</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="219" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classxlnt_1_1format_1aeaa1b2a5f3d37ddb4b8ca1ebaab144f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class detail::xlsx_producer</definition>
        <argsstring></argsstring>
        <name>detail::xlsx_producer</name>
        <param>
          <type><ref refid="classxlnt_1_1detail_1_1xlsx__producer" kindref="compound">detail::xlsx_producer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="220" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classxlnt_1_1format_1a5c27ff96f65a231e21871a228cbaf740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class detail::xlsx_consumer</definition>
        <argsstring></argsstring>
        <name>detail::xlsx_consumer</name>
        <param>
          <type><ref refid="classxlnt_1_1detail_1_1xlsx__consumer" kindref="compound">detail::xlsx_consumer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="221" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classxlnt_1_1format_1aae88f49f4ddcc1e24b2e6c1841c35018" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class cell</definition>
        <argsstring></argsstring>
        <name>cell</name>
        <param>
          <type><ref refid="classxlnt_1_1cell" kindref="compound">cell</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="222" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classxlnt_1_1format_1a0e50bfa9108c9e3498b15c346ca0caa1" prot="private" static="no" mutable="no">
        <type><ref refid="structxlnt_1_1detail_1_1format__impl" kindref="compound">detail::format_impl</ref> *</type>
        <definition>detail::format_impl* xlnt::format::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <briefdescription>
<para>The internal implementation of this format </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="232" column="25" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classxlnt_1_1format_1a5dc8127078e251ace7ccbfae09f1c1fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1alignment" kindref="compound">alignment</ref></type>
        <definition>xlnt::alignment xlnt::format::alignment</definition>
        <argsstring>() const</argsstring>
        <name>alignment</name>
        <briefdescription>
<para>Returns the alignment of this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="1" column="0" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aeb3fb9fe8dbbc20c28bdca9c81809566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::alignment</definition>
        <argsstring>(const xlnt::alignment &amp;new_alignment, xlnt::optional&lt; bool &gt; applied={})</argsstring>
        <name>alignment</name>
        <param>
          <type>const <ref refid="classxlnt_1_1alignment" kindref="compound">xlnt::alignment</ref> &amp;</type>
          <declname>new_alignment</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">xlnt::optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the alignment of this format to new_alignment. Applied, which defaults to true, determines whether the alignment should be enabled for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="70" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a7d49c98dc4a8ac23c0dc8524d72b3509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::alignment_applied</definition>
        <argsstring>() const</argsstring>
        <name>alignment_applied</name>
        <briefdescription>
<para>Returns true if the alignment of this format should be applied to cells using it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="76" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1ada7edb1175139acec9e2e28006fabbca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1border" kindref="compound">border</ref></type>
        <definition>xlnt::border xlnt::format::border</definition>
        <argsstring>() const</argsstring>
        <name>border</name>
        <briefdescription>
<para>Returns the border of this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="76" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aafa9c28d7fe7f4a4599e5e5080099e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::border</definition>
        <argsstring>(const xlnt::border &amp;new_border, xlnt::optional&lt; bool &gt; applied={})</argsstring>
        <name>border</name>
        <param>
          <type>const <ref refid="classxlnt_1_1border" kindref="compound">xlnt::border</ref> &amp;</type>
          <declname>new_border</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">xlnt::optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the border of this format to new_border. Applied, which defaults to true, determines whether the border should be enabled for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="88" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1ad0a104212a7c12d2d31682231ecfd76f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::border_applied</definition>
        <argsstring>() const</argsstring>
        <name>border_applied</name>
        <briefdescription>
<para>Returns true if the border set for this format should be applied to cells using the format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="93" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1ae8e97c70e27505eb71de104b97b9bd99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1fill" kindref="compound">fill</ref></type>
        <definition>xlnt::fill xlnt::format::fill</definition>
        <argsstring>() const</argsstring>
        <name>fill</name>
        <briefdescription>
<para>Returns the fill of this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="93" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a2899ea9de48027959c070b91f8e1b227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::fill</definition>
        <argsstring>(const xlnt::fill &amp;new_fill, xlnt::optional&lt; bool &gt; applied={})</argsstring>
        <name>fill</name>
        <param>
          <type>const <ref refid="classxlnt_1_1fill" kindref="compound">xlnt::fill</ref> &amp;</type>
          <declname>new_fill</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">xlnt::optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the fill of this format to new_fill. Applied, which defaults to true, determines whether the border should be enabled for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="105" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aef2d83964336ce6d598a9075b89b6869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::fill_applied</definition>
        <argsstring>() const</argsstring>
        <name>fill_applied</name>
        <briefdescription>
<para>Returns true if the fill set for this format should be applied to cells using the format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="110" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="175" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a6aa1f9e912a03e32d05fae3f1e2d40dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1font" kindref="compound">font</ref></type>
        <definition>xlnt::font xlnt::format::font</definition>
        <argsstring>() const</argsstring>
        <name>font</name>
        <briefdescription>
<para>Returns the font of this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="110" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aaa3d86ce601d699bd81974b1bae71f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::font</definition>
        <argsstring>(const xlnt::font &amp;new_font, xlnt::optional&lt; bool &gt; applied={})</argsstring>
        <name>font</name>
        <param>
          <type>const <ref refid="classxlnt_1_1font" kindref="compound">xlnt::font</ref> &amp;</type>
          <declname>new_font</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">xlnt::optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the font of this format to new_font. Applied, which defaults to true, determines whether the font should be enabled for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="122" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aa369188d34c36fbd1c69914bc5ee5afb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::font_applied</definition>
        <argsstring>() const</argsstring>
        <name>font_applied</name>
        <briefdescription>
<para>Returns true if the font set for this format should be applied to cells using the format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="127" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="182" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1af5102d0de91e1dba741a5666ec53e94b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1number__format" kindref="compound">number_format</ref></type>
        <definition>xlnt::number_format xlnt::format::number_format</definition>
        <argsstring>() const</argsstring>
        <name>number_format</name>
        <briefdescription>
<para>Returns the number format of this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="127" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="125" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a63059bc552e121dd84aa6bd833da1a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::number_format</definition>
        <argsstring>(const xlnt::number_format &amp;new_number_format, xlnt::optional&lt; bool &gt; applied={})</argsstring>
        <name>number_format</name>
        <param>
          <type>const <ref refid="classxlnt_1_1number__format" kindref="compound">xlnt::number_format</ref> &amp;</type>
          <declname>new_number_format</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">xlnt::optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the number format of this format to new_number_format. Applied, which defaults to true, determines whether the number format should be enabled for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="139" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="136" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aa64f3a4c798d7c23a691f0ef19bb33de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::number_format_applied</definition>
        <argsstring>() const</argsstring>
        <name>number_format_applied</name>
        <briefdescription>
<para>Returns true if the <ref refid="classxlnt_1_1number__format" kindref="compound">number_format</ref> set for this format should be applied to cells using the format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="144" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a87f5d795acd27a125f36fa98d2a7b854" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1protection" kindref="compound">protection</ref></type>
        <definition>xlnt::protection xlnt::format::protection</definition>
        <argsstring>() const</argsstring>
        <name>protection</name>
        <briefdescription>
<para>Returns the protection of this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="144" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1acfaa52c43a3f14327a5ddef667d96064" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::protection_applied</definition>
        <argsstring>() const</argsstring>
        <name>protection_applied</name>
        <briefdescription>
<para>Returns true if the protection set for this format should be applied to cells using the format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="154" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="196" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a051be5ab38863b0f40f04489c4c64c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::protection</definition>
        <argsstring>(const xlnt::protection &amp;new_protection, xlnt::optional&lt; bool &gt; applied={})</argsstring>
        <name>protection</name>
        <param>
          <type>const <ref refid="classxlnt_1_1protection" kindref="compound">xlnt::protection</ref> &amp;</type>
          <declname>new_protection</declname>
        </param>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">xlnt::optional</ref>&lt; bool &gt;</type>
          <declname>applied</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sets the protection of this format to new_protection. Applied, which defaults to true, determines whether the protection should be enabled for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="161" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a98f80a66a873b00143b3ec04a0ff076b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::pivot_button</definition>
        <argsstring>() const</argsstring>
        <name>pivot_button</name>
        <briefdescription>
<para>Returns true if the pivot table interface is enabled for this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="166" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a439532780666c816766f20939809eff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::format::pivot_button</definition>
        <argsstring>(bool show)</argsstring>
        <name>pivot_button</name>
        <param>
          <type>bool</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>If show is true, a pivot table interface will be displayed for cells using this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="172" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a59abf1fc61725d40979fe195eb23c384" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::quote_prefix</definition>
        <argsstring>() const</argsstring>
        <name>quote_prefix</name>
        <briefdescription>
<para>Returns true if this format should add a single-quote prefix for all text values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="177" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1afbfe884e7a1536f62911474caeb0ece2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::format::quote_prefix</definition>
        <argsstring>(bool quote)</argsstring>
        <name>quote_prefix</name>
        <param>
          <type>bool</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
<para>If quote is true, enables a single-quote prefix for all text values in cells using this format (e.g. &quot;abc&quot; will appear as &quot;&apos;abc&quot;). The text will also not be stored in sharedStrings when this is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="184" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1aa2c7876fc4c3c5101b6a3d17050a284a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::format::has_style</definition>
        <argsstring>() const</argsstring>
        <name>has_style</name>
        <briefdescription>
<para>Returns true if this format has a corresponding style applied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="189" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1ad55188b85b3c918c23fe83de5d9adb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::format::clear_style</definition>
        <argsstring>()</argsstring>
        <name>clear_style</name>
        <briefdescription>
<para>Removes the style from this format if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="194" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a9e6f8cd7cb189788cebd3f3adaedf5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::style</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>style</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets the style of this format to a style with the given name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="199" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1acdbbe72fa3ac9998879faa3df7582aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classxlnt_1_1format" kindref="compound">format</ref></type>
        <definition>format xlnt::format::style</definition>
        <argsstring>(const class style &amp;new_style)</argsstring>
        <name>style</name>
        <param>
          <type>const class <ref refid="classxlnt_1_1style" kindref="compound">style</ref> &amp;</type>
          <declname>new_style</declname>
        </param>
        <briefdescription>
<para>Sets the style of this format to new_style. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="204" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1ac90a8e689a16882b513a23c82c2dd1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>style xlnt::format::style</definition>
        <argsstring>()</argsstring>
        <name>style</name>
        <briefdescription>
<para>Returns the style of this format. If it has no style, an <ref refid="classxlnt_1_1invalid__parameter" kindref="compound">invalid_parameter</ref> exception will be thrown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="204" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1format_1a2505bf7e0b326dc5846148367c8542c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const class <ref refid="classxlnt_1_1style" kindref="compound">style</ref></type>
        <definition>const style xlnt::format::style</definition>
        <argsstring>() const</argsstring>
        <name>style</name>
        <briefdescription>
<para>Returns the style of this format. If it has no style, an invalid_parameters exception will be thrown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="204" column="12" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="71" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classxlnt_1_1format_1acd97b45d96da3fda6b4b6b00c3658892" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xlnt::format::format</definition>
        <argsstring>(detail::format_impl *d)</argsstring>
        <name>format</name>
        <param>
          <type><ref refid="structxlnt_1_1detail_1_1format__impl" kindref="compound">detail::format_impl</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Constructs a format from an impl pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="227" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/source/styles/format.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes the formatting of a particular cell. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" line="57" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/styles/format.hpp" bodystart="58" bodyend="233"/>
    <listofallmembers>
      <member refid="classxlnt_1_1format_1a5dc8127078e251ace7ccbfae09f1c1fc" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>alignment</name></member>
      <member refid="classxlnt_1_1format_1aeb3fb9fe8dbbc20c28bdca9c81809566" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>alignment</name></member>
      <member refid="classxlnt_1_1format_1a7d49c98dc4a8ac23c0dc8524d72b3509" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>alignment_applied</name></member>
      <member refid="classxlnt_1_1format_1ada7edb1175139acec9e2e28006fabbca" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>border</name></member>
      <member refid="classxlnt_1_1format_1aafa9c28d7fe7f4a4599e5e5080099e02" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>border</name></member>
      <member refid="classxlnt_1_1format_1ad0a104212a7c12d2d31682231ecfd76f" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>border_applied</name></member>
      <member refid="classxlnt_1_1format_1aae88f49f4ddcc1e24b2e6c1841c35018" prot="private" virt="non-virtual"><scope>xlnt::format</scope><name>cell</name></member>
      <member refid="classxlnt_1_1format_1ad55188b85b3c918c23fe83de5d9adb3f" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>clear_style</name></member>
      <member refid="classxlnt_1_1format_1a0e50bfa9108c9e3498b15c346ca0caa1" prot="private" virt="non-virtual"><scope>xlnt::format</scope><name>d_</name></member>
      <member refid="classxlnt_1_1format_1a8f7c8587d229b210b77937e24479888f" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>detail::stylesheet</name></member>
      <member refid="classxlnt_1_1format_1a5c27ff96f65a231e21871a228cbaf740" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>detail::xlsx_consumer</name></member>
      <member refid="classxlnt_1_1format_1aeaa1b2a5f3d37ddb4b8ca1ebaab144f3" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>detail::xlsx_producer</name></member>
      <member refid="classxlnt_1_1format_1ae8e97c70e27505eb71de104b97b9bd99" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>fill</name></member>
      <member refid="classxlnt_1_1format_1a2899ea9de48027959c070b91f8e1b227" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>fill</name></member>
      <member refid="classxlnt_1_1format_1aef2d83964336ce6d598a9075b89b6869" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>fill_applied</name></member>
      <member refid="classxlnt_1_1format_1a6aa1f9e912a03e32d05fae3f1e2d40dc" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>font</name></member>
      <member refid="classxlnt_1_1format_1aaa3d86ce601d699bd81974b1bae71f16" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>font</name></member>
      <member refid="classxlnt_1_1format_1aa369188d34c36fbd1c69914bc5ee5afb" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>font_applied</name></member>
      <member refid="classxlnt_1_1format_1acd97b45d96da3fda6b4b6b00c3658892" prot="private" virt="non-virtual"><scope>xlnt::format</scope><name>format</name></member>
      <member refid="classxlnt_1_1format_1aa2c7876fc4c3c5101b6a3d17050a284a" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>has_style</name></member>
      <member refid="classxlnt_1_1format_1af5102d0de91e1dba741a5666ec53e94b" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>number_format</name></member>
      <member refid="classxlnt_1_1format_1a63059bc552e121dd84aa6bd833da1a8d" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>number_format</name></member>
      <member refid="classxlnt_1_1format_1aa64f3a4c798d7c23a691f0ef19bb33de" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>number_format_applied</name></member>
      <member refid="classxlnt_1_1format_1a98f80a66a873b00143b3ec04a0ff076b" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>pivot_button</name></member>
      <member refid="classxlnt_1_1format_1a439532780666c816766f20939809eff9" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>pivot_button</name></member>
      <member refid="classxlnt_1_1format_1a87f5d795acd27a125f36fa98d2a7b854" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>protection</name></member>
      <member refid="classxlnt_1_1format_1a051be5ab38863b0f40f04489c4c64c42" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>protection</name></member>
      <member refid="classxlnt_1_1format_1acfaa52c43a3f14327a5ddef667d96064" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>protection_applied</name></member>
      <member refid="classxlnt_1_1format_1a59abf1fc61725d40979fe195eb23c384" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>quote_prefix</name></member>
      <member refid="classxlnt_1_1format_1afbfe884e7a1536f62911474caeb0ece2" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>quote_prefix</name></member>
      <member refid="classxlnt_1_1format_1a9e6f8cd7cb189788cebd3f3adaedf5a8" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>style</name></member>
      <member refid="classxlnt_1_1format_1acdbbe72fa3ac9998879faa3df7582aeb" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>style</name></member>
      <member refid="classxlnt_1_1format_1ac90a8e689a16882b513a23c82c2dd1de" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>style</name></member>
      <member refid="classxlnt_1_1format_1a2505bf7e0b326dc5846148367c8542c6" prot="public" virt="non-virtual"><scope>xlnt::format</scope><name>style</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
