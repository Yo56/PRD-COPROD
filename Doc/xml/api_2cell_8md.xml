<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="api_2cell_8md" kind="file" language="Markdown">
    <compoundname>cell.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```using<sp/>xlnt::cell::type<sp/>=<sp/><sp/>cell_typeundefined```</highlight></codeline>
<codeline><highlight class="normal">Alias<sp/>xlnt::cell_type<sp/>to<sp/>xlnt::cell::type<sp/>since<sp/>it<sp/>looks<sp/>nicer.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```friend<sp/>class<sp/>detail::xlsx_consumerundefined```</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```friend<sp/>class<sp/>detail::xlsx_producerundefined```</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```friend<sp/>struct<sp/>detail::cell_implundefined```</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```static<sp/>const<sp/>std::unordered_map&lt;std::string,<sp/>int&gt;&amp;<sp/>xlnt::cell::error_codes()```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>map<sp/>of<sp/>error<sp/>strings<sp/>such<sp/>as<sp/>#DIV/0!<sp/>and<sp/>their<sp/>associated<sp/>indices.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```xlnt::cell::cell(const<sp/>cell<sp/>&amp;)=default```</highlight></codeline>
<codeline><highlight class="normal">Default<sp/>copy<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::has_value()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>value<sp/>has<sp/>been<sp/>set<sp/>and<sp/>has<sp/>not<sp/>been<sp/>cleared<sp/>using<sp/>cell::clear_value().</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```T<sp/>xlnt::cell::value()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>as<sp/>an<sp/>instance<sp/>of<sp/>type<sp/>T.<sp/>Overloads<sp/>exist<sp/>for<sp/>most<sp/>C++<sp/>fundamental<sp/>types<sp/>like<sp/>bool,<sp/>int,<sp/>etc.<sp/>as<sp/>well<sp/>as<sp/>for<sp/>std::string<sp/>and<sp/>xlnt<sp/>datetime<sp/>types:<sp/>date,<sp/>time,<sp/>datetime,<sp/>and<sp/>timedelta.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::clear_value()```</highlight></codeline>
<codeline><highlight class="normal">Makes<sp/>this<sp/>cell<sp/>have<sp/>a<sp/>value<sp/>of<sp/>type<sp/>null.<sp/>All<sp/>other<sp/>cell<sp/>attributes<sp/>are<sp/>retained.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(std::nullptr_t)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>type<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>null.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(bool<sp/>boolean_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>boolean<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(int<sp/>int_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(unsigned<sp/>int<sp/>int_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(long<sp/>long<sp/>int<sp/>int_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(unsigned<sp/>long<sp/>long<sp/>int<sp/>int_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(float<sp/>float_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(double<sp/>float_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(long<sp/>double<sp/>float_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>date<sp/>&amp;date_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>time<sp/>&amp;time_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>datetime<sp/>&amp;datetime_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>timedelta<sp/>&amp;timedelta_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>std::string<sp/>&amp;string_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>char<sp/>*string_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>rich_text<sp/>&amp;text_value)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>cell<sp/>other_cell)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>value<sp/>and<sp/>formatting<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>that<sp/>of<sp/>other_cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::value(const<sp/>std::string<sp/>&amp;string_value,<sp/>bool<sp/>infer_type)```</highlight></codeline>
<codeline><highlight class="normal">Analyzes<sp/>string_value<sp/>to<sp/>determine<sp/>its<sp/>type,<sp/>convert<sp/>it<sp/>to<sp/>that<sp/>type,<sp/>and<sp/>set<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>that<sp/>converted<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```type<sp/>xlnt::cell::data_type()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>type<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::data_type(type<sp/>t)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>type<sp/>of<sp/>this<sp/>cell.<sp/>This<sp/>should<sp/>usually<sp/>be<sp/>done<sp/>indirectly<sp/>by<sp/>setting<sp/>the<sp/>value<sp/>of<sp/>the<sp/>cell<sp/>to<sp/>a<sp/>value<sp/>of<sp/>that<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::garbage_collectible()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">There&apos;s<sp/>no<sp/>reason<sp/>to<sp/>keep<sp/>a<sp/>cell<sp/>which<sp/>has<sp/>no<sp/>value<sp/>and<sp/>is<sp/>not<sp/>a<sp/>placeholder.<sp/>Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>no<sp/>value,<sp/>style,<sp/>isn&apos;t<sp/>merged,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::is_date()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>iff<sp/>this<sp/>cell&apos;s<sp/>number<sp/>format<sp/>matches<sp/>a<sp/>date<sp/>format.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```cell_reference<sp/>xlnt::cell::reference()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>cell_reference<sp/>that<sp/>points<sp/>to<sp/>the<sp/>location<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```column_t<sp/>xlnt::cell::column()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>column<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```row_t<sp/>xlnt::cell::row()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>row<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```std::pair&lt;int,<sp/>int&gt;<sp/>xlnt::cell::anchor()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>location<sp/>of<sp/>this<sp/>cell<sp/>as<sp/>an<sp/>ordered<sp/>pair<sp/>(left,<sp/>top).</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```std::string<sp/>xlnt::cell::hyperlink()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>URL<sp/>of<sp/>this<sp/>cell&apos;s<sp/>hyperlink.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::hyperlink(const<sp/>std::string<sp/>&amp;url)```</highlight></codeline>
<codeline><highlight class="normal">Adds<sp/>a<sp/>hyperlink<sp/>to<sp/>this<sp/>cell<sp/>pointing<sp/>to<sp/>the<sp/>URL<sp/>of<sp/>the<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::hyperlink(const<sp/>std::string<sp/>&amp;url,<sp/>const<sp/>std::string<sp/>&amp;display)```</highlight></codeline>
<codeline><highlight class="normal">Adds<sp/>a<sp/>hyperlink<sp/>to<sp/>this<sp/>cell<sp/>pointing<sp/>to<sp/>the<sp/>URI<sp/>of<sp/>the<sp/>given<sp/>value<sp/>and<sp/>sets<sp/>the<sp/>text<sp/>value<sp/>of<sp/>the<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::hyperlink(xlnt::cell<sp/>target)```</highlight></codeline>
<codeline><highlight class="normal">Adds<sp/>an<sp/>internal<sp/>hyperlink<sp/>to<sp/>this<sp/>cell<sp/>pointing<sp/>to<sp/>the<sp/>given<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::has_hyperlink()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>a<sp/>hyperlink<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>alignment<sp/>xlnt::cell::computed_alignment()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>alignment<sp/>that<sp/>should<sp/>be<sp/>used<sp/>when<sp/>displaying<sp/>this<sp/>cell<sp/>graphically<sp/>based<sp/>on<sp/>the<sp/>workbook<sp/>default,<sp/>the<sp/>cell-level<sp/>format,<sp/>and<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>the<sp/>cell<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>border<sp/>xlnt::cell::computed_border()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>border<sp/>that<sp/>should<sp/>be<sp/>used<sp/>when<sp/>displaying<sp/>this<sp/>cell<sp/>graphically<sp/>based<sp/>on<sp/>the<sp/>workbook<sp/>default,<sp/>the<sp/>cell-level<sp/>format,<sp/>and<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>the<sp/>cell<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>fill<sp/>xlnt::cell::computed_fill()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>fill<sp/>that<sp/>should<sp/>be<sp/>used<sp/>when<sp/>displaying<sp/>this<sp/>cell<sp/>graphically<sp/>based<sp/>on<sp/>the<sp/>workbook<sp/>default,<sp/>the<sp/>cell-level<sp/>format,<sp/>and<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>the<sp/>cell<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>font<sp/>xlnt::cell::computed_font()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>font<sp/>that<sp/>should<sp/>be<sp/>used<sp/>when<sp/>displaying<sp/>this<sp/>cell<sp/>graphically<sp/>based<sp/>on<sp/>the<sp/>workbook<sp/>default,<sp/>the<sp/>cell-level<sp/>format,<sp/>and<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>the<sp/>cell<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>number_format<sp/>xlnt::cell::computed_number_format()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>number<sp/>format<sp/>that<sp/>should<sp/>be<sp/>used<sp/>when<sp/>displaying<sp/>this<sp/>cell<sp/>graphically<sp/>based<sp/>on<sp/>the<sp/>workbook<sp/>default,<sp/>the<sp/>cell-level<sp/>format,<sp/>and<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>the<sp/>cell<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>protection<sp/>xlnt::cell::computed_protection()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>protection<sp/>that<sp/>should<sp/>be<sp/>used<sp/>when<sp/>displaying<sp/>this<sp/>cell<sp/>graphically<sp/>based<sp/>on<sp/>the<sp/>workbook<sp/>default,<sp/>the<sp/>cell-level<sp/>format,<sp/>and<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>the<sp/>cell<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::has_format()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>had<sp/>a<sp/>format<sp/>applied<sp/>to<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```const<sp/>class<sp/>format<sp/>xlnt::cell::format()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>format<sp/>applied<sp/>to<sp/>this<sp/>cell.<sp/>If<sp/>this<sp/>cell<sp/>has<sp/>no<sp/>format,<sp/>an<sp/>invalid_attribute<sp/>exception<sp/>will<sp/>be<sp/>thrown.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::format(const<sp/>class<sp/>format<sp/>new_format)```</highlight></codeline>
<codeline><highlight class="normal">Applies<sp/>the<sp/>cell-level<sp/>formatting<sp/>of<sp/>new_format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::clear_format()```</highlight></codeline>
<codeline><highlight class="normal">Removes<sp/>the<sp/>cell-level<sp/>formatting<sp/>from<sp/>this<sp/>cell.<sp/>This<sp/>doesn&apos;t<sp/>affect<sp/>the<sp/>style<sp/>that<sp/>may<sp/>also<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>cell.<sp/>Throws<sp/>an<sp/>invalid_attribute<sp/>exception<sp/>if<sp/>no<sp/>format<sp/>is<sp/>applied.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>number_format<sp/>xlnt::cell::number_format()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>number<sp/>format<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::number_format(const<sp/>class<sp/>number_format<sp/>&amp;format)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>format<sp/>in<sp/>the<sp/>workbook,<sp/>sets<sp/>its<sp/>number_format<sp/>to<sp/>the<sp/>given<sp/>format,<sp/>and<sp/>applies<sp/>the<sp/>format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>font<sp/>xlnt::cell::font()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>font<sp/>applied<sp/>to<sp/>the<sp/>text<sp/>in<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::font(const<sp/>class<sp/>font<sp/>&amp;font_)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>format<sp/>in<sp/>the<sp/>workbook,<sp/>sets<sp/>its<sp/>font<sp/>to<sp/>the<sp/>given<sp/>font,<sp/>and<sp/>applies<sp/>the<sp/>format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>fill<sp/>xlnt::cell::fill()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>fill<sp/>applied<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::fill(const<sp/>class<sp/>fill<sp/>&amp;fill_)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>format<sp/>in<sp/>the<sp/>workbook,<sp/>sets<sp/>its<sp/>fill<sp/>to<sp/>the<sp/>given<sp/>fill,<sp/>and<sp/>applies<sp/>the<sp/>format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>border<sp/>xlnt::cell::border()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>border<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::border(const<sp/>class<sp/>border<sp/>&amp;border_)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>format<sp/>in<sp/>the<sp/>workbook,<sp/>sets<sp/>its<sp/>border<sp/>to<sp/>the<sp/>given<sp/>border,<sp/>and<sp/>applies<sp/>the<sp/>format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>alignment<sp/>xlnt::cell::alignment()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>alignment<sp/>of<sp/>the<sp/>text<sp/>in<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::alignment(const<sp/>class<sp/>alignment<sp/>&amp;alignment_)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>format<sp/>in<sp/>the<sp/>workbook,<sp/>sets<sp/>its<sp/>alignment<sp/>to<sp/>the<sp/>given<sp/>alignment,<sp/>and<sp/>applies<sp/>the<sp/>format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>protection<sp/>xlnt::cell::protection()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>protection<sp/>of<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::protection(const<sp/>class<sp/>protection<sp/>&amp;protection_)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>format<sp/>in<sp/>the<sp/>workbook,<sp/>sets<sp/>its<sp/>protection<sp/>to<sp/>the<sp/>given<sp/>protection,<sp/>and<sp/>applies<sp/>the<sp/>format<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::has_style()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>had<sp/>a<sp/>style<sp/>applied<sp/>to<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>style<sp/>xlnt::cell::style()```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>wrapper<sp/>pointing<sp/>to<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```const<sp/>class<sp/>style<sp/>xlnt::cell::style()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>wrapper<sp/>pointing<sp/>to<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::style(const<sp/>class<sp/>style<sp/>&amp;new_style)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>this<sp/>cell<sp/>to<sp/>a<sp/>style<sp/>named<sp/>style_name.<sp/>Equivalent<sp/>to<sp/>style(new_style.name()).</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::style(const<sp/>std::string<sp/>&amp;style_name)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>named<sp/>style<sp/>applied<sp/>to<sp/>this<sp/>cell<sp/>to<sp/>a<sp/>style<sp/>named<sp/>style_name.<sp/>If<sp/>this<sp/>style<sp/>has<sp/>not<sp/>been<sp/>previously<sp/>created<sp/>in<sp/>the<sp/>workbook,<sp/>a<sp/>key_not_found<sp/>exception<sp/>will<sp/>be<sp/>thrown.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::clear_style()```</highlight></codeline>
<codeline><highlight class="normal">Removes<sp/>the<sp/>named<sp/>style<sp/>from<sp/>this<sp/>cell.<sp/>An<sp/>invalid_attribute<sp/>exception<sp/>will<sp/>be<sp/>thrown<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>no<sp/>style.<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cell<sp/>format<sp/>of<sp/>the<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```std::string<sp/>xlnt::cell::formula()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>formula<sp/>applied<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::formula(const<sp/>std::string<sp/>&amp;formula)```</highlight></codeline>
<codeline><highlight class="normal">Sets<sp/>the<sp/>formula<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>the<sp/>given<sp/>value.<sp/>This<sp/>formula<sp/>string<sp/>should<sp/>begin<sp/>with<sp/>&apos;=&apos;.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::clear_formula()```</highlight></codeline>
<codeline><highlight class="normal">Removes<sp/>the<sp/>formula<sp/>from<sp/>this<sp/>cell.<sp/>After<sp/>this<sp/>is<sp/>called,<sp/>has_formula()<sp/>will<sp/>return<sp/>false.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::has_formula()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>had<sp/>a<sp/>formula<sp/>applied<sp/>to<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```std::string<sp/>xlnt::cell::to_string()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>string<sp/>representing<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell.<sp/>If<sp/>the<sp/>data<sp/>type<sp/>is<sp/>not<sp/>a<sp/>string,<sp/>it<sp/>will<sp/>be<sp/>converted<sp/>according<sp/>to<sp/>the<sp/>number<sp/>format.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::is_merged()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>iff<sp/>this<sp/>cell<sp/>has<sp/>been<sp/>merged<sp/>with<sp/>one<sp/>or<sp/>more<sp/>surrounding<sp/>cells.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::merged(bool<sp/>merged)```</highlight></codeline>
<codeline><highlight class="normal">Makes<sp/>this<sp/>a<sp/>merged<sp/>cell<sp/>iff<sp/>merged<sp/>is<sp/>true.<sp/>Generally,<sp/>this<sp/>shouldn&apos;t<sp/>be<sp/>called<sp/>directly.<sp/>Instead,<sp/>use<sp/>worksheet::merge_cells<sp/>on<sp/>its<sp/>parent<sp/>worksheet.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```std::string<sp/>xlnt::cell::error()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>error<sp/>string<sp/>that<sp/>is<sp/>stored<sp/>in<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::error(const<sp/>std::string<sp/>&amp;error)```</highlight></codeline>
<codeline><highlight class="normal">Directly<sp/>assigns<sp/>the<sp/>value<sp/>of<sp/>this<sp/>cell<sp/>to<sp/>be<sp/>the<sp/>given<sp/>error.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```cell<sp/>xlnt::cell::offset(int<sp/>column,<sp/>int<sp/>row)```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>cell<sp/>from<sp/>this<sp/>cell&apos;s<sp/>parent<sp/>workbook<sp/>at<sp/>a<sp/>relative<sp/>offset<sp/>given<sp/>by<sp/>the<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>worksheet<sp/>xlnt::cell::worksheet()```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>worksheet<sp/>that<sp/>owns<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```const<sp/>class<sp/>worksheet<sp/>xlnt::cell::worksheet()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>worksheet<sp/>that<sp/>owns<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>workbook&amp;<sp/>xlnt::cell::workbook()```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>workbook<sp/>of<sp/>the<sp/>worksheet<sp/>that<sp/>owns<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```const<sp/>class<sp/>workbook&amp;<sp/>xlnt::cell::workbook()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>workbook<sp/>of<sp/>the<sp/>worksheet<sp/>that<sp/>owns<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```calendar<sp/>xlnt::cell::base_date()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>base<sp/>date<sp/>of<sp/>the<sp/>parent<sp/>workbook.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```std::string<sp/>xlnt::cell::check_string(const<sp/>std::string<sp/>&amp;to_check)```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>to_check<sp/>after<sp/>verifying<sp/>and<sp/>fixing<sp/>encoding,<sp/>size,<sp/>and<sp/>illegal<sp/>characters.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::has_comment()```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>has<sp/>a<sp/>comment<sp/>applied.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::clear_comment()```</highlight></codeline>
<codeline><highlight class="normal">Deletes<sp/>the<sp/>comment<sp/>applied<sp/>to<sp/>this<sp/>cell<sp/>if<sp/>it<sp/>exists.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```class<sp/>comment<sp/>xlnt::cell::comment()```</highlight></codeline>
<codeline><highlight class="normal">Gets<sp/>the<sp/>comment<sp/>applied<sp/>to<sp/>this<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::comment(const<sp/>std::string<sp/>&amp;text,<sp/>const<sp/>std::string<sp/>&amp;author=&quot;Microsoft<sp/>Office<sp/>User&quot;)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>comment<sp/>with<sp/>the<sp/>given<sp/>text<sp/>and<sp/>optional<sp/>author<sp/>and<sp/>applies<sp/>it<sp/>to<sp/>the<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::comment(const<sp/>std::string<sp/>&amp;comment_text,<sp/>const<sp/>class<sp/>font<sp/>&amp;comment_font,<sp/>const<sp/>std::string<sp/>&amp;author=&quot;Microsoft<sp/>Office<sp/>User&quot;)```</highlight></codeline>
<codeline><highlight class="normal">Creates<sp/>a<sp/>new<sp/>comment<sp/>with<sp/>the<sp/>given<sp/>text,<sp/>formatting,<sp/>and<sp/>optional<sp/>author<sp/>and<sp/>applies<sp/>it<sp/>to<sp/>the<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```void<sp/>xlnt::cell::comment(const<sp/>class<sp/>comment<sp/>&amp;new_comment)```</highlight></codeline>
<codeline><highlight class="normal">Apply<sp/>the<sp/>comment<sp/>provided<sp/>as<sp/>the<sp/>only<sp/>argument<sp/>to<sp/>the<sp/>cell.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```double<sp/>xlnt::cell::width()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>width<sp/>of<sp/>this<sp/>cell<sp/>in<sp/>pixels.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```double<sp/>xlnt::cell::height()<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>the<sp/>height<sp/>of<sp/>this<sp/>cell<sp/>in<sp/>pixels.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```cell&amp;<sp/>xlnt::cell::operator=(const<sp/>cell<sp/>&amp;rhs)```</highlight></codeline>
<codeline><highlight class="normal">Makes<sp/>this<sp/>cell<sp/>interally<sp/>point<sp/>to<sp/>rhs.<sp/>The<sp/>cell<sp/>data<sp/>originally<sp/>pointed<sp/>to<sp/>by<sp/>this<sp/>cell<sp/>will<sp/>be<sp/>unchanged.</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::operator==(const<sp/>cell<sp/>&amp;comparand)<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>the<sp/>same<sp/>cell<sp/>as<sp/>comparand<sp/>(compared<sp/>by<sp/>reference).</highlight></codeline>
<codeline><highlight class="normal">##<sp/>```bool<sp/>xlnt::cell::operator==(std::nullptr_t)<sp/>const```</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>true<sp/>if<sp/>this<sp/>cell<sp/>is<sp/>uninitialized.</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/docs/api/cell.md"/>
  </compounddef>
</doxygen>
