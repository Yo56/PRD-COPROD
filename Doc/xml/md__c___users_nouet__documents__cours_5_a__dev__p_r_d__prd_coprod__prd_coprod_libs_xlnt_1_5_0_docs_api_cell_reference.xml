<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference" kind="page">
    <compoundname>md_C__Users_nouet_Documents_Cours_5A_Dev_PRD_PrdCoprod_PrdCoprod_libs_xlnt_1_5_0_docs_api_cell_reference</compoundname>
    <title>cell_reference</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md119">
<title>&lt;tt&gt;static std::pair&lt;std::string, row_t&gt; xlnt::cell_reference::split_reference(const std::string &amp;reference_string)&lt;/tt&gt;</title>
<para>Splits a coordinate string like &quot;A1&quot; into an equivalent pair like {&quot;A&quot;, 1}. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md120">
<title>&lt;tt&gt;static std::pair&lt;std::string, row_t&gt; xlnt::cell_reference::split_reference(const std::string &amp;reference_string, bool &amp;absolute_column, bool &amp;absolute_row)&lt;/tt&gt;</title>
<para>Splits a coordinate string like &quot;A1&quot; into an equivalent pair like {&quot;A&quot;, 1}. Reference parameters absolute_column and absolute_row will be set to true if column part or row part are prefixed by a dollar-sign indicating they are absolute, otherwise false. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md121">
<title>&lt;tt&gt;xlnt::cell_reference::cell_reference()&lt;/tt&gt;</title>
<para>Default constructor makes a reference to the top-left-most cell, &quot;A1&quot;. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md122">
<title>&lt;tt&gt;xlnt::cell_reference::cell_reference(const char *reference_string)&lt;/tt&gt;</title>
<para>Constructs a cell_reference from a string reprenting a cell coordinate (e.g. $B14). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md123">
<title>&lt;tt&gt;xlnt::cell_reference::cell_reference(const std::string &amp;reference_string)&lt;/tt&gt;</title>
<para>Constructs a cell_reference from a string reprenting a cell coordinate (e.g. $B14). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md124">
<title>&lt;tt&gt;xlnt::cell_reference::cell_reference(column_t column, row_t row)&lt;/tt&gt;</title>
<para>Constructs a cell_reference from a 1-indexed column index and row index. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md125">
<title>&lt;tt&gt;cell_reference&amp; xlnt::cell_reference::make_absolute(bool absolute_column=true, bool absolute_row=true)&lt;/tt&gt;</title>
<para>Converts a coordinate to an absolute coordinate string (e.g. B12 -&gt; $B$12) Defaulting to true, absolute_column and absolute_row can optionally control whether the resulting cell_reference has an absolute column (e.g. B12 -&gt; $B12) and absolute row (e.g. B12 -&gt; B$12) respectively. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md126">
<title>&lt;tt&gt;bool xlnt::cell_reference::column_absolute() const&lt;/tt&gt;</title>
<para>Returns true if the reference refers to an absolute column, otherwise false. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md127">
<title>&lt;tt&gt;void xlnt::cell_reference::column_absolute(bool absolute_column)&lt;/tt&gt;</title>
<para>Makes this reference have an absolute column if absolute_column is true, otherwise not absolute. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md128">
<title>&lt;tt&gt;bool xlnt::cell_reference::row_absolute() const&lt;/tt&gt;</title>
<para>Returns true if the reference refers to an absolute row, otherwise false. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md129">
<title>&lt;tt&gt;void xlnt::cell_reference::row_absolute(bool absolute_row)&lt;/tt&gt;</title>
<para>Makes this reference have an absolute row if absolute_row is true, otherwise not absolute. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md130">
<title>&lt;tt&gt;column_t xlnt::cell_reference::column() const&lt;/tt&gt;</title>
<para>Returns a string that identifies the column of this reference (e.g. second column from left is &quot;B&quot;) </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md131">
<title>&lt;tt&gt;void xlnt::cell_reference::column(const std::string &amp;column_string)&lt;/tt&gt;</title>
<para>Sets the column of this reference from a string that identifies a particular column. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md132">
<title>&lt;tt&gt;column_t::index_t xlnt::cell_reference::column_index() const&lt;/tt&gt;</title>
<para>Returns a 1-indexed numeric index of the column of this reference. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md133">
<title>&lt;tt&gt;void xlnt::cell_reference::column_index(column_t column)&lt;/tt&gt;</title>
<para>Sets the column of this reference from a 1-indexed number that identifies a particular column. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md134">
<title>&lt;tt&gt;row_t xlnt::cell_reference::row() const&lt;/tt&gt;</title>
<para>Returns a 1-indexed numeric index of the row of this reference. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md135">
<title>&lt;tt&gt;void xlnt::cell_reference::row(row_t row)&lt;/tt&gt;</title>
<para>Sets the row of this reference from a 1-indexed number that identifies a particular row. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md136">
<title>&lt;tt&gt;cell_reference xlnt::cell_reference::make_offset(int column_offset, int row_offset) const&lt;/tt&gt;</title>
<para>Returns a cell_reference offset from this cell_reference by the number of columns and rows specified by the parameters. A negative value for column_offset or row_offset results in a reference above or left of this cell_reference, respectively. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md137">
<title>&lt;tt&gt;std::string xlnt::cell_reference::to_string() const&lt;/tt&gt;</title>
<para>Returns a string like &quot;A1&quot; for cell_reference(1, 1). </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md138">
<title>&lt;tt&gt;range_reference xlnt::cell_reference::to_range() const&lt;/tt&gt;</title>
<para>Returns a 1x1 range_reference containing only this cell_reference. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md139">
<title>&lt;tt&gt;range_reference xlnt::cell_reference::operator,(const cell_reference &amp;other) const&lt;/tt&gt;</title>
<para>I&apos;ve always wanted to overload the comma operator. cell_reference(&quot;A&quot;, 1), cell_reference(&quot;B&quot;, 1) will return range_reference(cell_reference(&quot;A&quot;, 1), cell_reference(&quot;B&quot;, 1)) </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md140">
<title>&lt;tt&gt;bool xlnt::cell_reference::operator==(const cell_reference &amp;comparand) const&lt;/tt&gt;</title>
<para>Returns true if this reference is identical to comparand including in absoluteness of column and row. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md141">
<title>&lt;tt&gt;bool xlnt::cell_reference::operator==(const std::string &amp;reference_string) const&lt;/tt&gt;</title>
<para>Constructs a cell_reference from reference_string and return the result of their comparison. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md142">
<title>&lt;tt&gt;bool xlnt::cell_reference::operator==(const char *reference_string) const&lt;/tt&gt;</title>
<para>Constructs a cell_reference from reference_string and return the result of their comparison. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md143">
<title>&lt;tt&gt;bool xlnt::cell_reference::operator!=(const cell_reference &amp;comparand) const&lt;/tt&gt;</title>
<para>Returns true if this reference is not identical to comparand including in absoluteness of column and row. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md144">
<title>&lt;tt&gt;bool xlnt::cell_reference::operator!=(const std::string &amp;reference_string) const&lt;/tt&gt;</title>
<para>Constructs a cell_reference from reference_string and return the result of their comparison. </para>
</sect1>
<sect1 id="md__c___users_nouet__documents__cours_5_a__dev__p_r_d__prd_coprod__prd_coprod_libs_xlnt_1_5_0_docs_api_cell_reference_1autotoc_md145">
<title>&lt;tt&gt;bool xlnt::cell_reference::operator!=(const char *reference_string) const&lt;/tt&gt;</title>
<para>Constructs a cell_reference from reference_string and return the result of their comparison. </para>
</sect1>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/docs/api/cell_reference.md"/>
  </compounddef>
</doxygen>
