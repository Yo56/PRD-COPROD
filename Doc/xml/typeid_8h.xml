<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="typeid_8h" kind="file" language="C++">
    <compoundname>typeid.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">cstdlib</includes>
    <includedby refid="cast_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>cstdio</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstdlib</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="16">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="15">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erase_all</definition>
        <argsstring>(std::string &amp;string, const std::string &amp;search)</argsstring>
        <name>erase_all</name>
        <param>
          <type>std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
<para>Erase all occurrences of a substring. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h" line="22" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref> void</type>
        <definition>PYBIND11_NOINLINE void clean_type_id</definition>
        <argsstring>(std::string &amp;name)</argsstring>
        <name>clean_type_id</name>
        <param>
          <type>std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h" line="30" column="31" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h" bodystart="30" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="typeid_8h_1a8e5a4f7e41d9bff89c9efdeefb4ad6a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string type_id</definition>
        <argsstring>()</argsstring>
        <name>type_id</name>
        <briefdescription>
<para>Return a string representation of a C++ type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h" line="47" column="32" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h" bodystart="47" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/typeid.h:<sp/>Compiler-independent<sp/>access<sp/>to<sp/>type<sp/>identifiers</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cxxabi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="22" refid="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" refkind="member"><highlight class="normal"><ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" kindref="member">erase_all</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;search)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;;)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find(search,<sp/>pos);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>std::string::npos)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.erase(pos,<sp/>search.length());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">clean_type_id</ref>(std::string<sp/>&amp;<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;char,<sp/>void<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&gt;<sp/>res<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abi::__cxa_demangle(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;status),<sp/>std::free<sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref><sp/>=<sp/>res.get();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" kindref="member">detail::erase_all</ref>(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" kindref="member">detail::erase_all</ref>(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" kindref="member">detail::erase_all</ref>(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;enum<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1a76e1bc9e118f26c76e2324d44183fdea" kindref="member">detail::erase_all</ref>(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;pybind11::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>type_id()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">detail::clean_type_id</ref>(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/typeid.h"/>
  </compounddef>
</doxygen>
