<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="attr_8h" kind="file" language="C++">
    <compoundname>attr.h</compoundname>
    <includes refid="cast_8h" local="yes">cast.h</includes>
    <includedby refid="class__support_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</includedby>
    <includedby refid="pybind11_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</includedby>
    <incdepgraph>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="13">
        <label>stdexcept</label>
      </node>
      <node id="24">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="19">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>unordered_set</label>
      </node>
      <node id="2">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>frameobject.h</label>
      </node>
      <node id="22">
        <label>cstdio</label>
      </node>
      <node id="21">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>tuple</label>
      </node>
      <node id="5">
        <label>Python.h</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="7">
        <label>pythread.h</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="25">
        <label>array</label>
      </node>
      <node id="3">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cstdlib</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>forward_list</label>
      </node>
      <node id="9">
        <label>cstring</label>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
      <node id="17">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="14">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpybind11_1_1is__method" prot="public">pybind11::is_method</innerclass>
    <innerclass refid="structpybind11_1_1is__operator" prot="public">pybind11::is_operator</innerclass>
    <innerclass refid="structpybind11_1_1scope" prot="public">pybind11::scope</innerclass>
    <innerclass refid="structpybind11_1_1doc" prot="public">pybind11::doc</innerclass>
    <innerclass refid="structpybind11_1_1name" prot="public">pybind11::name</innerclass>
    <innerclass refid="structpybind11_1_1sibling" prot="public">pybind11::sibling</innerclass>
    <innerclass refid="structpybind11_1_1base" prot="public">pybind11::base</innerclass>
    <innerclass refid="structpybind11_1_1keep__alive" prot="public">pybind11::keep_alive</innerclass>
    <innerclass refid="structpybind11_1_1multiple__inheritance" prot="public">pybind11::multiple_inheritance</innerclass>
    <innerclass refid="structpybind11_1_1dynamic__attr" prot="public">pybind11::dynamic_attr</innerclass>
    <innerclass refid="structpybind11_1_1buffer__protocol" prot="public">pybind11::buffer_protocol</innerclass>
    <innerclass refid="structpybind11_1_1metaclass" prot="public">pybind11::metaclass</innerclass>
    <innerclass refid="structpybind11_1_1arithmetic" prot="public">pybind11::arithmetic</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_4" prot="public">pybind11::call_guard&lt;&gt;</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_01_t_01_4" prot="public">pybind11::call_guard&lt; T &gt;</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4" prot="public">pybind11::call_guard&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4_1_1type" prot="public">pybind11::call_guard&lt; T, Ts... &gt;::type</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1argument__record" prot="public">pybind11::detail::argument_record</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1function__record" prot="public">pybind11::detail::function_record</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1type__record" prot="public">pybind11::detail::type_record</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute__default" prot="public">pybind11::detail::process_attribute_default</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01name_01_4" prot="public">pybind11::detail::process_attribute&lt; name &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01doc_01_4" prot="public">pybind11::detail::process_attribute&lt; doc &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4" prot="public">pybind11::detail::process_attribute&lt; const char * &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01char_01_5_01_4" prot="public">pybind11::detail::process_attribute&lt; char * &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01return__value__policy_01_4" prot="public">pybind11::detail::process_attribute&lt; return_value_policy &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01sibling_01_4" prot="public">pybind11::detail::process_attribute&lt; sibling &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01is__method_01_4" prot="public">pybind11::detail::process_attribute&lt; is_method &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01scope_01_4" prot="public">pybind11::detail::process_attribute&lt; scope &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01is__operator_01_4" prot="public">pybind11::detail::process_attribute&lt; is_operator &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01arg_01_4" prot="public">pybind11::detail::process_attribute&lt; arg &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01arg__v_01_4" prot="public">pybind11::detail::process_attribute&lt; arg_v &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; T, enable_if_t&lt; is_pyobject&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01base_3_01_t_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; base&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01multiple__inheritance_01_4" prot="public">pybind11::detail::process_attribute&lt; multiple_inheritance &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01dynamic__attr_01_4" prot="public">pybind11::detail::process_attribute&lt; dynamic_attr &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01buffer__protocol_01_4" prot="public">pybind11::detail::process_attribute&lt; buffer_protocol &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01metaclass_01_4" prot="public">pybind11::detail::process_attribute&lt; metaclass &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01arithmetic_01_4" prot="public">pybind11::detail::process_attribute&lt; arithmetic &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01call__guard_3_01_ts_8_8_8_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; call_guard&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4" prot="public">pybind11::detail::process_attribute&lt; keep_alive&lt; Nurse, Patient &gt; &gt;</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1process__attributes" prot="public">pybind11::detail::process_attributes</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/attr.h:<sp/>Infrastructure<sp/>for<sp/>processing<sp/>custom</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>type<sp/>and<sp/>function<sp/>attributes</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cast_8h" kindref="compound">cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespacepybind11" refkind="compound"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structpybind11_1_1is__method_1af9ee84d5434652d4f06339749f180c46" refkind="member"><highlight class="normal">struct<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref><sp/>{<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1is__method_1af9ee84d5434652d4f06339749f180c46" kindref="member">class_</ref>;<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;c)<sp/>:<sp/><ref refid="structpybind11_1_1is__method_1af9ee84d5434652d4f06339749f180c46" kindref="member">class_</ref>(c)<sp/>{<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structpybind11_1_1is__operator" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structpybind11_1_1scope_1a85fc957b06a9c214430c5ec3cdad692c" refkind="member"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref><sp/>{<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value;<sp/><ref refid="structpybind11_1_1scope_1a85fc957b06a9c214430c5ec3cdad692c" kindref="member">scope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;s)<sp/>:<sp/>value(s)<sp/>{<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structpybind11_1_1doc_1ad14d79ca595122b3072531df7d91102b" refkind="member"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1doc" kindref="compound">doc</ref><sp/>{<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;<sp/><ref refid="structpybind11_1_1doc_1ad14d79ca595122b3072531df7d91102b" kindref="member">doc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)<sp/>:<sp/>value(value)<sp/>{<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structpybind11_1_1name_1ac8c11c42d57eda243a309d010a8c596d" refkind="member"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1name" kindref="compound">name</ref><sp/>{<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;<sp/><ref refid="structpybind11_1_1name_1ac8c11c42d57eda243a309d010a8c596d" kindref="member">name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)<sp/>:<sp/>value(value)<sp/>{<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structpybind11_1_1sibling_1a032549501c18b7be26535acd0ccd54b1" refkind="member"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1sibling" kindref="compound">sibling</ref><sp/>{<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value;<sp/><ref refid="structpybind11_1_1sibling_1a032549501c18b7be26535acd0ccd54b1" kindref="member">sibling</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;value)<sp/>:<sp/>value(value.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())<sp/>{<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structpybind11_1_1base" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="structpybind11_1_1base_1a16452a2a84c500a8ef9389cee8f6bad1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;base&lt;T&gt;()<sp/>was<sp/>deprecated<sp/>in<sp/>favor<sp/>of<sp/>specifying<sp/>&apos;T&apos;<sp/>as<sp/>a<sp/>template<sp/>argument<sp/>to<sp/>class_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structpybind11_1_1keep__alive" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Patient&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1keep__alive" kindref="compound">keep_alive</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structpybind11_1_1multiple__inheritance" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1multiple__inheritance" kindref="compound">multiple_inheritance</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structpybind11_1_1dynamic__attr" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structpybind11_1_1buffer__protocol" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structpybind11_1_1metaclass" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1metaclass" kindref="compound">metaclass</ref><sp/>{</highlight></codeline>
<codeline lineno="58" refid="structpybind11_1_1metaclass_1a55284b87b0fc8dd7e7e70ccdcf18d4a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1metaclass_1a55284b87b0fc8dd7e7e70ccdcf18d4a5" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structpybind11_1_1metaclass_1a61a5f200ec20289eccdcd3b5552c4454" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae4ba3bb24593b13133ae78407f466353" kindref="member">PYBIND11_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;py::metaclass()<sp/>is<sp/>no<sp/>longer<sp/>required.<sp/>It&apos;s<sp/>turned<sp/>on<sp/>by<sp/>default<sp/>now.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1metaclass" kindref="compound">metaclass</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structpybind11_1_1metaclass_1a206aaecc0893f362557214cf93f38c64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1metaclass_1a206aaecc0893f362557214cf93f38c64" kindref="member">metaclass</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value)<sp/>:<sp/>value(value)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structpybind11_1_1arithmetic" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1arithmetic" kindref="compound">arithmetic</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structpybind11_1_1call__guard" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structpybind11_1_1call__guard_3_4_1ac6941eda08b9f6d7f634a77a7bfb7eb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>&lt;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">type</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">detail::void_type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="93" refid="structpybind11_1_1call__guard_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_default_constructible&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>guard<sp/>type<sp/>must<sp/>be<sp/>default<sp/>constructible&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="structpybind11_1_1call__guard_3_01_t_01_4_1a5a5677c99a053e47a5ff04fd2162d9c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1call__guard_3_01_t_01_4_1a5a5677c99a053e47a5ff04fd2162d9c0" kindref="member">type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="101" refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>&lt;T,<sp/>Ts...&gt;<sp/>{</highlight></codeline>
<codeline lineno="102" refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4_1_1type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>{</highlight></codeline>
<codeline lineno="103" refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4_1_1type_1a9fb5727b5db89bf35ae535eb13df497c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>guard{};<sp/></highlight><highlight class="comment">//<sp/>Compose<sp/>multiple<sp/>guard<sp/>types<sp/>with<sp/>left-to-right<sp/>default-constructor<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structpybind11_1_1call__guard_3_01_t_00_01_ts_8_8_8_01_4_1_1type_1a3775da3ceabe50eae2d5324c2b94112d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>&lt;Ts...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref><sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref>{};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="namespacepybind11_1_1detail" refkind="compound"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Forward<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111" kindref="member">op_id</ref><sp/>:<sp/>int;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53" kindref="member">op_type</ref><sp/>:<sp/>int;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1undefined__t" kindref="compound">undefined_t</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;op_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>op_type<sp/>ot,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L<sp/>=<sp/>undefined_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>undefined_t&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">op_</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">init</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">init_alias</ref>;</highlight></codeline>
<codeline lineno="118" refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structpybind11_1_1detail_1_1argument__record" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1argument__record" kindref="compound">argument_record</ref><sp/>{</highlight></codeline>
<codeline lineno="122" refid="structpybind11_1_1detail_1_1argument__record_1ab4560a6c78a0cbd90203f4b8ffdbbeb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1argument__record_1ab4560a6c78a0cbd90203f4b8ffdbbeb6" kindref="member">name</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="structpybind11_1_1detail_1_1argument__record_1a8f4aee480f4cab303738994407fb762d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1detail_1_1argument__record_1a8f4aee480f4cab303738994407fb762d" kindref="member">descr</ref>;<sp/></highlight></codeline>
<codeline lineno="124" refid="structpybind11_1_1detail_1_1argument__record_1a61740a9853e6781379d5ee39730edcc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1argument__record_1a61740a9853e6781379d5ee39730edcc9" kindref="member">value</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="structpybind11_1_1detail_1_1argument__record_1a6b6bdf9934944e6e737a02547c97e3f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1argument__record_1a6b6bdf9934944e6e737a02547c97e3f9" kindref="member">convert</ref><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="structpybind11_1_1detail_1_1argument__record_1ac8b73f5fe63a4d1bc71ecdbc2988f47b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1argument__record_1ac8b73f5fe63a4d1bc71ecdbc2988f47b" kindref="member">none</ref><sp/>:<sp/>1;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structpybind11_1_1detail_1_1argument__record_1accb429bcae6c56bf19395478f67bf029" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1argument__record_1accb429bcae6c56bf19395478f67bf029" kindref="member">argument_record</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convert,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1none" kindref="compound">none</ref>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>),<sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>(<ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>),<sp/>value(value),<sp/>convert(convert),<sp/><ref refid="classpybind11_1_1none" kindref="compound">none</ref>(<ref refid="classpybind11_1_1none" kindref="compound">none</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="structpybind11_1_1detail_1_1function__record" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>{</highlight></codeline>
<codeline lineno="134" refid="structpybind11_1_1detail_1_1function__record_1aebe142a715fe0f607b9d9d043bb98553" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1aebe142a715fe0f607b9d9d043bb98553" kindref="member">function_record</ref>()</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is_constructor(false),<sp/>is_stateless(false),<sp/><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref>(false),</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_args(false),<sp/>has_kwargs(false),<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(false)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>why<sp/>no<sp/>C++<sp/>strings?<sp/>They<sp/>generate<sp/>heavier<sp/>code..<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User-specified<sp/>documentation<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1doc" kindref="compound">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="structpybind11_1_1detail_1_1function__record_1aaa1fe3da00b2befbb4bf35d1391bcfb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*signature<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;argument_record&gt;<sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structpybind11_1_1detail_1_1function__record_1ae30b303a40c9bffa8366c7720deb08f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>(*impl)<sp/>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="structpybind11_1_1detail_1_1function__record_1ae2a82ba212358736a59296a481252ca6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data[3]<sp/>=<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="structpybind11_1_1detail_1_1function__record_1af46b038d5eeb07d018100a3768eff92d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*free_data)<sp/>(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*ptr)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="structpybind11_1_1detail_1_1function__record_1a1eebd7316737cc4fb4e4675cc37abc0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy<sp/>=<sp/>return_value_policy::automatic;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structpybind11_1_1detail_1_1function__record_1a902316a20e058d6a3751b57a6d707228" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a902316a20e058d6a3751b57a6d707228" kindref="member">is_constructor</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="structpybind11_1_1detail_1_1function__record_1a83976cb2b4de62a4af2774fad0bbc7df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a83976cb2b4de62a4af2774fad0bbc7df" kindref="member">is_stateless</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="structpybind11_1_1detail_1_1function__record_1add71067ede64387a1c7e7ca52427c9bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1add71067ede64387a1c7e7ca52427c9bc" kindref="member">is_operator</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="structpybind11_1_1detail_1_1function__record_1afd0c35491f9494315566e2486aa332d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1afd0c35491f9494315566e2486aa332d0" kindref="member">has_args</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="structpybind11_1_1detail_1_1function__record_1a88f2e51ffa99eb3e028fbda663f4d101" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a88f2e51ffa99eb3e028fbda663f4d101" kindref="member">has_kwargs</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="structpybind11_1_1detail_1_1function__record_1a3711026f03324010de2e306f5a0bafa3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutf8_1ac23066b92c5a1d9d9ef177201f750936" kindref="member">std::uint16_t</ref><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a3711026f03324010de2e306f5a0bafa3" kindref="member">nargs</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PyMethodDef<sp/>*def<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structpybind11_1_1detail_1_1function__record_1ac2389deeb7061b9f922bcccf1436d65c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*<ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="structpybind11_1_1detail_1_1type__record" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>{</highlight></codeline>
<codeline lineno="198" refid="structpybind11_1_1detail_1_1type__record_1a354346eb753a3e908c0ed7129258093f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref>()</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structpybind11_1_1multiple__inheritance" kindref="compound">multiple_inheritance</ref>(false),<sp/><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref>(false),<sp/><ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref>(false)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="structpybind11_1_1detail_1_1type__record_1a6c4503c61a07fa061449ab05cbdd0f5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1a6c4503c61a07fa061449ab05cbdd0f5c" kindref="member">scope</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="structpybind11_1_1detail_1_1type__record_1a0e71b10e072574879dccefb62eb0f64c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>RTTI<sp/>type_info<sp/>data<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="structpybind11_1_1detail_1_1type__record_1ac18e11ee7889259b66d26097845c7df0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="structpybind11_1_1detail_1_1type__record_1a45dfb538fb8a9cfc6e65be9d6c64fb49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>type_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="structpybind11_1_1detail_1_1type__record_1abeb7a353d1c5fd8310e0433bf72f62ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>holder_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structpybind11_1_1detail_1_1type__record_1a57a7e0f37a3c11d3af9687b6d7883370" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*operator_new)(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>=<sp/>::</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="structpybind11_1_1detail_1_1type__record_1a917c8082a82329411e06fe1a47437d58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*init_holder)(<ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">instance</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="structpybind11_1_1detail_1_1type__record_1a41f8e7d23a3a40b121ba2810d168032d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*dealloc)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">detail::value_and_holder</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="structpybind11_1_1detail_1_1type__record_1a961fdfc91d2234dabf4c9acf57fa1f0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1list" kindref="compound">list</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1a961fdfc91d2234dabf4c9acf57fa1f0f" kindref="member">bases</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="structpybind11_1_1detail_1_1type__record_1a82e62ebf6ec2badff17153978df3246a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1doc" kindref="compound">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="structpybind11_1_1detail_1_1type__record_1a03ae24d0710f032320ced931d4c24f36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1a03ae24d0710f032320ced931d4c24f36" kindref="member">metaclass</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="structpybind11_1_1detail_1_1type__record_1abb633b84d38f7cb2d451ad16fd517ebd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1abb633b84d38f7cb2d451ad16fd517ebd" kindref="member">multiple_inheritance</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="structpybind11_1_1detail_1_1type__record_1a08e6c124c7fe801c694043e89754ca92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1a08e6c124c7fe801c694043e89754ca92" kindref="member">dynamic_attr</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="structpybind11_1_1detail_1_1type__record_1acb78e74ccee4b381b6b47e0d6778c80d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1acb78e74ccee4b381b6b47e0d6778c80d" kindref="member">buffer_protocol</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="structpybind11_1_1detail_1_1type__record_1a83cba57945d3c34b7e6bc980b10ce5cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__record_1a83cba57945d3c34b7e6bc980b10ce5cd" kindref="member">default_holder</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="structpybind11_1_1detail_1_1type__record_1ae6a589df1f201ae2cc37bc121a59778b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_base(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>&amp;<ref refid="structpybind11_1_1base" kindref="compound">base</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*caster)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>base_info<sp/>=<sp/>detail::get_type_info(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!base_info)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tname(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>.name());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">detail::clean_type_id</ref>(tname);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;generic_type:<sp/>type<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>+</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>referenced<sp/>unknown<sp/>base<sp/>type<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>tname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_holder<sp/>!=<sp/>base_info-&gt;default_holder)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tname(<ref refid="structpybind11_1_1base" kindref="compound">base</ref>.name());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">detail::clean_type_id</ref>(tname);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;generic_type:<sp/>type<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(default_holder<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>have&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;has&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>a<sp/>non-default<sp/>holder<sp/>type<sp/>while<sp/>its<sp/>base<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>tname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(base_info-&gt;default_holder<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;does&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ae949f9bd61f21c5544cf2e268220d1e1" kindref="member">bases</ref>.append((PyObject<sp/>*)<sp/>base_info-&gt;type);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base_info-&gt;type-&gt;tp_dictoffset<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caster)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_info-&gt;implicit_casts.emplace_back(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>caster);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="structpybind11_1_1detail_1_1function__call_1a92296337bbc5b27b0edd04d4f7dbc61e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>function_call::function_call(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>&amp;f,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>p)<sp/>:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(f),<sp/>parent(p)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>.reserve(f.<ref refid="structpybind11_1_1detail_1_1function__record_1a3711026f03324010de2e306f5a0bafa3" kindref="member">nargs</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.reserve(f.<ref refid="structpybind11_1_1detail_1_1function__record_1a3711026f03324010de2e306f5a0bafa3" kindref="member">nargs</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="structpybind11_1_1detail_1_1process__attribute" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SFINAE<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="structpybind11_1_1detail_1_1process__attribute__default" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref><sp/>{</highlight></codeline>
<codeline lineno="290" refid="structpybind11_1_1detail_1_1process__attribute__default_1a29ec29aafd9201258a2797e2d6d19dcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default_1a29ec29aafd9201258a2797e2d6d19dcd" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="291" refid="structpybind11_1_1detail_1_1process__attribute__default_1a48f73dc7bad3e1e9d2295324e4b3b4ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default_1a48f73dc7bad3e1e9d2295324e4b3b4ba" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="292" refid="structpybind11_1_1detail_1_1process__attribute__default_1a60a48d8b059e0356cff5d926b56faa74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default_1a60a48d8b059e0356cff5d926b56faa74" kindref="member">precall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="293" refid="structpybind11_1_1detail_1_1process__attribute__default_1ad1bd79167931c9358badae3042781be5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default_1ad1bd79167931c9358badae3042781be5" kindref="member">postcall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="structpybind11_1_1detail_1_1process__attribute_3_01name_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1name" kindref="compound">name</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;name&gt;<sp/>{</highlight></codeline>
<codeline lineno="298" refid="structpybind11_1_1detail_1_1process__attribute_3_01name_01_4_1af79270ddc4db60f76cb4c5f7b7f34af4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01name_01_4_1af79270ddc4db60f76cb4c5f7b7f34af4" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref><sp/>&amp;n,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n.<ref refid="structpybind11_1_1name_1aa8d701302405b295c9e2e9995589c2aa" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="structpybind11_1_1detail_1_1process__attribute_3_01doc_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1doc" kindref="compound">doc</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;doc&gt;<sp/>{</highlight></codeline>
<codeline lineno="303" refid="structpybind11_1_1detail_1_1process__attribute_3_01doc_01_4_1a00f6c0adb796a60e0c4f35280367bf3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01doc_01_4_1a00f6c0adb796a60e0c4f35280367bf3c" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1doc" kindref="compound">doc</ref><sp/>&amp;n,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" kindref="member">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n.<ref refid="structpybind11_1_1doc_1a509aec2ee63db035be6e117cdad9c3b3" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;const<sp/>char<sp/>*&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default&lt;const char *&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="308" refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4_1a5c0c4edf7b537f01b9275d6944b569ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4_1a5c0c4edf7b537f01b9275d6944b569ba" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" kindref="member">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>);<sp/>}</highlight></codeline>
<codeline lineno="309" refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4_1a4c5a5089fe67d7bd583a7312299265f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4_1a4c5a5089fe67d7bd583a7312299265f7" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1a82e62ebf6ec2badff17153978df3246a" kindref="member">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>);<sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal">};</highlight></codeline>
<codeline lineno="311" refid="structpybind11_1_1detail_1_1process__attribute_3_01char_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;char<sp/>*&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01const_01char_01_5_01_4" kindref="compound">process_attribute&lt;const char *&gt;</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="structpybind11_1_1detail_1_1process__attribute_3_01return__value__policy_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;return_value_policy&gt;<sp/>{</highlight></codeline>
<codeline lineno="315" refid="structpybind11_1_1detail_1_1process__attribute_3_01return__value__policy_01_4_1a1861121c8fdb490abbd332df1f67b367" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01return__value__policy_01_4_1a1861121c8fdb490abbd332df1f67b367" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>&amp;p,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a1eebd7316737cc4fb4e4675cc37abc0b" kindref="member">policy</ref><sp/>=<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="structpybind11_1_1detail_1_1process__attribute_3_01sibling_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1sibling" kindref="compound">sibling</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;sibling&gt;<sp/>{</highlight></codeline>
<codeline lineno="320" refid="structpybind11_1_1detail_1_1process__attribute_3_01sibling_01_4_1a9f53706f415abb03c1ad12a9eedd26de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01sibling_01_4_1a9f53706f415abb03c1ad12a9eedd26de" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1sibling" kindref="compound">sibling</ref><sp/>&amp;s,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref><sp/>=<sp/>s.<ref refid="structpybind11_1_1sibling_1a410c8472c742d87c9089911eedc56c15" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal">};</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="structpybind11_1_1detail_1_1process__attribute_3_01is__method_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;is_method&gt;<sp/>{</highlight></codeline>
<codeline lineno="325" refid="structpybind11_1_1detail_1_1process__attribute_3_01is__method_01_4_1a8b3d5a044b6d3b3d45da1f82516a134d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01is__method_01_4_1a8b3d5a044b6d3b3d45da1f82516a134d" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref><sp/>&amp;s,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref><sp/>=<sp/>s.<ref refid="structpybind11_1_1is__method_1af9ee84d5434652d4f06339749f180c46" kindref="member">class_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal">};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="structpybind11_1_1detail_1_1process__attribute_3_01scope_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;scope&gt;<sp/>{</highlight></codeline>
<codeline lineno="330" refid="structpybind11_1_1detail_1_1process__attribute_3_01scope_01_4_1a2e107057b5e67f2e9137e8e3b2a5c112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01scope_01_4_1a2e107057b5e67f2e9137e8e3b2a5c112" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref><sp/>&amp;s,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref><sp/>=<sp/>s.<ref refid="structpybind11_1_1scope_1a90065485ce163e69202e4c09806a3ecc" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="structpybind11_1_1detail_1_1process__attribute_3_01is__operator_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;is_operator&gt;<sp/>{</highlight></codeline>
<codeline lineno="335" refid="structpybind11_1_1detail_1_1process__attribute_3_01is__operator_01_4_1a65a2d806c0b1223739229e93fcdbdb06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01is__operator_01_4_1a65a2d806c0b1223739229e93fcdbdb06" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1is__operator" kindref="compound">is_operator</ref><sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1add71067ede64387a1c7e7ca52427c9bc" kindref="member">is_operator</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="structpybind11_1_1detail_1_1process__attribute_3_01arg_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;arg&gt;<sp/>{</highlight></codeline>
<codeline lineno="340" refid="structpybind11_1_1detail_1_1process__attribute_3_01arg_01_4_1a7f601586f9b2249289bf1a656c5a7c03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01arg_01_4_1a7f601586f9b2249289bf1a656c5a7c03" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>&amp;a,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>&amp;&amp;<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.empty())</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.emplace_back(</highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*convert*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*none<sp/>not<sp/>allowed*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.emplace_back(a.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(),<sp/>!a.<ref refid="structpybind11_1_1arg_1a5a7c9ac34c9ef90f0c5aaa98a620d225" kindref="member">flag_noconvert</ref>,<sp/>a.<ref refid="structpybind11_1_1arg_1a4a5e70906a33c9090be550fa3ea1137c" kindref="member">flag_none</ref>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="structpybind11_1_1detail_1_1process__attribute_3_01arg__v_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;arg_v&gt;<sp/>{</highlight></codeline>
<codeline lineno="349" refid="structpybind11_1_1detail_1_1process__attribute_3_01arg__v_01_4_1a7ec09c8fa82f08f22c19566c8a1f060d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01arg__v_01_4_1a7ec09c8fa82f08f22c19566c8a1f060d" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1arg__v" kindref="compound">arg_v</ref><sp/>&amp;a,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>&amp;&amp;<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.empty())</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.emplace_back(</highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*descr*/</highlight><highlight class="normal">,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>()<sp/></highlight><highlight class="comment">/*parent*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*convert*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*none<sp/>not<sp/>allowed*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a.<ref refid="structpybind11_1_1arg__v_1ae76e3b2f96df1162af8abf34bdd3cace" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref>(</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>)<sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>+=<sp/>std::string(a.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>+=<sp/>a.<ref refid="structpybind11_1_1arg__v_1a151531f6483613dd34abbc8781fe2056" kindref="member">type</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref>)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>method<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>(std::string)<sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>(std::string)<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>method<sp/>of<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>(std::string)<sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>function<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>(std::string)<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;arg():<sp/>could<sp/>not<sp/>convert<sp/>default<sp/>argument<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">descr</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>into<sp/>a<sp/>Python<sp/>object<sp/>(type<sp/>not<sp/>registered<sp/>yet?)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;arg():<sp/>could<sp/>not<sp/>convert<sp/>default<sp/>argument<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;into<sp/>a<sp/>Python<sp/>object<sp/>(type<sp/>not<sp/>registered<sp/>yet?).<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>more<sp/>information.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.emplace_back(a.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>,<sp/>a.<ref refid="structpybind11_1_1arg__v_1ac37fe33e04c0144ca30a5ce52c7ac2d8" kindref="member">descr</ref>,<sp/>a.<ref refid="structpybind11_1_1arg__v_1ae76e3b2f96df1162af8abf34bdd3cace" kindref="member">value</ref>.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>(),<sp/>!a.<ref refid="structpybind11_1_1arg_1a5a7c9ac34c9ef90f0c5aaa98a620d225" kindref="member">flag_noconvert</ref>,<sp/>a.<ref refid="structpybind11_1_1arg_1a4a5e70906a33c9090be550fa3ea1137c" kindref="member">flag_none</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal">};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="380" refid="structpybind11_1_1detail_1_1process__attribute_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;T,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a016b3ed4ebf8cb36fcbbeed6012bc32e" kindref="member">is_pyobject</ref>&lt;T&gt;::value&gt;&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;handle&gt;<sp/>{</highlight></codeline>
<codeline lineno="381" refid="structpybind11_1_1detail_1_1process__attribute_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4_1a3b792a821112e67651abe91d789effdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01_t_00_01enable__if__t_3_01is__pyobject_3_01_t_01_4_1_1value_01_4_01_4_1a3b792a821112e67651abe91d789effdf" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;h,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1a961fdfc91d2234dabf4c9acf57fa1f0f" kindref="member">bases</ref>.append(h);<sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="386" refid="structpybind11_1_1detail_1_1process__attribute_3_01base_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1base" kindref="compound">base</ref>&lt;T&gt;&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;base&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="387" refid="structpybind11_1_1detail_1_1process__attribute_3_01base_3_01_t_01_4_01_4_1af7a79bc8441447aab395f5db646afb62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01base_3_01_t_01_4_01_4_1af7a79bc8441447aab395f5db646afb62" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1base" kindref="compound">base&lt;T&gt;</ref><sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;add_base(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal">};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="392" refid="structpybind11_1_1detail_1_1process__attribute_3_01multiple__inheritance_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1multiple__inheritance" kindref="compound">multiple_inheritance</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;multiple_inheritance&gt;<sp/>{</highlight></codeline>
<codeline lineno="393" refid="structpybind11_1_1detail_1_1process__attribute_3_01multiple__inheritance_01_4_1a2133a2e13522e69d609031468472ff5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01multiple__inheritance_01_4_1a2133a2e13522e69d609031468472ff5f" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1multiple__inheritance" kindref="compound">multiple_inheritance</ref><sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1abb633b84d38f7cb2d451ad16fd517ebd" kindref="member">multiple_inheritance</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal">};</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="397" refid="structpybind11_1_1detail_1_1process__attribute_3_01dynamic__attr_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;dynamic_attr&gt;<sp/>{</highlight></codeline>
<codeline lineno="398" refid="structpybind11_1_1detail_1_1process__attribute_3_01dynamic__attr_01_4_1a228136f93ebbcc65775467ef60a457dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01dynamic__attr_01_4_1a228136f93ebbcc65775467ef60a457dd" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1dynamic__attr" kindref="compound">dynamic_attr</ref><sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1a08e6c124c7fe801c694043e89754ca92" kindref="member">dynamic_attr</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal">};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="402" refid="structpybind11_1_1detail_1_1process__attribute_3_01buffer__protocol_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;buffer_protocol&gt;<sp/>{</highlight></codeline>
<codeline lineno="403" refid="structpybind11_1_1detail_1_1process__attribute_3_01buffer__protocol_01_4_1a291f27b8b1d39a42151b5109a63c097b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01buffer__protocol_01_4_1a291f27b8b1d39a42151b5109a63c097b" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__protocol" kindref="compound">buffer_protocol</ref><sp/>&amp;,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1acb78e74ccee4b381b6b47e0d6778c80d" kindref="member">buffer_protocol</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal">};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="407" refid="structpybind11_1_1detail_1_1process__attribute_3_01metaclass_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1metaclass" kindref="compound">metaclass</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;metaclass&gt;<sp/>{</highlight></codeline>
<codeline lineno="408" refid="structpybind11_1_1detail_1_1process__attribute_3_01metaclass_01_4_1a8f1bd8d6ef2acf40c7ab14761299b066" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01metaclass_01_4_1a8f1bd8d6ef2acf40c7ab14761299b066" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1metaclass" kindref="compound">metaclass</ref><sp/>&amp;m,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1a03ae24d0710f032320ced931d4c24f36" kindref="member">metaclass</ref><sp/>=<sp/>m.<ref refid="structpybind11_1_1metaclass_1a55284b87b0fc8dd7e7e70ccdcf18d4a5" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="414" refid="structpybind11_1_1detail_1_1process__attribute_3_01arithmetic_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1arithmetic" kindref="compound">arithmetic</ref>&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;arithmetic&gt;<sp/>{};</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="417" refid="structpybind11_1_1detail_1_1process__attribute_3_01call__guard_3_01_ts_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1call__guard" kindref="compound">call_guard</ref>&lt;Ts...&gt;&gt;<sp/>:<sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;call_guard&lt;Ts...&gt;&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Patient&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute</ref>&lt;<ref refid="structpybind11_1_1keep__alive" kindref="compound">keep_alive</ref>&lt;Nurse,<sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref>&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute__default" kindref="compound">process_attribute_default</ref>&lt;keep_alive&lt;Nurse,<sp/>Patient&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>Patient,<sp/>enable_if_t&lt;N<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>P<sp/>!=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="426" refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1a070196a560d82a5ac62ad275ca2503aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1a070196a560d82a5ac62ad275ca2503aa" kindref="member">precall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>)<sp/>{<sp/><ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(Nurse,<sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>());<sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>Patient,<sp/>enable_if_t&lt;N<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>P<sp/>!=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="428" refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1a1b73a861be60ff3f27702c49941c6a9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1a1b73a861be60ff3f27702c49941c6a9e" kindref="member">postcall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>Patient,<sp/>enable_if_t&lt;N<sp/>==<sp/>0<sp/>||<sp/>P<sp/>==<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="430" refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1afa04221c71a949e617c45c129e7dc8f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1afa04221c71a949e617c45c129e7dc8f5" kindref="member">precall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>Patient,<sp/>enable_if_t&lt;N<sp/>==<sp/>0<sp/>||<sp/>P<sp/>==<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="432" refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1ad37c5771db301ed43d1d68d8476ed0af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attribute_3_01keep__alive_3_01_nurse_00_01_patient_01_4_01_4_1ad37c5771db301ed43d1d68d8476ed0af" kindref="member">postcall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref>)<sp/>{<sp/><ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(Nurse,<sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref>);<sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal">};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="structpybind11_1_1detail_1_1process__attributes" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1process__attributes" kindref="compound">process_attributes</ref><sp/>{</highlight></codeline>
<codeline lineno="437" refid="structpybind11_1_1detail_1_1process__attributes_1ad9c20342b3aaa641ad87ce5279daedfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attributes_1ad9c20342b3aaa641ad87ce5279daedfa" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">function_record</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unused[]<sp/>=<sp/>{<sp/>0,<sp/>(<ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute&lt;typename std::decay&lt;Args&gt;::type</ref>&gt;<ref refid="structpybind11_1_1detail_1_1process__attributes_1ad9c20342b3aaa641ad87ce5279daedfa" kindref="member">::init</ref>(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>,<sp/>r),<sp/>0)<sp/>...<sp/>};</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" kindref="member">ignore_unused</ref>(unused);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441" refid="structpybind11_1_1detail_1_1process__attributes_1a1ff745074211a725781ee995d54cc5e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attributes_1a1ff745074211a725781ee995d54cc5e9" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unused[]<sp/>=<sp/>{<sp/>0,<sp/>(<ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute&lt;typename std::decay&lt;Args&gt;::type</ref>&gt;<ref refid="structpybind11_1_1detail_1_1process__attributes_1ad9c20342b3aaa641ad87ce5279daedfa" kindref="member">::init</ref>(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>,<sp/>r),<sp/>0)<sp/>...<sp/>};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" kindref="member">ignore_unused</ref>(unused);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445" refid="structpybind11_1_1detail_1_1process__attributes_1aa39dda0d8841390c853cf40b228b3fee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attributes_1aa39dda0d8841390c853cf40b228b3fee" kindref="member">precall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unused[]<sp/>=<sp/>{<sp/>0,<sp/>(<ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute&lt;typename std::decay&lt;Args&gt;::type</ref>&gt;<ref refid="structpybind11_1_1detail_1_1process__attributes_1aa39dda0d8841390c853cf40b228b3fee" kindref="member">::precall</ref>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>),<sp/>0)<sp/>...<sp/>};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" kindref="member">ignore_unused</ref>(unused);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449" refid="structpybind11_1_1detail_1_1process__attributes_1a7726f00d347777876c247553d9f13269" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1process__attributes_1a7726f00d347777876c247553d9f13269" kindref="member">postcall</ref>(<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>fn_ret)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unused[]<sp/>=<sp/>{<sp/>0,<sp/>(<ref refid="structpybind11_1_1detail_1_1process__attribute" kindref="compound">process_attribute&lt;typename std::decay&lt;Args&gt;::type</ref>&gt;<ref refid="structpybind11_1_1detail_1_1process__attributes_1a7726f00d347777876c247553d9f13269" kindref="member">::postcall</ref>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/>fn_ret),<sp/>0)<sp/>...<sp/>};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a66f5c7a354d78e7f9bc86f654face57f" kindref="member">ignore_unused</ref>(unused);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal">};</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="456" refid="namespacepybind11_1_1detail_1ace0ce3f07537063fa8d44179815827ed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_call_guard</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1is__instantiation" kindref="compound">is_instantiation&lt;call_guard, T&gt;</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="460" refid="namespacepybind11_1_1detail_1aac066cf9ada7f5415c92192856e5a2d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aac066cf9ada7f5415c92192856e5a2d5" kindref="member">extract_guard_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" kindref="member">exactly_one_t&lt;is_call_guard, call_guard&lt;&gt;</ref>,<sp/>Extra...&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>named<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" kindref="member">constexpr_sum</ref>(std::is_base_of&lt;arg,<sp/>Extra&gt;::value...),</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" kindref="member">constexpr_sum</ref>(std::is_same&lt;is_method,<sp/>Extra&gt;::value...)&gt;</highlight></codeline>
<codeline lineno="466" refid="namespacepybind11_1_1detail_1a92e34409e065a8419a307952bec673b7" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a92e34409e065a8419a307952bec673b7" kindref="member">expected_num_args</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nargs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_kwargs)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>named<sp/>==<sp/>0<sp/>||<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>+<sp/>named<sp/>+<sp/>has_args<sp/>+<sp/>has_kwargs)<sp/>==<sp/>nargs;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/attr.h"/>
  </compounddef>
</doxygen>
