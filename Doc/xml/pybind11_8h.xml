<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="pybind11_8h" kind="file" language="C++">
    <compoundname>pybind11.h</compoundname>
    <includes refid="attr_8h" local="yes">attr.h</includes>
    <includes refid="options_8h" local="yes">options.h</includes>
    <includes refid="class__support_8h" local="yes">class_support.h</includes>
    <includedby refid="python__streambuf_8hpp" local="no">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</includedby>
    <includedby refid="xlntpyarrow_8lib_8cpp" local="no">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</includedby>
    <includedby refid="chrono_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</includedby>
    <includedby refid="complex_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</includedby>
    <includedby refid="embed_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</includedby>
    <includedby refid="eval_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</includedby>
    <includedby refid="functional_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</includedby>
    <includedby refid="numpy_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</includedby>
    <includedby refid="operators_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</includedby>
    <includedby refid="stl_8h" local="yes">C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="25">
        <label>descr.h</label>
        <link refid="descr_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="20">
        <label>buffer_info.h</label>
        <link refid="buffer__info_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>unordered_set</label>
      </node>
      <node id="3">
        <label>cast.h</label>
        <link refid="cast_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>class_support.h</label>
        <link refid="class__support_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>frameobject.h</label>
      </node>
      <node id="23">
        <label>cstdio</label>
      </node>
      <node id="22">
        <label>typeid.h</label>
        <link refid="typeid_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>Python.h</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="8">
        <label>pythread.h</label>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="26">
        <label>array</label>
      </node>
      <node id="4">
        <label>pytypes.h</label>
        <link refid="pytypes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>cstddef</label>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
      <node id="2">
        <label>attr.h</label>
        <link refid="attr_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>forward_list</label>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
      <node id="17">
        <label>memory</label>
      </node>
      <node id="18">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/embed.h</label>
        <link refid="embed_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h</label>
        <link refid="pybind11_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/numpy.h</label>
        <link refid="numpy_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/python_streambuf.hpp</label>
        <link refid="python__streambuf_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/functional.h</label>
        <link refid="functional_8h"/>
      </node>
      <node id="12">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/stl_bind.h</label>
        <link refid="stl__bind_8h"/>
      </node>
      <node id="3">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/python/xlntpyarrow.lib.cpp</label>
        <link refid="xlntpyarrow_8lib_8cpp"/>
      </node>
      <node id="4">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/chrono.h</label>
        <link refid="chrono_8h"/>
      </node>
      <node id="11">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/eigen.h</label>
        <link refid="eigen_8h"/>
      </node>
      <node id="5">
        <label>C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpybind11_1_1cpp__function" prot="public">pybind11::cpp_function</innerclass>
    <innerclass refid="classpybind11_1_1module" prot="public">pybind11::module</innerclass>
    <innerclass refid="classpybind11_1_1detail_1_1generic__type" prot="public">pybind11::detail::generic_type</innerclass>
    <innerclass refid="classpybind11_1_1class__" prot="public">pybind11::class_</innerclass>
    <innerclass refid="structpybind11_1_1class___1_1is__valid__class__option" prot="private">pybind11::class_::is_valid_class_option</innerclass>
    <innerclass refid="classpybind11_1_1enum__" prot="public">pybind11::enum_</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1init" prot="public">pybind11::detail::init</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1init__alias" prot="public">pybind11::detail::init_alias</innerclass>
    <innerclass refid="structpybind11_1_1detail_1_1iterator__state" prot="public">pybind11::detail::iterator_state</innerclass>
    <innerclass refid="classpybind11_1_1exception" prot="public">pybind11::exception</innerclass>
    <innerclass refid="classpybind11_1_1gil__scoped__acquire" prot="public">pybind11::gil_scoped_acquire</innerclass>
    <innerclass refid="classpybind11_1_1gil__scoped__release" prot="public">pybind11::gil_scoped_release</innerclass>
    <innernamespace refid="namespacepybind11">pybind11</innernamespace>
    <innernamespace refid="namespacepybind11_1_1detail">pybind11::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="pybind11_8h_1ad225e789a43a99757532d624f794b377" prot="public" static="no">
        <name>PYBIND11_OVERLOAD_INT</name>
        <param><defname>ret_type</defname></param>
        <param><defname>cname</defname></param>
        <param><defname>name</defname></param>
        <param><defname>...</defname></param>
        <initializer>        { \
        <ref refid="classpybind11_1_1gil__scoped__acquire" kindref="compound">pybind11::gil_scoped_acquire</ref> gil; \
        <ref refid="classpybind11_1_1function" kindref="compound">pybind11::function</ref> overload = <ref refid="namespacepybind11_1a1bf1986e4cc6b7770ee71b3ce88a1a7c" kindref="member">pybind11::get_overload</ref>(static_cast&lt;const cname *&gt;(this), name); \
        if (overload) { \
            auto o = overload(__VA_ARGS__); \
            if (<ref refid="namespacepybind11_1_1detail_1af1a2ec7f187b7bf36daf370a3803fbee" kindref="member">pybind11::detail::cast_is_temporary_value_reference</ref>&lt;ret_type&gt;::value) { \
                static <ref refid="namespacepybind11_1_1detail_1a98f587c0f16ab94b18720beb604fd6b6" kindref="member">pybind11::detail::overload_caster_t</ref>&lt;ret_type&gt; caster; \
                return <ref refid="namespacepybind11_1_1detail_1aa407aa03488007376e81a80c2cadf6df" kindref="member">pybind11::detail::cast_ref</ref>&lt;ret_type&gt;(std::move(o), caster); \
            } \
            else return <ref refid="namespacepybind11_1_1detail_1aec69451b22f293ed13534636a28c60e4" kindref="member">pybind11::detail::cast_safe</ref>&lt;ret_type&gt;(std::move(o)); \
        } \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1817" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pybind11_8h_1a6a5ebc119f4e7ca7ccb05d9d1f64d547" prot="public" static="no">
        <name>PYBIND11_OVERLOAD_NAME</name>
        <param><defname>ret_type</defname></param>
        <param><defname>cname</defname></param>
        <param><defname>name</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="pybind11_8h_1ad225e789a43a99757532d624f794b377" kindref="member">PYBIND11_OVERLOAD_INT</ref>(ret_type, cname, name, __VA_ARGS__) \
    return cname::fn(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1830" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pybind11_8h_1a52b952e976930f2149eec9d0eb450100" prot="public" static="no">
        <name>PYBIND11_OVERLOAD_PURE_NAME</name>
        <param><defname>ret_type</defname></param>
        <param><defname>cname</defname></param>
        <param><defname>name</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="pybind11_8h_1ad225e789a43a99757532d624f794b377" kindref="member">PYBIND11_OVERLOAD_INT</ref>(ret_type, cname, name, __VA_ARGS__) \
    pybind11::pybind11_fail(&quot;Tried to call pure virtual function \&quot;&quot; #cname &quot;::&quot; name &quot;\&quot;&quot;);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1834" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pybind11_8h_1a554e6c4e025a0a1a1d8b30998144e386" prot="public" static="no">
        <name>PYBIND11_OVERLOAD</name>
        <param><defname>ret_type</defname></param>
        <param><defname>cname</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="pybind11_8h_1a6a5ebc119f4e7ca7ccb05d9d1f64d547" kindref="member">PYBIND11_OVERLOAD_NAME</ref>(ret_type, cname, #fn, fn, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1838" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pybind11_8h_1acf72084f40e31c334fd2d2b0161e959b" prot="public" static="no">
        <name>PYBIND11_OVERLOAD_PURE</name>
        <param><defname>ret_type</defname></param>
        <param><defname>cname</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="pybind11_8h_1a52b952e976930f2149eec9d0eb450100" kindref="member">PYBIND11_OVERLOAD_PURE_NAME</ref>(ret_type, cname, #fn, fn, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" line="1841" column="9" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h" bodystart="1841" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>pybind11/pybind11.h:<sp/>Main<sp/>header<sp/>file<sp/>of<sp/>the<sp/>C++11<sp/>python</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>binding<sp/>generator<sp/>library</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Wenzel<sp/>Jakob<sp/>&lt;wenzel.jakob@epfl.ch&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4100)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4100:<sp/>Unreferenced<sp/>formal<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4127)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4127:<sp/>Conditional<sp/>expression<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4512)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4512:<sp/>Assignment<sp/>operator<sp/>was<sp/>implicitly<sp/>defined<sp/>as<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4800)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4800:<sp/>&apos;int&apos;:<sp/>forcing<sp/>value<sp/>to<sp/>bool<sp/>&apos;true&apos;<sp/>or<sp/>&apos;false&apos;<sp/>(performance<sp/>warning)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4996)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4996:<sp/>The<sp/>POSIX<sp/>name<sp/>for<sp/>this<sp/>item<sp/>is<sp/>deprecated.<sp/>Instead,<sp/>use<sp/>the<sp/>ISO<sp/>C<sp/>and<sp/>C++<sp/>conformant<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4702)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4702:<sp/>unreachable<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>4522)<sp/></highlight><highlight class="comment">//<sp/>warning<sp/>C4522:<sp/>multiple<sp/>assignment<sp/>operators<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>68)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>integer<sp/>conversion<sp/>resulted<sp/>in<sp/>a<sp/>change<sp/>of<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>186)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointless<sp/>comparison<sp/>of<sp/>unsigned<sp/>integer<sp/>with<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>878)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>exception<sp/>specifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>1334)<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&quot;template&quot;<sp/>keyword<sp/>used<sp/>for<sp/>syntactic<sp/>disambiguation<sp/>may<sp/>only<sp/>be<sp/>used<sp/>within<sp/>a<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>1682)<sp/><sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>conversion<sp/>of<sp/>a<sp/>64-bit<sp/>integral<sp/>type<sp/>to<sp/>a<sp/>smaller<sp/>integral<sp/>type<sp/>(potential<sp/>portability<sp/>problem)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>1875)<sp/><sp/></highlight><highlight class="comment">//<sp/>offsetof<sp/>applied<sp/>to<sp/>non-POD<sp/>(Plain<sp/>Old<sp/>Data)<sp/>types<sp/>is<sp/>nonstandard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable:<sp/>2196)<sp/><sp/></highlight><highlight class="comment">//<sp/>warning<sp/>#2196:<sp/>routine<sp/>is<sp/>both<sp/>&quot;inline&quot;<sp/>and<sp/>&quot;noinline&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-but-set-parameter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-but-set-variable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wmissing-field-initializers&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wattributes&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__GNUC__<sp/>&gt;=<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wnoexcept-type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="attr_8h" kindref="compound">attr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="options_8h" kindref="compound">options.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__support_8h" kindref="compound">class_support.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">cpp_function<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>function<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="classpybind11_1_1cpp__function_1a132747c2ceb48f66e31a2a0a8cdbcd04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function_1a132747c2ceb48f66e31a2a0a8cdbcd04" kindref="member">cpp_function</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="56" refid="classpybind11_1_1cpp__function_1a6876ca7fb5a6747ae0828d6c0335e487" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function_1a6876ca7fb5a6747ae0828d6c0335e487" kindref="member">cpp_function</ref>(Return<sp/>(*f)(Args...),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize(f,<sp/>f,<sp/>extra...);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">detail::satisfies_none_of</ref>&lt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">detail::remove_reference_t&lt;Func&gt;</ref>,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_function,<sp/>std::is_pointer,<sp/>std::is_member_pointer</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::value&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="67" refid="classpybind11_1_1cpp__function_1acfe302e5e16cb06b35def528437ee8d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function_1acfe302e5e16cb06b35def528437ee8d4" kindref="member">cpp_function</ref>(Func<sp/>&amp;&amp;f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FuncType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1remove__class" kindref="compound">detail::remove_class</ref>&lt;decltype(&amp;<ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">detail::remove_reference_t&lt;Func&gt;::operator</ref>())&gt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize(std::forward&lt;Func&gt;(f),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FuncType<sp/>*)<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Arg,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="75" refid="classpybind11_1_1cpp__function_1afbea329616cf693374fc35be7e79fbf3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function_1afbea329616cf693374fc35be7e79fbf3" kindref="member">cpp_function</ref>(Return<sp/>(Class::*f)(Arg...),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize([f](Class<sp/>*c,<sp/>Arg...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>-&gt;<sp/>Return<sp/>{<sp/>return<sp/>(c-&gt;*f)(args...);<sp/>},</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Return<sp/>(*)<sp/>(Class<sp/>*,<sp/>Arg...))<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Arg,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="82" refid="classpybind11_1_1cpp__function_1ae1f23749635c15b72ce0d5c5ae264481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function_1ae1f23749635c15b72ce0d5c5ae264481" kindref="member">cpp_function</ref>(Return<sp/>(Class::*f)(Arg...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize([f](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class<sp/>*c,<sp/>Arg...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>-&gt;<sp/>Return<sp/>{<sp/>return<sp/>(c-&gt;*f)(args...);<sp/>},</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Return<sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Class<sp/>*,<sp/>Arg<sp/>...))<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classpybind11_1_1cpp__function_1a58dd2ab6841454f51331f2cc5c6dc235" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function_1a58dd2ab6841454f51331f2cc5c6dc235" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attr(</highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92" refid="classpybind11_1_1cpp__function_1ac0311553831b32c5b398c9bd106c793b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*make_function_record()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="98" refid="classpybind11_1_1cpp__function_1ac0e6b6560c065900ca0412037a9fab0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function_1ac0e6b6560c065900ca0412037a9fab0e" kindref="member">initialize</ref>(Func<sp/>&amp;&amp;f,<sp/>Return<sp/>(*)(Args...),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">capture<sp/>{<sp/><ref refid="namespacepybind11_1_1detail_1a6c207068b00c8f12378fe4e8f02eaa73" kindref="member">detail::remove_reference_t&lt;Func&gt;</ref><sp/>f;<sp/>};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>function<sp/>including<sp/>any<sp/>extra<sp/>state<sp/>it<sp/>might<sp/>have<sp/>(e.g.<sp/>a<sp/>lambda<sp/>capture<sp/>object)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rec<sp/>=<sp/>make_function_record();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>capture<sp/>object<sp/>directly<sp/>in<sp/>the<sp/>function<sp/>record<sp/>if<sp/>there<sp/>is<sp/>enough<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(capture)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rec-&gt;data))<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Without<sp/>these<sp/>pragmas,<sp/>GCC<sp/>warns<sp/>that<sp/>there<sp/>might<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enough<sp/>space<sp/>to<sp/>use<sp/>the<sp/>placement<sp/>new<sp/>operator.<sp/>However,<sp/>the</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;if&apos;<sp/>statement<sp/>above<sp/>ensures<sp/>that<sp/>this<sp/>is<sp/>the<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__clang__)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;=<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wplacement-new&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>((capture<sp/>*)<sp/>&amp;rec-&gt;data)<sp/>capture<sp/>{<sp/>std::forward&lt;Func&gt;(f)<sp/>};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__clang__)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;=<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::is_trivially_destructible&lt;Func&gt;::value)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;free_data<sp/>=<sp/>[](<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*r)<sp/>{<sp/>((capture<sp/>*)<sp/>&amp;r-&gt;data)-&gt;~capture();<sp/>};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;data[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>capture<sp/>{<sp/>std::forward&lt;Func&gt;(f)<sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;free_data<sp/>=<sp/>[](<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*r)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>((capture<sp/>*)<sp/>r-&gt;data[0]);<sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Type<sp/>casters<sp/>for<sp/>the<sp/>function<sp/>arguments<sp/>and<sp/>return<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cast_in<sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1argument__loader" kindref="compound">detail::argument_loader</ref>&lt;Args...&gt;;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cast_out<sp/>=<sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster</ref>&lt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aef2d4be22c22106ff1a07aeb9394fb60" kindref="member">detail::conditional_t&lt;std::is_void&lt;Return&gt;::value</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1void__type" kindref="compound">detail::void_type</ref>,<sp/>Return&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(detail::expected_num_args&lt;Extra...&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args),<sp/>cast_in::has_args,<sp/>cast_in::has_kwargs),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>argument<sp/>annotations<sp/>does<sp/>not<sp/>match<sp/>the<sp/>number<sp/>of<sp/>function<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dispatch<sp/>code<sp/>which<sp/>converts<sp/>function<sp/>arguments<sp/>and<sp/>performs<sp/>the<sp/>actual<sp/>function<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;impl<sp/>=<sp/>[](<ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">detail::function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>)<sp/>-&gt;<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast_in<sp/>args_converter;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>cast<sp/>the<sp/>function<sp/>arguments<sp/>into<sp/>the<sp/>C++<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!args_converter.load_args(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invoke<sp/>call<sp/>policy<sp/>pre-call<sp/>hook<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1process__attributes" kindref="compound">detail::process_attributes&lt;Extra...&gt;::precall</ref>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>capture<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(capture)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" kindref="member">func</ref>.<ref refid="structpybind11_1_1detail_1_1function__record_1ae2a82ba212358736a59296a481252ca6" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" kindref="member">func</ref>.<ref refid="structpybind11_1_1detail_1_1function__record_1ae2a82ba212358736a59296a481252ca6" kindref="member">data</ref><sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" kindref="member">func</ref>.<ref refid="structpybind11_1_1detail_1_1function__record_1ae2a82ba212358736a59296a481252ca6" kindref="member">data</ref>[0]);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capture<sp/>*cap<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">capture<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">capture<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Override<sp/>policy<sp/>for<sp/>rvalues<sp/>--<sp/>usually<sp/>to<sp/>enforce<sp/>rvp::move<sp/>on<sp/>an<sp/>rvalue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>policy<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1return__value__policy__override" kindref="compound">detail::return_value_policy_override&lt;Return&gt;::policy</ref>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" kindref="member">func</ref>.<ref refid="structpybind11_1_1detail_1_1function__record_1a1eebd7316737cc4fb4e4675cc37abc0b" kindref="member">policy</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Function<sp/>scope<sp/>guard<sp/>--<sp/>defaults<sp/>to<sp/>the<sp/>compile-to-nothing<sp/>`void_type`<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Guard<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aac066cf9ada7f5415c92192856e5a2d5" kindref="member">detail::extract_guard_t</ref>&lt;Extra...&gt;;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Perform<sp/>the<sp/>function<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>result<sp/>=<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast_out::cast</ref>(</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(args_converter).</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>call&lt;Return,<sp/>Guard&gt;(cap-&gt;f),<sp/>policy,<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a19b239cc74c20f535acd986c1e9336ff" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invoke<sp/>call<sp/>policy<sp/>post-call<sp/>hook<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1process__attributes" kindref="compound">detail::process_attributes&lt;Extra...&gt;::postcall</ref>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/>result);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>any<sp/>user-provided<sp/>function<sp/>attributes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">detail::process_attributes&lt;Extra...&gt;::init</ref>(extra...,<sp/>rec);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>a<sp/>readable<sp/>signature<sp/>describing<sp/>the<sp/>function&apos;s<sp/>arguments<sp/>and<sp/>return<sp/>value<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1descr" kindref="compound">detail::descr</ref>;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">detail::_</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="descr_8h_1ae155873780600c0149950602b31084a9" kindref="member">PYBIND11_DESCR</ref><sp/>signature<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>cast_in::arg_names()<sp/>+<sp/><ref refid="namespacepybind11_1_1detail_1afc58f2d75e8ea0b596c2b6e8041ab09c" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;)<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">cast_out::name</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Register<sp/>the<sp/>function<sp/>with<sp/>Python<sp/>from<sp/>generic<sp/>(non-templated)<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize_generic(rec,<sp/>signature.text(),<sp/>signature.types(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast_in::has_args)<sp/>rec-&gt;has_args<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast_in::has_kwargs)<sp/>rec-&gt;has_kwargs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stash<sp/>some<sp/>additional<sp/>information<sp/>used<sp/>by<sp/>an<sp/>important<sp/>optimization<sp/>in<sp/>&apos;functional.h&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FunctionType<sp/>=<sp/>Return<sp/>(*)(Args...);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_function_ptr<sp/>=</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;Func,<sp/>FunctionType&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(capture)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_function_ptr)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;is_stateless<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;data[1]<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(FunctionType)));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classpybind11_1_1cpp__function_1af14b1ca8e2485667b160a54c910e120f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function_1af14b1ca8e2485667b160a54c910e120f" kindref="member">initialize_generic</ref>(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*rec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*types,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>copies<sp/>of<sp/>all<sp/>referenced<sp/>C-style<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>=<sp/>strdup(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>?<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" kindref="member">doc</ref>)<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" kindref="member">doc</ref><sp/>=<sp/>strdup(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" kindref="member">doc</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a:<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.name)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.name<sp/>=<sp/>strdup(a.name);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.descr)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.descr<sp/>=<sp/>strdup(a.descr);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.value)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.descr<sp/>=<sp/>strdup(a.value.attr(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">)().cast&lt;std::string&gt;().c_str());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>a<sp/>proper<sp/>function<sp/>signature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>signature;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>type_depth<sp/>=<sp/>0,<sp/>char_index<sp/>=<sp/>0,<sp/>type_index<sp/>=<sp/>0,<sp/>arg_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>text[char_index++];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>arg<sp/>name<sp/>for<sp/>everything<sp/>except<sp/>*args,<sp/>**kwargs<sp/>and<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_depth<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>text[char_index]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>arg_index<sp/>&lt;<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.empty()<sp/>&amp;&amp;<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>[arg_index].name)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>[arg_index].name;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_index<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;arg&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(arg_index<sp/>-<sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>?<sp/>1<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++type_depth;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--type_depth;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_depth<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_index<sp/>&lt;<sp/>rec-&gt;<ref refid="classpybind11_1_1args" kindref="compound">args</ref>.size()<sp/>&amp;&amp;<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>[arg_index].descr)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>[arg_index].descr;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_index++;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info<sp/>*t<sp/>=<sp/>types[type_index++];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!t)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error<sp/>while<sp/>parsing<sp/>type<sp/>signature<sp/>(1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo<sp/>=<sp/>detail::get_type_info(*t))<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>((PyObject<sp/>*)<sp/>tinfo-&gt;type)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.attr(</highlight><highlight class="stringliteral">&quot;__module__&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.cast&lt;std::string&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/>tinfo-&gt;type-&gt;tp_name;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tname(t-&gt;name());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="typeid_8h_1aab52845991c2e3ddb370e7723a6b0a75" kindref="member">detail::clean_type_id</ref>(tname);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/>tname;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_depth<sp/>!=<sp/>0<sp/>||<sp/>types[type_index]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error<sp/>while<sp/>parsing<sp/>type<sp/>signature<sp/>(2)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(PYBIND11_CONSTEXPR_DESCR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>types;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>text;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;__next__&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>=<sp/>strdup(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;__bool__&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref><sp/>=<sp/>strdup(</highlight><highlight class="stringliteral">&quot;__nonzero__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1aaa1fe3da00b2befbb4bf35d1391bcfb2" kindref="member">signature</ref><sp/>=<sp/>strdup(signature.c_str());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>.shrink_to_fit();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a902316a20e058d6a3751b57a6d707228" kindref="member">is_constructor</ref><sp/>=<sp/>!strcmp(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;__setstate__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3711026f03324010de2e306f5a0bafa3" kindref="member">nargs</ref><sp/>=<sp/>(<ref refid="namespaceutf8_1ac23066b92c5a1d9d9ef177201f750936" kindref="member">std::uint16_t</ref>)<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref><sp/>&amp;&amp;<sp/><ref refid="common_8h_1ac2aa5f531d7405461119b256eaf0141a" kindref="member">PYBIND11_INSTANCE_METHOD_CHECK</ref>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref><sp/>=<sp/><ref refid="common_8h_1a8d797ff274d1aab907997d9be7e944c1" kindref="member">PYBIND11_INSTANCE_METHOD_GET_FUNCTION</ref>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*chain<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>*chain_start<sp/>=<sp/>rec;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyCFunction_Check(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rec_capsule<sp/>=<sp/>reinterpret_borrow&lt;capsule&gt;(PyCFunction_GET_SELF(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/>(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*)<sp/>rec_capsule;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Never<sp/>append<sp/>a<sp/>method<sp/>to<sp/>an<sp/>overload<sp/>chain<sp/>of<sp/>a<sp/>parent<sp/>class;</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instead,<sp/>hide<sp/>the<sp/>parent&apos;s<sp/>overloads<sp/>in<sp/>this<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!chain-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a5107835e7630a10868373383c003100b" kindref="member">is</ref>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>))</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>trigger<sp/>for<sp/>things<sp/>like<sp/>the<sp/>default<sp/>__init__,<sp/>which<sp/>are<sp/>wrapper_descriptors<sp/>that<sp/>we<sp/>are<sp/>intentionally<sp/>replacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>()<sp/>&amp;&amp;<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>overload<sp/>existing<sp/>non-function<sp/>object<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>)<sp/>+</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>with<sp/>a<sp/>function<sp/>of<sp/>the<sp/>same<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!chain)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>existing<sp/>overload<sp/>was<sp/>found,<sp/>create<sp/>a<sp/>new<sp/>function<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PyMethodDef();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memset(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PyMethodDef));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>-&gt;ml_name<sp/>=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>-&gt;ml_meth<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">PyCFunction</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*dispatcher);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>-&gt;ml_flags<sp/>=<sp/>METH_VARARGS<sp/>|<sp/>METH_KEYWORDS;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1capsule" kindref="compound">capsule</ref><sp/>rec_capsule(rec,<sp/>[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destruct((<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*)<sp/>ptr);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>scope_module;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" kindref="member">hasattr</ref>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>,<sp/></highlight><highlight class="stringliteral">&quot;__module__&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope_module<sp/>=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;__module__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" kindref="member">hasattr</ref>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>,<sp/></highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope_module<sp/>=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyCFunction_NewEx(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>,<sp/>rec_capsule.ptr(),<sp/>scope_module.ptr());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;cpp_function::cpp_function():<sp/>Could<sp/>not<sp/>allocate<sp/>function<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Append<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>overload<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a78716efc5aea71e9c12c8aacd03e788f" kindref="member">sibling</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_ref();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain_start<sp/>=<sp/>chain;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chain-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>!=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref>)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;overloading<sp/>a<sp/>method<sp/>with<sp/>both<sp/>static<sp/>and<sp/>instance<sp/>methods<sp/>is<sp/>not<sp/>supported;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(NDEBUG)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;compile<sp/>in<sp/>debug<sp/>mode<sp/>for<sp/>more<sp/>details&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>while<sp/>attempting<sp/>to<sp/>bind<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;instance&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>method<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(<ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">)))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>)<sp/>+<sp/>signature</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(chain-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ac2389deeb7061b9f922bcccf1436d65c" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/>chain-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ac2389deeb7061b9f922bcccf1436d65c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ac2389deeb7061b9f922bcccf1436d65c" kindref="member">next</ref><sp/>=<sp/>rec;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>signatures;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>nice<sp/>pydoc<sp/>rec<sp/>including<sp/>all<sp/>signatures<sp/>and</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>docstrings<sp/>of<sp/>the<sp/>functions<sp/>in<sp/>the<sp/>overload<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chain<sp/>&amp;&amp;<sp/>options::show_function_signatures())<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>a<sp/>generic<sp/>signature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;(*args,<sp/>**kwargs)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Overloaded<sp/>function.\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>specific<sp/>overload<sp/>signatures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_user_def<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>chain_start;<sp/>it<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>it<sp/>=<sp/>it-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options::show_function_signatures())<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>0)<sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chain)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(++index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/>it-&gt;signature;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;doc<sp/>&amp;&amp;<sp/>strlen(it-&gt;doc)<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>options::show_user_defined_docstrings())<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>appending<sp/>another<sp/>docstring,<sp/>and<sp/>aren&apos;t<sp/>printing<sp/>function<sp/>signatures,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>append<sp/>a<sp/>newline<sp/>first:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!options::show_function_signatures())<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_user_def)<sp/>first_user_def<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options::show_function_signatures())<sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signatures<sp/>+=<sp/>it-&gt;doc;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options::show_function_signatures())<sp/>signatures<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Install<sp/>docstring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyCFunctionObject<sp/>*func<sp/>=<sp/>(PyCFunctionObject<sp/>*)<sp/>m_ptr;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;m_ml-&gt;ml_doc)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(func-&gt;m_ml-&gt;ml_doc));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;m_ml-&gt;ml_doc<sp/>=<sp/>strdup(signatures.c_str());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a660316dea064e5ebb60602330c199f1d" kindref="member">is_method</ref>)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/><ref refid="common_8h_1a05eadd9c179a396aaf7924f04d694f11" kindref="member">PYBIND11_INSTANCE_METHOD_NEW</ref>(m_ptr,<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a519099348f8dd2fc7607e6ba3b1a295a" kindref="member">scope</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptr)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;cpp_function::cpp_function():<sp/>Could<sp/>not<sp/>allocate<sp/>instance<sp/>method<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(func);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classpybind11_1_1cpp__function_1aa3131b605539b3ba16529f85b6204e1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function_1aa3131b605539b3ba16529f85b6204e1a" kindref="member">destruct</ref>(<ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*rec)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rec)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1function__record" kindref="compound">detail::function_record</ref><sp/>*<ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref><sp/>=<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ac2389deeb7061b9f922bcccf1436d65c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1af46b038d5eeb07d018100a3768eff92d" kindref="member">free_data</ref>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1af46b038d5eeb07d018100a3768eff92d" kindref="member">free_data</ref>(rec);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ae046d832009087ff3c32c80eaf420ee3" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1ad7c22dbd6ae5aeab7daa0a0fed039e27" kindref="member">doc</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1aaa1fe3da00b2befbb4bf35d1391bcfb2" kindref="member">signature</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>:<sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a29bd23b885c7cc3caa965c2d285a8623" kindref="member">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.descr));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.value.dec_ref();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>-&gt;ml_doc));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>rec-&gt;<ref refid="structpybind11_1_1detail_1_1function__record_1a3b1ea13465575aee19c2852fc0ba43c4" kindref="member">def</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>rec;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec<sp/>=<sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classpybind11_1_1cpp__function_1a8395a7e859aab590c33653e2817d0f56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*<ref refid="classpybind11_1_1cpp__function_1a8395a7e859aab590c33653e2817d0f56" kindref="member">dispatcher</ref>(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args_in,<sp/>PyObject<sp/>*kwargs_in)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterator<sp/>over<sp/>the<sp/>list<sp/>of<sp/>potentially<sp/>admissible<sp/>overloads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_record<sp/>*overloads<sp/>=<sp/>(function_record<sp/>*)<sp/>PyCapsule_GetPointer(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>overloads;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>to<sp/>know<sp/>how<sp/>many<sp/>arguments<sp/>+<sp/>keyword<sp/>arguments<sp/>there<sp/>are<sp/>to<sp/>pick<sp/>the<sp/>right<sp/>overload<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_args_in<sp/>=<sp/>(<ref refid="namespacepybind11_1a74292751b6fc8fe14d7c6772ae2fd0fc" kindref="member">size_t</ref>)<sp/>PyTuple_GET_SIZE(args_in);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>parent<sp/>=<sp/>n_args_in<sp/>&gt;<sp/>0<sp/>?<sp/>PyTuple_GET_ITEM(args_in,<sp/>0)<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>this<sp/>in<sp/>two<sp/>passes:<sp/>in<sp/>the<sp/>first<sp/>pass,<sp/>we<sp/>load<sp/>arguments<sp/>with<sp/>`convert=false`;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>second,<sp/>we<sp/>allow<sp/>conversion<sp/>(except<sp/>for<sp/>arguments<sp/>with<sp/>an<sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>py::arg().noconvert()).<sp/><sp/>This<sp/>lets<sp/>us<sp/>prefer<sp/>calls<sp/>without<sp/>conversion,<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>as<sp/>a<sp/>fallback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;function_call&gt;<sp/>second_pass;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>if<sp/>there<sp/>are<sp/>no<sp/>overloads,<sp/>we<sp/>can<sp/>just<sp/>skip<sp/>the<sp/>no-convert<sp/>pass<sp/>entirely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overloaded<sp/>=<sp/>it<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>it-&gt;next<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>it<sp/>=<sp/>it-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>overload:</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Copy<sp/>all<sp/>positional<sp/>arguments<sp/>we<sp/>were<sp/>given,<sp/>also<sp/>checking<sp/>to<sp/>make<sp/>sure<sp/>that</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>positional<sp/>arguments<sp/>weren&apos;t<sp/>*also*<sp/>specified<sp/>via<sp/>kwarg.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>If<sp/>we<sp/>weren&apos;t<sp/>given<sp/>enough,<sp/>try<sp/>to<sp/>make<sp/>up<sp/>the<sp/>omitted<sp/>ones<sp/>by<sp/>checking</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whether<sp/>they<sp/>were<sp/>provided<sp/>by<sp/>a<sp/>kwarg<sp/>matching<sp/>the<sp/>`py::arg(&quot;name&quot;)`<sp/>name.<sp/><sp/>If</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so,<sp/>use<sp/>it<sp/>(and<sp/>remove<sp/>it<sp/>from<sp/>kwargs;<sp/>if<sp/>not,<sp/>see<sp/>if<sp/>the<sp/>function<sp/>binding</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provided<sp/>a<sp/>default<sp/>that<sp/>we<sp/>can<sp/>use.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Ensure<sp/>that<sp/>either<sp/>all<sp/>keyword<sp/>arguments<sp/>were<sp/>&quot;consumed&quot;,<sp/>or<sp/>that<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>takes<sp/>a<sp/>kwargs<sp/>argument<sp/>to<sp/>accept<sp/>unconsumed<sp/>kwargs.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>Any<sp/>positional<sp/>arguments<sp/>still<sp/>left<sp/>get<sp/>put<sp/>into<sp/>a<sp/>tuple<sp/>(for<sp/>args),<sp/>and<sp/>any</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftover<sp/>kwargs<sp/>get<sp/>put<sp/>into<sp/>a<sp/>dict.</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>Pack<sp/>everything<sp/>into<sp/>a<sp/>vector;<sp/>if<sp/>we<sp/>have<sp/>py::args<sp/>or<sp/>py::kwargs,<sp/>they<sp/>are<sp/>an</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>tuple<sp/>or<sp/>dict<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>positional<sp/>arguments.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.<sp/>Call<sp/>the<sp/>function<sp/>call<sp/>dispatcher<sp/>(function_record::impl)</highlight></codeline>
<codeline lineno="451"><highlight class="comment"></highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>one<sp/>of<sp/>these<sp/>fail,<sp/>move<sp/>on<sp/>to<sp/>the<sp/>next<sp/>overload<sp/>and<sp/>keep<sp/>trying<sp/>until<sp/>we<sp/>get<sp/>a</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>other<sp/>than<sp/>PYBIND11_TRY_NEXT_OVERLOAD.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_record<sp/>&amp;func<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos_args<sp/>=<sp/>func.nargs;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>positional<sp/>arguments<sp/>that<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func.has_args)<sp/>--pos_args;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(but<sp/>don&apos;t<sp/>count<sp/>py::args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func.has_kwargs)<sp/>--pos_args;<sp/></highlight><highlight class="comment">//<sp/><sp/>or<sp/>py::kwargs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func.has_args<sp/>&amp;&amp;<sp/>n_args_in<sp/>&gt;<sp/>pos_args)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Too<sp/>many<sp/>arguments<sp/>for<sp/>this<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_args_in<sp/>&lt;<sp/>pos_args<sp/>&amp;&amp;<sp/>func.args.size()<sp/>&lt;<sp/>pos_args)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>enough<sp/>arguments<sp/>given,<sp/>and<sp/>not<sp/>enough<sp/>defaults<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>blanks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_call<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>(func,<sp/>parent);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>args_to_copy<sp/>=<sp/><ref refid="namespacexlnt_1_1detail_1ab4626c34c3d8bbd270e96c4b8700ad4e" kindref="member">std::min</ref>(pos_args,<sp/>n_args_in);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>args_copied<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>Copy<sp/>any<sp/>position<sp/>arguments<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bad_arg<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>args_copied<sp/>&lt;<sp/>args_to_copy;<sp/>++args_copied)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument_record<sp/>*arg_rec<sp/>=<sp/>args_copied<sp/>&lt;<sp/>func.args.size()<sp/>?<sp/>&amp;func.args[args_copied]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwargs_in<sp/>&amp;&amp;<sp/>arg_rec<sp/>&amp;&amp;<sp/>arg_rec-&gt;name<sp/>&amp;&amp;<sp/>PyDict_GetItemString(kwargs_in,<sp/>arg_rec-&gt;name))<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bad_arg<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>(PyTuple_GET_ITEM(args_in,<sp/>args_copied));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_rec<sp/>&amp;&amp;<sp/>!arg_rec-&gt;none<sp/>&amp;&amp;<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.is_none())<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bad_arg<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.push_back(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.push_back(arg_rec<sp/>?<sp/>arg_rec-&gt;convert<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bad_arg)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>it<sp/>was<sp/>meant<sp/>for<sp/>another<sp/>overload<sp/>(issue<sp/>#688)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>need<sp/>to<sp/>copy<sp/>this<sp/>if<sp/>we<sp/>steal<sp/>some<sp/>kwargs<sp/>for<sp/>defaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref><sp/>=<sp/>reinterpret_borrow&lt;dict&gt;(kwargs_in);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Check<sp/>kwargs<sp/>and,<sp/>failing<sp/>that,<sp/>defaults<sp/>that<sp/>may<sp/>help<sp/>complete<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_copied<sp/>&lt;<sp/>pos_args)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copied_kwargs<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>args_copied<sp/>&lt;<sp/>pos_args;<sp/>++args_copied)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref><sp/>=<sp/>func.args[args_copied];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>value;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwargs_in<sp/>&amp;&amp;<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>PyDict_GetItemString(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Consume<sp/>a<sp/>kwargs<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!copied_kwargs)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref><sp/>=<sp/>reinterpret_steal&lt;dict&gt;(PyDict_Copy(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copied_kwargs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyDict_DelItemString(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.<ref refid="structpybind11_1_1arg_1a3bad744daa662c35b22165819337787b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.value)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.value;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.push_back(value);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.push_back(<ref refid="structpybind11_1_1arg" kindref="compound">arg</ref>.convert);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_copied<sp/>&lt;<sp/>pos_args)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>enough<sp/>arguments,<sp/>defaults,<sp/>or<sp/>kwargs<sp/>to<sp/>fill<sp/>the<sp/>positional<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>Check<sp/>everything<sp/>was<sp/>consumed<sp/>(unless<sp/>we<sp/>have<sp/>a<sp/>kwargs<sp/>arg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref><sp/>&amp;&amp;<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1dict_1a6bef407c81ee369871ddf236a6eb1968" kindref="member">size</ref>()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!func.has_kwargs)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Unconsumed<sp/>kwargs,<sp/>but<sp/>no<sp/>py::kwargs<sp/>argument<sp/>to<sp/>accept<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4a.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>py::args<sp/>argument,<sp/>create<sp/>a<sp/>new<sp/>tuple<sp/>with<sp/>leftovers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>extra_args;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func.has_args)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_to_copy<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>didn&apos;t<sp/>copy<sp/>out<sp/>any<sp/>position<sp/>arguments<sp/>from<sp/>the<sp/>args_in<sp/>tuple,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>reuse<sp/>it<sp/>directly<sp/>without<sp/>copying:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_args<sp/>=<sp/>reinterpret_borrow&lt;tuple&gt;(args_in);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_copied<sp/>&gt;=<sp/>n_args_in)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_args<sp/>=<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>(0);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>args_size<sp/>=<sp/>n_args_in<sp/>-<sp/>args_copied;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_args<sp/>=<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>(args_size);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>args_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>item<sp/>=<sp/>PyTuple_GET_ITEM(args_in,<sp/>args_copied<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_args[i]<sp/>=<sp/>item.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>().<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.push_back(extra_args);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.push_back(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4b.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>py::kwargs,<sp/>pass<sp/>on<sp/>any<sp/>remaining<sp/>kwargs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func.has_kwargs)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>())</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref><sp/>=<sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref>();<sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>didn&apos;t<sp/>get<sp/>one,<sp/>send<sp/>an<sp/>empty<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.push_back(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.push_back(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5.<sp/>Put<sp/>everything<sp/>in<sp/>a<sp/>vector.<sp/><sp/>Not<sp/>technically<sp/>step<sp/>5,<sp/>we&apos;ve<sp/>been<sp/>building<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>`call.args`<sp/>all<sp/>along.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.size()<sp/>!=<sp/>func.nargs<sp/>||<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.size()<sp/>!=<sp/>func.nargs)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>function<sp/>call<sp/>dispatcher<sp/>inserted<sp/>wrong<sp/>number<sp/>of<sp/>arguments!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>second_pass_convert;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloaded)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>in<sp/>the<sp/>first<sp/>no-convert<sp/>pass,<sp/>so<sp/>swap<sp/>out<sp/>the<sp/>conversion<sp/>flags<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>of<sp/>all-false<sp/>flags.<sp/><sp/>If<sp/>the<sp/>call<sp/>fails,<sp/>we&apos;ll<sp/>swap<sp/>the<sp/>flags<sp/>back<sp/>in<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>conversion-allowed<sp/>call<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_pass_convert.resize(func.nargs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.swap(second_pass_convert);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6.<sp/>Call<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loader_life_support<sp/>guard{};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>func.impl(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1reference__cast__error" kindref="compound">reference_cast_error</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.ptr()<sp/>!=<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloaded)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>(overloaded)<sp/>call<sp/>failed;<sp/>if<sp/>the<sp/>call<sp/>has<sp/>at<sp/>least<sp/>one<sp/>argument<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>permits<sp/>conversion<sp/>(i.e.<sp/>it<sp/>hasn&apos;t<sp/>been<sp/>explicitly<sp/>specified<sp/>`.noconvert()`)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>add<sp/>this<sp/>call<sp/>to<sp/>the<sp/>list<sp/>of<sp/>second<sp/>pass<sp/>overloads<sp/>to<sp/>try.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>func.is_method<sp/>?<sp/>1<sp/>:<sp/>0;<sp/>i<sp/>&lt;<sp/>pos_args;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(second_pass_convert[i])<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>one:<sp/>swap<sp/>the<sp/>converting<sp/>flags<sp/>back<sp/>in<sp/>and<sp/>store<sp/>the<sp/>call<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>second<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a7e5e8d35a6be477bd4af5f297726337a" kindref="member">args_convert</ref>.swap(second_pass_convert);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second_pass.push_back(std::move(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloaded<sp/>&amp;&amp;<sp/>!second_pass.empty()<sp/>&amp;&amp;<sp/>result.ptr()<sp/>==<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>no-conversion<sp/>pass<sp/>finished<sp/>without<sp/>success,<sp/>try<sp/>again<sp/>with<sp/>conversion<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref><sp/>:<sp/>second_pass)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loader_life_support<sp/>guard{};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1ac763d51e5169627a9881667184e5d6e2" kindref="member">func</ref>.<ref refid="structpybind11_1_1detail_1_1function__record_1ae30b303a40c9bffa8366c7720deb08f6" kindref="member">impl</ref>(<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1reference__cast__error" kindref="compound">reference_cast_error</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.ptr()<sp/>!=<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref><sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.<ref refid="classpybind11_1_1error__already__set_1aeb06507f47f77f7b3a196620ecf5b6fa" kindref="member">restore</ref>();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>an<sp/>exception<sp/>is<sp/>caught,<sp/>give<sp/>each<sp/>registered<sp/>exception</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>translator<sp/>a<sp/>chance<sp/>to<sp/>translate<sp/>it<sp/>to<sp/>a<sp/>Python<sp/>exception</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>reverse<sp/>order<sp/>of<sp/>registration.</highlight></codeline>
<codeline lineno="626"><highlight class="comment"></highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>translator<sp/>may<sp/>choose<sp/>to<sp/>do<sp/>one<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="628"><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>catch<sp/>the<sp/>exception<sp/>and<sp/>call<sp/>PyErr_SetString<sp/>or<sp/>PyErr_SetObject</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>set<sp/>a<sp/>standard<sp/>(or<sp/>custom)<sp/>Python<sp/>exception,<sp/>or</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>do<sp/>nothing<sp/>and<sp/>let<sp/>the<sp/>exception<sp/>fall<sp/>through<sp/>to<sp/>the<sp/>next<sp/>translator,<sp/>or</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>delegate<sp/>translation<sp/>to<sp/>the<sp/>next<sp/>translator<sp/>by<sp/>throwing<sp/>a<sp/>new<sp/>type<sp/>of<sp/>exception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last_exception<sp/>=<sp/>std::current_exception();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;registered_exception_translators<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1a3d4d8868728159a959ad949e276df796" kindref="member">registered_exception_translators</ref>;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>translator<sp/>:<sp/>registered_exception_translators)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>translator(last_exception);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_exception<sp/>=<sp/>std::current_exception();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_SystemError,<sp/></highlight><highlight class="stringliteral">&quot;Exception<sp/>escaped<sp/>from<sp/>default<sp/>exception<sp/>translator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.ptr()<sp/>==<sp/><ref refid="common_8h_1a9ef9b3cf8c17303988038a07390b6f8d" kindref="member">PYBIND11_TRY_NEXT_OVERLOAD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloads-&gt;is_operator)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(Py_NotImplemented).inc_ref().ptr();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/>std::string(overloads-&gt;name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;():<sp/>incompatible<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(overloads-&gt;is_constructor<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;constructor&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>arguments.<sp/>The<sp/>following<sp/>argument<sp/>types<sp/>are<sp/>supported:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(function_record<sp/>*it2<sp/>=<sp/>overloads;<sp/>it2<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>it2<sp/>=<sp/>it2-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">+<sp/><ref refid="namespacexlnt_1_1detail_1a4a5416332c649035ad6503ea07a7d67f" kindref="member">std::to_string</ref>(++ctr)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wrote_sig<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloads-&gt;is_constructor)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>constructor,<sp/>rewrite<sp/>`(self:<sp/>Object,<sp/>arg0,<sp/>...)<sp/>-&gt;<sp/>NoneType`<sp/>as<sp/>`Object(arg0,<sp/>...)`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sig<sp/>=<sp/>it2-&gt;signature;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref><sp/>=<sp/>sig.find(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>+<sp/>7;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&quot;(self:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref><sp/>&lt;<sp/>sig.size())<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>at<sp/>the<sp/>,<sp/>for<sp/>the<sp/>next<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>=<sp/>sig.find(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref><sp/>=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref><sp/>=<sp/>sig.rfind(</highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>the<sp/>),<sp/>if<sp/>there<sp/>is<sp/>no<sp/>comma:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>&gt;=<sp/>sig.size())<sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref><sp/>=<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>=<sp/>sig.find(</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref><sp/>&lt;<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>&amp;&amp;<sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref><sp/>&lt;<sp/>sig.size())<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.append(sig,<sp/><ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref>,<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">end</ref><sp/>-<sp/><ref refid="border_8hpp_1a550769bbd4e7537ff90a656f5b0c23b2" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.append(sig,<sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref><sp/>-<sp/><ref refid="namespaceutf8_1afc093dfde66a6f52cb4a5caefe0e580d" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrote_sig<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wrote_sig)<sp/>msg<sp/>+=<sp/>it2-&gt;signature;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\nInvoked<sp/>with:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args_<sp/>=<sp/>reinterpret_borrow&lt;tuple&gt;(args_in);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>some_args<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ti<sp/>=<sp/>overloads-&gt;is_constructor<sp/>?<sp/>1<sp/>:<sp/>0;<sp/>ti<sp/>&lt;<sp/>args_.size();<sp/>++ti)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!some_args)<sp/>some_args<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/><ref refid="group__python__builtins_1gad03802ec7d35cdd35a26c59cd53db480" kindref="member">pybind11::repr</ref>(args_[ti]);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwargs_in)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref><sp/>=<sp/>reinterpret_borrow&lt;dict&gt;(kwargs_in);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1dict_1a6bef407c81ee369871ddf236a6eb1968" kindref="member">size</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(some_args)<sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;kwargs:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kwarg<sp/>:<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref>)<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(</highlight><highlight class="stringliteral">&quot;{}={!r}&quot;</highlight><highlight class="normal">).<ref refid="classpybind11_1_1str_1a834ff688cd92945ddeb47409f145f1c6" kindref="member">format</ref>(kwarg.first,<sp/>kwarg.second);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>convert<sp/>function<sp/>return<sp/>value<sp/>to<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Python<sp/>type!<sp/>The<sp/>signature<sp/>was\n\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>it-&gt;signature;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloads-&gt;is_constructor)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo<sp/>=<sp/>get_type_info((PyTypeObject<sp/>*)<sp/>overloads-&gt;scope.ptr());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;init_holder(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">instance<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parent.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.ptr();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal">};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="classpybind11_1_1module" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1module" kindref="compound">module</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="727" refid="classpybind11_1_1module_1a60edf3891caf157b176edba7d1fa0b46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1module" kindref="compound">module</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyModule_Check)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1module" kindref="compound">module</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1doc" kindref="compound">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!options::show_user_defined_docstrings())<sp/><ref refid="structpybind11_1_1doc" kindref="compound">doc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModuleDef<sp/>*def<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PyModuleDef();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memset(def,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PyModuleDef));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;m_name<sp/>=<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;m_doc<sp/>=<sp/><ref refid="structpybind11_1_1doc" kindref="compound">doc</ref>;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;m_size<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(def);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyModule_Create(def);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>Py_InitModule3(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="structpybind11_1_1doc" kindref="compound">doc</ref>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error<sp/>in<sp/>module::module()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_ref();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1module" kindref="compound">module</ref><sp/>&amp;def(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_,<sp/>Func<sp/>&amp;&amp;f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>func(std::forward&lt;Func&gt;(f),<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>(name_),<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1sibling" kindref="compound">sibling</ref>(<ref refid="group__python__builtins_1ga0854324102907dc2d82ac413b6e6b66e" kindref="member">getattr</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>name_,<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>())),<sp/>extra...);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>allow<sp/>overwriting<sp/>here<sp/>because<sp/>cpp_function<sp/>sets<sp/>up<sp/>a<sp/>chain<sp/>with<sp/>the<sp/>intention<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overwriting<sp/>(and<sp/>has<sp/>already<sp/>checked<sp/>internally<sp/>that<sp/>it<sp/>isn&apos;t<sp/>overwriting<sp/>non-functions).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_object(name_,<sp/>func,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>overwrite<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>module<sp/>def_submodule(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*doc<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>full_name<sp/>=<sp/>std::string(PyModule_GetName(m_ptr))</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::string(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>std::string(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>reinterpret_borrow&lt;module&gt;(PyImport_AddModule(full_name.c_str()));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc<sp/>&amp;&amp;<sp/>options::show_user_defined_docstrings())</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.attr(</highlight><highlight class="stringliteral">&quot;__doc__&quot;</highlight><highlight class="normal">)<sp/>=<sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(doc);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*obj<sp/>=<sp/>PyImport_ImportModule(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>error_already_set();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_steal&lt;module&gt;(obj);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>an<sp/>object<sp/>to<sp/>the<sp/>module<sp/>using<sp/>the<sp/>given<sp/>name.<sp/><sp/>Throws<sp/>if<sp/>an<sp/>object<sp/>with<sp/>the<sp/>given<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overwrite<sp/>should<sp/>almost<sp/>always<sp/>be<sp/>false:<sp/>attempting<sp/>to<sp/>overwrite<sp/>objects<sp/>that<sp/>pybind11<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>established<sp/>will,<sp/>in<sp/>most<sp/>cases,<sp/>break<sp/>things.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_object(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overwrite<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!overwrite<sp/>&amp;&amp;<sp/><ref refid="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" kindref="member">hasattr</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>))</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Error<sp/>during<sp/>initialization:<sp/>multiple<sp/>incompatible<sp/>definitions<sp/>with<sp/>name<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_AddObject(ptr(),<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,<sp/>obj.inc_ref().ptr()<sp/></highlight><highlight class="comment">/*<sp/>steals<sp/>a<sp/>reference<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal">};</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="group__python__builtins_1gaf4397f2663d6784bd53630fc5a23c02a" kindref="member">globals</ref>()<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*p<sp/>=<sp/>PyEval_GetGlobals();</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_borrow&lt;dict&gt;(p<sp/>?<sp/>p<sp/>:<sp/>module::import(</highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">).attr(</highlight><highlight class="stringliteral">&quot;__dict__&quot;</highlight><highlight class="normal">).ptr());</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="815" refid="classpybind11_1_1detail_1_1generic__type" refkind="compound"><highlight class="normal">class<sp/><ref refid="classpybind11_1_1detail_1_1generic__type" kindref="compound">generic_type</ref><sp/>:<sp/>public<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="816" refid="classpybind11_1_1detail_1_1generic__type_1a978adea7a2c683287b544ebc130469fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1detail_1_1generic__type_1a978adea7a2c683287b544ebc130469fb" kindref="member">class_</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="818" refid="classpybind11_1_1detail_1_1generic__type_1a05a26a26b3a2eca9f2b89dad25bb99cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1a358db65eea2be228232617d1353daff7" kindref="member">PYBIND11_OBJECT_DEFAULT</ref>(<ref refid="classpybind11_1_1detail_1_1generic__type" kindref="compound">generic_type</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>PyType_Check)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>&amp;rec)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a6c4503c61a07fa061449ab05cbdd0f5c" kindref="member">scope</ref><sp/>&amp;&amp;<sp/><ref refid="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" kindref="member">hasattr</ref>(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a6c4503c61a07fa061449ab05cbdd0f5c" kindref="member">scope</ref>,<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a0e71b10e072574879dccefb62eb0f64c" kindref="member">name</ref>))</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;generic_type:<sp/>cannot<sp/>initialize<sp/>type<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a0e71b10e072574879dccefb62eb0f64c" kindref="member">name</ref>)<sp/>+</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>an<sp/>object<sp/>with<sp/>that<sp/>name<sp/>is<sp/>already<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_type_info(*rec.<ref refid="structpybind11_1_1detail_1_1type__record_1ac18e11ee7889259b66d26097845c7df0" kindref="member">type</ref>))</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;generic_type:<sp/>type<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a0e71b10e072574879dccefb62eb0f64c" kindref="member">name</ref>)<sp/>+</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>is<sp/>already<sp/>registered!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a0fe1a62ca38562fd83993b3abf9c49fd" kindref="member">make_new_python_type</ref>(rec);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Register<sp/>supplemental<sp/>type<sp/>information<sp/>in<sp/>C++<sp/>dict<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*tinfo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref>();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;type<sp/>=<sp/>(PyTypeObject<sp/>*)<sp/>m_ptr;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;cpptype<sp/>=<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1ac18e11ee7889259b66d26097845c7df0" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;type_size<sp/>=<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a45dfb538fb8a9cfc6e65be9d6c64fb49" kindref="member">type_size</ref>;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;operator_new<sp/>=<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a57a7e0f37a3c11d3af9687b6d7883370" kindref="member">operator_new</ref>;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;holder_size_in_ptrs<sp/>=<sp/>size_in_ptrs(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1abeb7a353d1c5fd8310e0433bf72f62ad" kindref="member">holder_size</ref>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;init_holder<sp/>=<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a917c8082a82329411e06fe1a47437d58" kindref="member">init_holder</ref>;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;dealloc<sp/>=<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a41f8e7d23a3a40b121ba2810d168032d" kindref="member">dealloc</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;simple_type<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;simple_ancestors<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tindex<sp/>=<sp/>std::type_index(*rec.<ref refid="structpybind11_1_1detail_1_1type__record_1ac18e11ee7889259b66d26097845c7df0" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;direct_conversions<sp/>=<sp/>&amp;<ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1aff8f17a57c8c8bc398a7bc14e0c1199d" kindref="member">direct_conversions</ref>[tindex];</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;default_holder<sp/>=<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a83cba57945d3c34b7e6bc980b10ce5cd" kindref="member">default_holder</ref>;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>[tindex]<sp/>=<sp/>tinfo;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1internals" kindref="compound">internals</ref>.<ref refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" kindref="member">registered_types_py</ref>[(PyTypeObject<sp/>*)<sp/>m_ptr]<sp/>=<sp/>{<sp/>tinfo<sp/>};</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a961fdfc91d2234dabf4c9acf57fa1f0f" kindref="member">bases</ref>.size()<sp/>&gt;<sp/>1<sp/>||<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1abb633b84d38f7cb2d451ad16fd517ebd" kindref="member">multiple_inheritance</ref>)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_parents_nonsimple(tinfo-&gt;type);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;simple_ancestors<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a961fdfc91d2234dabf4c9acf57fa1f0f" kindref="member">bases</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent_tinfo<sp/>=<sp/>get_type_info((PyTypeObject<sp/>*)<sp/>rec.<ref refid="structpybind11_1_1detail_1_1type__record_1a961fdfc91d2234dabf4c9acf57fa1f0f" kindref="member">bases</ref>[0].<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;simple_ancestors<sp/>=<sp/>parent_tinfo-&gt;simple_ancestors;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mark_parents_nonsimple(PyTypeObject<sp/>*value)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>reinterpret_borrow&lt;tuple&gt;(value-&gt;tp_bases);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>h<sp/>:<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo2<sp/>=<sp/>get_type_info((PyTypeObject<sp/>*)<sp/>h.ptr());</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tinfo2)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo2-&gt;simple_type<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_parents_nonsimple((PyTypeObject<sp/>*)<sp/>h.ptr());</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>install_buffer_funcs(</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_info<sp/>*(*get_buffer)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*get_buffer_data)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyHeapTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>=<sp/>(PyHeapTypeObject*)<sp/>m_ptr;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo<sp/>=<sp/>detail::get_type_info(&amp;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>-&gt;ht_type);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>-&gt;ht_type.tp_as_buffer)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;To<sp/>be<sp/>able<sp/>to<sp/>register<sp/>buffer<sp/>protocol<sp/>support<sp/>for<sp/>the<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(tinfo-&gt;type-&gt;tp_name)<sp/>+</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>the<sp/>associated<sp/>class&lt;&gt;(..)<sp/>invocation<sp/>must<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;include<sp/>the<sp/>pybind11::buffer_protocol()<sp/>annotation!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;get_buffer<sp/>=<sp/>get_buffer;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;get_buffer_data<sp/>=<sp/>get_buffer_data;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>def_property_static_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>fget,<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>fset,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::function_record<sp/>*rec_fget)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_static<sp/>=<sp/>!(rec_fget-&gt;is_method<sp/>&amp;&amp;<sp/>rec_fget-&gt;scope);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_doc<sp/>=<sp/>rec_fget-&gt;doc<sp/>&amp;&amp;<sp/><ref refid="classpybind11_1_1options_1a2b4787acba371eb678d2dfeccf78e27e" kindref="member">pybind11::options::show_user_defined_docstrings</ref>();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>((PyObject<sp/>*)<sp/>(is_static<sp/>?<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().static_property_type</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&amp;PyProperty_Type));</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr(<ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>)<sp/>=<sp/>property(fget.ptr()<sp/>?<sp/>fget<sp/>:<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>(),</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fset.ptr()<sp/>?<sp/>fset<sp/>:<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>(),</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*deleter*/</highlight><highlight class="normal"><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>(),</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(has_doc<sp/>?<sp/>rec_fget-&gt;doc<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal">};</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>void_t&lt;decltype(static_cast&lt;void<sp/>*(*)(size_t)&gt;(T::operator<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">))&gt;&gt;</highlight></codeline>
<codeline lineno="905" refid="namespacepybind11_1_1detail_1aac9fbec63a815cf6e602a9c235ca7533" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aad403360b3f798558436b37ea0272492" kindref="member">set_operator_new</ref>(<ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">type_record</ref><sp/>*r)<sp/>{<sp/>r-&gt;<ref refid="structpybind11_1_1detail_1_1type__record_1a57a7e0f37a3c11d3af9687b6d7883370" kindref="member">operator_new</ref><sp/>=<sp/>&amp;T::operator<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907" refid="namespacepybind11_1_1detail_1aad403360b3f798558436b37ea0272492" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aad403360b3f798558436b37ea0272492" kindref="member">set_operator_new</ref>(...)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>void_t&lt;decltype(static_cast&lt;void<sp/>(*)(void<sp/>*)&gt;(T::operator<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">))&gt;&gt;</highlight></codeline>
<codeline lineno="911" refid="namespacepybind11_1_1detail_1a91db04ebc823ea863b5df88f78f5c6b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a6e62cf4913ded37524e9fca5be2af2db" kindref="member">call_operator_delete</ref>(T<sp/>*p)<sp/>{<sp/>T::operator<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(p);<sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913" refid="namespacepybind11_1_1detail_1a6e62cf4913ded37524e9fca5be2af2db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a6e62cf4913ded37524e9fca5be2af2db" kindref="member">call_operator_delete</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)<sp/>{<sp/>::operator<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(p);<sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*Derived*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="920" refid="namespacepybind11_1a80923cbfeaa7668191f479b40a94957e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1aeb36fd4bbf6d949769e083dc9bdf7426" kindref="member">method_adaptor</ref>(F<sp/>&amp;&amp;f)<sp/>-&gt;<sp/>decltype(std::forward&lt;F&gt;(f))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;F&gt;(f);<sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="923" refid="namespacepybind11_1aeb36fd4bbf6d949769e083dc9bdf7426" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1aeb36fd4bbf6d949769e083dc9bdf7426" kindref="member">method_adaptor</ref>(Return<sp/>(Class::*pmf)(Args...))<sp/>-&gt;<sp/>Return<sp/>(Derived::*)(Args...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmf;<sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1aeb36fd4bbf6d949769e083dc9bdf7426" kindref="member">method_adaptor</ref>(Return<sp/>(Class::*pmf)(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">)<sp/>-&gt;<sp/>Return<sp/>(Derived::*)(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmf;<sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>options&gt;</highlight></codeline>
<codeline lineno="929" refid="classpybind11_1_1class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1detail_1_1generic__type" kindref="compound">detail::generic_type</ref><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1is__holder__type" kindref="compound">is_holder</ref><sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1is__holder__type" kindref="compound">detail::is_holder_type&lt;type_, T&gt;</ref>;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_subtype<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a5a4e15f62190f6790515a3c95146740d" kindref="member">detail::is_strict_base_of&lt;type_, T&gt;</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_base<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a5a4e15f62190f6790515a3c95146740d" kindref="member">detail::is_strict_base_of&lt;T, type_&gt;</ref>;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>instead<sp/>of<sp/>using<sp/>here<sp/>to<sp/>help<sp/>MSVC:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_valid_class_option<sp/>:</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">detail::any_of</ref>&lt;is_holder&lt;T&gt;,<sp/>is_subtype&lt;T&gt;,<sp/>is_base&lt;T&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="938" refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>=<sp/>type_;</highlight></codeline>
<codeline lineno="939" refid="classpybind11_1_1class___1a982c513c8540238a5d1c1ae2672f0654" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class___1a982c513c8540238a5d1c1ae2672f0654" kindref="member">type_alias</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" kindref="member">detail::exactly_one_t</ref>&lt;is_subtype,<sp/>void,<sp/><ref refid="classpybind11_1_1options" kindref="compound">options</ref>...&gt;;</highlight></codeline>
<codeline lineno="940" refid="classpybind11_1_1class___1ad079ff744f01f3933357f77dd6f62237" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_alias<sp/>=<sp/>!std::is_void&lt;type_alias&gt;::value;</highlight></codeline>
<codeline lineno="941" refid="classpybind11_1_1class___1ad8634e039384d1bd616b5006a3fdbc62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class___1ad8634e039384d1bd616b5006a3fdbc62" kindref="member">holder_type</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a2145d26420c674c667080404b925bd23" kindref="member">detail::exactly_one_t&lt;is_holder, std::unique_ptr&lt;type&gt;</ref>,<sp/><ref refid="classpybind11_1_1options" kindref="compound">options</ref>...&gt;;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(<ref refid="namespacepybind11_1_1detail_1a9ad770c3fa69e41ce63d2dc0ba916a9f" kindref="member">detail::all_of</ref>&lt;is_valid_class_option&lt;options&gt;...&gt;::value,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown/invalid<sp/>class_<sp/>template<sp/>parameters<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="classpybind11_1_1class___1a6d73fa21f0074fe24c266ecf4a00d82f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pytypes_8h_1ad4b7fc54168d44c54c0ca9863af90858" kindref="member">PYBIND11_OBJECT</ref>(<ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>,<sp/>generic_type,<sp/>PyType_Check)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra<sp/>&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MI<sp/>can<sp/>only<sp/>be<sp/>specified<sp/>via<sp/>class_<sp/>template<sp/>options,<sp/>not<sp/>constructor<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a41bed277fb6af2155857a186b18c428e" kindref="member">none_of</ref>&lt;is_pyobject&lt;Extra&gt;...&gt;::value<sp/>||<sp/></highlight><highlight class="comment">//<sp/>no<sp/>base<sp/>class<sp/>arguments,<sp/>or:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" kindref="member">constexpr_sum</ref>(is_pyobject&lt;Extra&gt;::value...)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>Exactly<sp/>one<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aa7619c098964b9a8602bb66d5ebc26ff" kindref="member">constexpr_sum</ref>(is_base&lt;options&gt;::value...)<sp/><sp/><sp/>==<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>template<sp/>option<sp/>bases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a41bed277fb6af2155857a186b18c428e" kindref="member">none_of</ref>&lt;std::is_same&lt;multiple_inheritance,<sp/>Extra&gt;...&gt;::value),<sp/></highlight><highlight class="comment">//<sp/>no<sp/>multiple_inheritance<sp/>attr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>multiple<sp/>inheritance<sp/>bases<sp/>must<sp/>be<sp/>specified<sp/>via<sp/>class_<sp/>template<sp/>options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_record<sp/>record;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.scope<sp/>=<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.name<sp/>=<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.type<sp/>=<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.type_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(conditional_t&lt;has_alias,<sp/>type_alias,<sp/>type&gt;);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.holder_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classpybind11_1_1class___1ad8634e039384d1bd616b5006a3fdbc62" kindref="member">holder_type</ref>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.init_holder<sp/>=<sp/>init_holder;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.dealloc<sp/>=<sp/>dealloc;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.default_holder<sp/>=<sp/>std::is_same&lt;holder_type,<sp/>std::unique_ptr&lt;type&gt;&gt;::value;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_operator_new&lt;type&gt;(&amp;record);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Register<sp/>base<sp/>classes<sp/>specified<sp/>via<sp/>template<sp/>arguments<sp/>to<sp/>class_,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a3d7c7853f6ac53a5a12c09c57dbf9ce4" kindref="member">PYBIND11_EXPAND_SIDE_EFFECTS</ref>(add_base&lt;options&gt;(record));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>optional<sp/>arguments,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">process_attributes&lt;Extra...&gt;::init</ref>(extra...,<sp/>&amp;record);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generic_type::initialize(record);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_alias)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;instances<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1abfffd504056cf67c94d35fe101b64c06" kindref="member">registered_types_cpp</ref>;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instances[std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classpybind11_1_1class___1a982c513c8540238a5d1c1ae2672f0654" kindref="member">type_alias</ref>))]<sp/>=<sp/>instances[std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref>))];</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986" refid="classpybind11_1_1class___1a2f2c4770b8a309879dc9020b83a48338" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>Base,<sp/>detail::enable_if_t&lt;is_base&lt;Base&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_base(<ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">detail::type_record</ref><sp/>&amp;rec)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec.add_base(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Base),<sp/>[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Base<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>Base,<sp/>detail::enable_if_t&lt;!is_base&lt;Base&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_base(<ref refid="structpybind11_1_1detail_1_1type__record" kindref="compound">detail::type_record</ref><sp/>&amp;)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="997" refid="classpybind11_1_1class___1a21605c83614e9e55b46b4c9782020c35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a21605c83614e9e55b46b4c9782020c35" kindref="member">def</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_,<sp/>Func&amp;&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>cf(method_adaptor&lt;type&gt;(std::forward&lt;Func&gt;(f)),<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>(name_),<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1sibling" kindref="compound">sibling</ref>(<ref refid="group__python__builtins_1ga0854324102907dc2d82ac413b6e6b66e" kindref="member">getattr</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>name_,<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>())),<sp/>extra...);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr(cf.name())<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;<sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="1005" refid="classpybind11_1_1class___1a76c9a91182068bff54ee076aea79024e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class___1a76c9a91182068bff54ee076aea79024e" kindref="member">def_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_,<sp/>Func<sp/>&amp;&amp;f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(!std::is_member_function_pointer&lt;Func&gt;::value,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;def_static(...)<sp/>called<sp/>with<sp/>a<sp/>non-static<sp/>member<sp/>function<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>cf(std::forward&lt;Func&gt;(f),<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>(name_),<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1sibling" kindref="compound">sibling</ref>(<ref refid="group__python__builtins_1ga0854324102907dc2d82ac413b6e6b66e" kindref="member">getattr</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>name_,<sp/><ref refid="border_8hpp_1ac2a0def81c56bd669d9bc6d9a247c6e3" kindref="member">none</ref>())),<sp/>extra...);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr(cf.name())<sp/>=<sp/>cf;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111" kindref="member">detail::op_id</ref><sp/>id,<sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53" kindref="member">detail::op_type</ref><sp/>ot,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1015" refid="classpybind11_1_1class___1ac62858c05101d684491877233bb4a66f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1ac62858c05101d684491877233bb4a66f" kindref="member">def</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">detail::op_&lt;id, ot, L, R&gt;</ref><sp/>&amp;op,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op.<ref refid="structpybind11_1_1detail_1_1op___1a0cb4b4b660a2ef48f47af54cbb848c82" kindref="member">execute</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1_1detail_1a60eaefc77d8e336f21b31425d79e0111" kindref="member">detail::op_id</ref><sp/>id,<sp/><ref refid="namespacepybind11_1_1detail_1aab1046200267d81fe97a73f1c99bca53" kindref="member">detail::op_type</ref><sp/>ot,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1021" refid="classpybind11_1_1class___1a0c93054f4540fecc46003104813cbf67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<sp/><ref refid="classpybind11_1_1class___1a0c93054f4540fecc46003104813cbf67" kindref="member">def_cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1op__" kindref="compound">detail::op_&lt;id, ot, L, R&gt;</ref><sp/>&amp;op,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op.<ref refid="structpybind11_1_1detail_1_1op___1a6b73c1131c972318e761528eb4c89e0c" kindref="member">execute_cast</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1027" refid="classpybind11_1_1class___1a336126828427a4ae1b3d618a0efe29bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a336126828427a4ae1b3d618a0efe29bf" kindref="member">def</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">detail::init&lt;Args...&gt;</ref><sp/>&amp;<ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">init</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">init</ref>.execute(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1033" refid="classpybind11_1_1class___1aed969b64fbb67f6b4a21fe1d0c49c97f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1aed969b64fbb67f6b4a21fe1d0c49c97f" kindref="member">def</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">detail::init_alias&lt;Args...&gt;</ref><sp/>&amp;<ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">init</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">init</ref>.execute(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>extra...);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038" refid="classpybind11_1_1class___1af745618161ae14091ebf47ff1d476477" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>&amp;<sp/><ref refid="classpybind11_1_1class___1af745618161ae14091ebf47ff1d476477" kindref="member">def_buffer</ref>(Func<sp/>&amp;&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">capture<sp/>{<sp/>Func<sp/>func;<sp/>};</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capture<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>capture<sp/>{<sp/>std::forward&lt;Func&gt;(func)<sp/>};</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>install_buffer_funcs([](PyObject<sp/>*obj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>-&gt;<sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>*<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster&lt;type&gt;</ref><sp/>caster;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!caster.<ref refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" kindref="member">load</ref>(obj,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1buffer__info" kindref="compound">buffer_info</ref>(((capture<sp/>*)<sp/>ptr)-&gt;func(caster));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>ptr);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1051" refid="classpybind11_1_1class___1a0c4d50b957d700cf0917b0236c06a9e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a0c4d50b957d700cf0917b0236c06a9e6" kindref="member">def_buffer</ref>(Return<sp/>(Class::*func)(Args...))<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_buffer([func]<sp/>(<ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>&amp;obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(obj.*func)();<sp/>});</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Return,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1056" refid="classpybind11_1_1class___1af4da949456a3cd4fe7de8bb2e3582e8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1af4da949456a3cd4fe7de8bb2e3582e8f" kindref="member">def_buffer</ref>(Return<sp/>(Class::*func)(Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_buffer([func]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>&amp;obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(obj.*func)();<sp/>});</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1061" refid="classpybind11_1_1class___1af5cabac2913a3b8d031338ad4175861d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1af5cabac2913a3b8d031338ad4175861d" kindref="member">def_readwrite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>D<sp/>C::*pm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_base_of&lt;C,<sp/>type&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;def_readwrite()<sp/>requires<sp/>a<sp/>class<sp/>member<sp/>(or<sp/>base<sp/>class<sp/>member)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>fget([pm](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>&amp;c)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.*pm;<sp/>},<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fset([pm](<ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;value)<sp/>{<sp/>c.*pm<sp/>=<sp/>value;<sp/>},<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_property(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/>fset,<sp/>return_value_policy::reference_internal,<sp/>extra...);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1070" refid="classpybind11_1_1class___1a81ec72e1ae64b1bdfe5f31ea5294aab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a81ec72e1ae64b1bdfe5f31ea5294aab0" kindref="member">def_readonly</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>C::*pm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_base_of&lt;C,<sp/>type&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;def_readonly()<sp/>requires<sp/>a<sp/>class<sp/>member<sp/>(or<sp/>base<sp/>class<sp/>member)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>fget([pm](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class___1a4187e5fbbdeee8234dc765fabee393d8" kindref="member">type</ref><sp/>&amp;c)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.*pm;<sp/>},<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_property_readonly(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/>return_value_policy::reference_internal,<sp/>extra...);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1078" refid="classpybind11_1_1class___1a5c47d826935b8f40e4e6cd955c28eec5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a5c47d826935b8f40e4e6cd955c28eec5" kindref="member">def_readwrite_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>D<sp/>*pm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>fget([pm](</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pm;<sp/>},<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fset([pm](</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;value)<sp/>{<sp/>*pm<sp/>=<sp/>value;<sp/>},<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_property_static(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/>fset,<sp/>return_value_policy::reference,<sp/>extra...);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1086" refid="classpybind11_1_1class___1a5e976b8ca6d8ae71eb072b8790123eeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a5e976b8ca6d8ae71eb072b8790123eeb" kindref="member">def_readonly_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>*pm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>fget([pm](</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pm;<sp/>},<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_property_readonly_static(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/>return_value_policy::reference,<sp/>extra...);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Getter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1094" refid="classpybind11_1_1class___1a65438f27ae473dabd5fbb697841b6142" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a65438f27ae473dabd5fbb697841b6142" kindref="member">def_property_readonly</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Getter<sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property_readonly(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(method_adaptor&lt;type&gt;(fget)),</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value_policy::reference_internal,<sp/>extra...);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1101" refid="classpybind11_1_1class___1a89850146eaa3c80814e950bd37a38729" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a89850146eaa3c80814e950bd37a38729" kindref="member">def_property_readonly</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(),<sp/>extra...);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Getter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1107" refid="classpybind11_1_1class___1a6558672f1747a7abc8393c4ff0f830fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a6558672f1747a7abc8393c4ff0f830fe" kindref="member">def_property_readonly_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Getter<sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property_readonly_static(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(fget),<sp/>return_value_policy::reference,<sp/>extra...);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1113" refid="classpybind11_1_1class___1a18d97e66e946d6e159fe50c3010cd65d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a18d97e66e946d6e159fe50c3010cd65d" kindref="member">def_property_readonly_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property_static(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(),<sp/>extra...);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Getter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Setter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1119" refid="classpybind11_1_1class___1aa76f5195d9bd8bc43fe1d3532c14ab46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1aa76f5195d9bd8bc43fe1d3532c14ab46" kindref="member">def_property</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Getter<sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Setter<sp/>&amp;fset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(method_adaptor&lt;type&gt;(fset)),<sp/>extra...);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Getter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1123" refid="classpybind11_1_1class___1a177d548ab8cca8efd9547e97801f5cce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a177d548ab8cca8efd9547e97801f5cce" kindref="member">def_property</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Getter<sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(method_adaptor&lt;type&gt;(fget)),<sp/>fset,</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value_policy::reference_internal,<sp/>extra...);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1130" refid="classpybind11_1_1class___1a412d807f6a885fd03b2c3560f75fd47a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a412d807f6a885fd03b2c3560f75fd47a" kindref="member">def_property</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property_static(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/>fset,<sp/><ref refid="structpybind11_1_1is__method" kindref="compound">is_method</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>extra...);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Getter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1136" refid="classpybind11_1_1class___1a0041c1304ecbc5bb6355d05f4908ab7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a0041c1304ecbc5bb6355d05f4908ab7e" kindref="member">def_property_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Getter<sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_property_static(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>(fget),<sp/>fset,<sp/>return_value_policy::reference,<sp/>extra...);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1142" refid="classpybind11_1_1class___1a78115d5138cebc2489419e347a8d291b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref><sp/>&amp;<ref refid="classpybind11_1_1class___1a78115d5138cebc2489419e347a8d291b" kindref="member">def_property_static</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>&amp;fset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;<sp/>...extra)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rec_fget<sp/>=<sp/>get_function_record(fget),<sp/>rec_fset<sp/>=<sp/>get_function_record(fset);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*doc_prev<sp/>=<sp/>rec_fget-&gt;doc;<sp/></highlight><highlight class="comment">/*<sp/>&apos;extra&apos;<sp/>field<sp/>may<sp/>include<sp/>a<sp/>property-specific<sp/>documentation<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">detail::process_attributes&lt;Extra...&gt;::init</ref>(extra...,<sp/>rec_fget);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec_fget-&gt;doc<sp/>&amp;&amp;<sp/>rec_fget-&gt;doc<sp/>!=<sp/>doc_prev)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(doc_prev);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec_fget-&gt;doc<sp/>=<sp/>strdup(rec_fget-&gt;doc);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec_fset)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc_prev<sp/>=<sp/>rec_fset-&gt;doc;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">detail::process_attributes&lt;Extra...&gt;::init</ref>(extra...,<sp/>rec_fset);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec_fset-&gt;doc<sp/>&amp;&amp;<sp/>rec_fset-&gt;doc<sp/>!=<sp/>doc_prev)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(doc_prev);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec_fset-&gt;doc<sp/>=<sp/>strdup(rec_fset-&gt;doc);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_property_static_impl(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>fget,<sp/>fset,<sp/>rec_fget);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_holder_helper(<ref refid="structpybind11_1_1detail_1_1instance" kindref="compound">detail::instance</ref><sp/>*inst,<sp/><ref refid="structpybind11_1_1detail_1_1value__and__holder" kindref="compound">detail::value_and_holder</ref><sp/>&amp;v_h,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_type<sp/>*<sp/></highlight><highlight class="comment">/*<sp/>unused<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::enable_shared_from_this&lt;T&gt;<sp/>*<sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sh<sp/>=<sp/>std::dynamic_pointer_cast&lt;typename<sp/>holder_type::element_type&gt;(</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>&gt;()-&gt;shared_from_this());</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sh)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a3720f1824e005bfc837853a3fb21ace2" kindref="member">holder</ref>&lt;holder_type&gt;())<sp/>holder_type(std::move(sh));</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a0f3ceb07bb2ec928b386e4b4fdf6c62d" kindref="member">set_holder_constructed</ref>();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_weak_ptr<sp/>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1abf77ff9d83a347ddf41379cd85e564f8" kindref="member">holder_constructed</ref>()<sp/>&amp;&amp;<sp/>inst-&gt;<ref refid="structpybind11_1_1detail_1_1instance_1a8a2005f2b03490c24273ac666219fe90" kindref="member">owned</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a3720f1824e005bfc837853a3fb21ace2" kindref="member">holder</ref>&lt;holder_type&gt;())<sp/>holder_type(v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1afb2e8af5d3d8b18c564c070a7262e5c0" kindref="member">value_ptr</ref>&lt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>&gt;());</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_h.<ref refid="structpybind11_1_1detail_1_1value__and__holder_1a0f3ceb07bb2ec928b386e4b4fdf6c62d" kindref="member">set_holder_constructed</ref>();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_holder_from_existing(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>detail::value_and_holder<sp/>&amp;v_h,</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_type<sp/>*holder_ptr,<sp/>std::true_type<sp/></highlight><highlight class="comment">/*is_copy_constructible*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;v_h.holder&lt;holder_type&gt;())<sp/>holder_type(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">holder_type<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(holder_ptr));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_holder_from_existing(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>detail::value_and_holder<sp/>&amp;v_h,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_type<sp/>*holder_ptr,<sp/>std::false_type<sp/></highlight><highlight class="comment">/*is_copy_constructible*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;v_h.holder&lt;holder_type&gt;())<sp/>holder_type(std::move(*</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">holder_type<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(holder_ptr)));</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_holder_helper(detail::instance<sp/>*inst,<sp/>detail::value_and_holder<sp/>&amp;v_h,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_type<sp/>*holder_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>--<sp/>not<sp/>enable_shared_from_this&lt;T&gt;)<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holder_ptr)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_holder_from_existing(v_h,<sp/>holder_ptr,<sp/>std::is_copy_constructible&lt;holder_type&gt;());</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_h.set_holder_constructed();</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst-&gt;owned<sp/>||<sp/>detail::always_construct_holder&lt;holder_type&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;v_h.holder&lt;holder_type&gt;())<sp/>holder_type(v_h.value_ptr&lt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>&gt;());</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_h.set_holder_constructed();</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_holder(detail::instance<sp/>*inst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*holder_ptr)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v_h<sp/>=<sp/>inst-&gt;get_value_and_holder(detail::get_type_info(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)));</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_holder_helper(inst,<sp/>v_h,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>holder_type<sp/>*)<sp/>holder_ptr,<sp/>v_h.value_ptr&lt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>&gt;());</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dealloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>detail::value_and_holder<sp/>&amp;v_h)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_h.holder_constructed())</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_h.holder&lt;holder_type&gt;().~holder_type();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a6e62cf4913ded37524e9fca5be2af2db" kindref="member">detail::call_operator_delete</ref>(v_h.value_ptr&lt;<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>&gt;());</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>detail::function_record<sp/>*get_function_record(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref><sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1aa3f15fd5f825d58b0d9dc754fa96af55" kindref="member">detail::get_function</ref>(h);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h<sp/>?<sp/>(detail::function_record<sp/>*)<sp/>reinterpret_borrow&lt;capsule&gt;(PyCFunction_GET_SELF(h.ptr()))</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226" refid="classpybind11_1_1enum__" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1enum__" kindref="compound">enum_</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>&lt;Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_&lt;Type&gt;::def</ref>;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_&lt;Type&gt;::def_property_readonly_static</ref>;</highlight></codeline>
<codeline lineno="1230" refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">std::underlying_type&lt;Type&gt;::type</ref>;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1233" refid="classpybind11_1_1enum___1ab9909928b1a82bbe2eeb5a8e3c933b73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1enum___1ab9909928b1a82bbe2eeb5a8e3c933b73" kindref="member">enum_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>&amp;<ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_</ref>&lt;Type&gt;(<ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>extra...),<sp/>m_entries(),<sp/>m_parent(<ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_arithmetic<sp/>=<sp/><ref refid="structpybind11_1_1detail_1_1negation" kindref="compound">detail::any_of&lt;std::is_same&lt;arithmetic, Extra&gt;</ref>...&gt;::value;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_entries_ptr<sp/>=<sp/>m_entries.inc_ref().ptr();</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,<sp/>[<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>m_entries_ptr](Type<sp/>value)<sp/>-&gt;<sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref><sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>reinterpret_borrow&lt;dict&gt;(m_entries_ptr))<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pybind11::cast&lt;Type&gt;(kv.second)<sp/>==<sp/>value)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(</highlight><highlight class="stringliteral">&quot;{}.{}&quot;</highlight><highlight class="normal">).<ref refid="classpybind11_1_1str_1a834ff688cd92945ddeb47409f145f1c6" kindref="member">format</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>kv.first);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(</highlight><highlight class="stringliteral">&quot;{}.???&quot;</highlight><highlight class="normal">).<ref refid="classpybind11_1_1str_1a834ff688cd92945ddeb47409f145f1c6" kindref="member">format</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_property_readonly_static(</highlight><highlight class="stringliteral">&quot;__members__&quot;</highlight><highlight class="normal">,<sp/>[m_entries_ptr](</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>self<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/>m;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>reinterpret_borrow&lt;dict&gt;(m_entries_ptr))</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[kv.first]<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>return_value_policy::copy);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](Type&amp;<sp/>value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>i)<sp/>{<sp/>value<sp/>=<sp/>(Type)i;<sp/>});</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__int__&quot;</highlight><highlight class="normal">,<sp/>[](Type<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value;<sp/>});</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__long__&quot;</highlight><highlight class="normal">,<sp/>[](Type<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value;<sp/>});</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/>Type<sp/>*value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value2<sp/>&amp;&amp;<sp/>value<sp/>==<sp/>*value2;<sp/>});</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__ne__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/>Type<sp/>*value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!value2<sp/>||<sp/>value<sp/>!=<sp/>*value2;<sp/>});</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_arithmetic)<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__lt__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/>Type<sp/>*value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value2<sp/>&amp;&amp;<sp/>value<sp/>&lt;<sp/>*value2;<sp/>});</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__gt__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/>Type<sp/>*value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value2<sp/>&amp;&amp;<sp/>value<sp/>&gt;<sp/>*value2;<sp/>});</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__le__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/>Type<sp/>*value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value2<sp/>&amp;&amp;<sp/>value<sp/>&lt;=<sp/>*value2;<sp/>});</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__ge__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/>Type<sp/>*value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value2<sp/>&amp;&amp;<sp/>value<sp/>&gt;=<sp/>*value2;<sp/>});</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_convertible&lt;Type,<sp/>Scalar&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>provide<sp/>comparison<sp/>with<sp/>the<sp/>underlying<sp/>type<sp/>if<sp/>the<sp/>enum<sp/>isn&apos;t<sp/>convertible,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>if<sp/>Type<sp/>is<sp/>a<sp/>scoped<sp/>enum,<sp/>mirroring<sp/>the<sp/>C++<sp/>behaviour.<sp/><sp/>(NB:<sp/>we<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>Type<sp/>to<sp/>Scalar<sp/>below<sp/>anyway<sp/>because<sp/>this<sp/>needs<sp/>to<sp/>compile).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>==<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__ne__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>!=<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_arithmetic)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__lt__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&lt;<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__gt__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&gt;<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__le__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&lt;=<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__ge__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&gt;=<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__invert__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~((<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value);<sp/>});</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__and__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&amp;<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__or__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>|<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__xor__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>^<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__rand__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&amp;<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__ror__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>|<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__rxor__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/><ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref><sp/>value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>^<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__and__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>&amp;<sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__or__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>|<sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__xor__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value<sp/>^<sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value2;<sp/>});</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__hash__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value;<sp/>});</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pickling<sp/>and<sp/>unpickling<sp/>--<sp/>needed<sp/>for<sp/>use<sp/>with<sp/>the<sp/>&apos;multiprocessing&apos;<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__getstate__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a829aea796e8a24212b310db43534c1b7" kindref="member">pybind11::make_tuple</ref>((<ref refid="classpybind11_1_1enum___1ade0fc2892f84aee0f1857919356224d0" kindref="member">Scalar</ref>)<sp/>value);<sp/>});</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;__setstate__&quot;</highlight><highlight class="normal">,<sp/>[](Type<sp/>&amp;p,<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/>t)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;p)<sp/>Type((Type)<sp/>t[0].cast&lt;Scalar&gt;());<sp/>});</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295" refid="classpybind11_1_1enum___1a2c7d70e5e0407e0160072219ead94e19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1enum__" kindref="compound">enum_</ref>&amp;<sp/><ref refid="classpybind11_1_1enum___1a2c7d70e5e0407e0160072219ead94e19" kindref="member">export_values</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>m_entries)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parent.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(kv.first)<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302" refid="classpybind11_1_1enum___1a3b8045d2c579cef39f2b4b85e0f0c311" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1enum__" kindref="compound">enum_</ref>&amp;<sp/><ref refid="classpybind11_1_1enum___1a3b8045d2c579cef39f2b4b85e0f0c311" kindref="member">value</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>Type<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">pybind11::cast</ref>(value,<sp/>return_value_policy::copy);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;attr(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_entries[<ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/>m_entries;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>m_parent;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="1315" refid="structpybind11_1_1detail_1_1init" refkind="compound"><highlight class="normal">template<sp/>&lt;typename...<sp/>Args&gt;<sp/>struct<sp/><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">init</ref><sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra,<sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t&lt;!Class::has_alias, int&gt;</ref><sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1317" refid="structpybind11_1_1detail_1_1init_1a84f1bb9f5b834abb93ce93bccf4d61b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init_1a84f1bb9f5b834abb93ce93bccf4d61b4" kindref="member">execute</ref>(Class<sp/>&amp;cl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">Class::type</ref>;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](Base<sp/>*self_,<sp/>Args...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{<sp/>new<sp/>(self_)<sp/>Base(args...);<sp/>},<sp/>extra...);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra,</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;Class::has_alias<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">Class::type</ref>,<sp/>Args...&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1326" refid="structpybind11_1_1detail_1_1init_1a84f1bb9f5b834abb93ce93bccf4d61b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init_1a84f1bb9f5b834abb93ce93bccf4d61b4" kindref="member">execute</ref>(Class<sp/>&amp;cl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">Class::type</ref>;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Alias<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class::type_alias;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>cl_type<sp/>=<sp/>cl;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[cl_type](<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>self_,<sp/>Args...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(self_.get_type().is(cl_type))</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>(self_.cast&lt;Base<sp/>*&gt;())<sp/>Base(args...);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>(self_.cast&lt;Alias<sp/>*&gt;())<sp/>Alias(args...);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>extra...);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra,</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;Class::has_alias<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">Class::type</ref>,<sp/>Args...&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1341" refid="structpybind11_1_1detail_1_1init_1a84f1bb9f5b834abb93ce93bccf4d61b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init_1a84f1bb9f5b834abb93ce93bccf4d61b4" kindref="member">execute</ref>(Class<sp/>&amp;cl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">init_alias&lt;Args...&gt;::execute</ref>(cl,<sp/>extra...);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1345" refid="structpybind11_1_1detail_1_1init__alias" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">init_alias</ref><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a492fb1fcf079a5bc67248b852bc73619" kindref="member">enable_if_t</ref>&lt;Class::has_alias<sp/>&amp;&amp;<sp/>std::is_constructible&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class::type_alias,<sp/>Args...&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1348" refid="structpybind11_1_1detail_1_1init__alias_1a53d0b6dc698e49db33a54b194a16c5a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init__alias_1a53d0b6dc698e49db33a54b194a16c5a6" kindref="member">execute</ref>(Class<sp/>&amp;cl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extra&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Alias<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class::type_alias;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](Alias<sp/>*self_,<sp/>Args...<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{<sp/>new<sp/>(self_)<sp/>Alias(args...);<sp/>},<sp/>extra...);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355" refid="namespacepybind11_1_1detail_1a3ad1aba5f911230062de8c796afa9d47" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>nurse,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>patient)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nurse<sp/>||<sp/>!patient)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>activate<sp/>keep_alive!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(patient.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>()<sp/>||<sp/>nurse.<ref refid="classpybind11_1_1detail_1_1object__api_1a1e0426c7b1cc45d3b56574aaaa38ff06" kindref="member">is_none</ref>())</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>keep<sp/>alive<sp/>or<sp/>nothing<sp/>to<sp/>be<sp/>kept<sp/>alive<sp/>by<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a369ebb69a9a6490d8814cd466acee5a4" kindref="member">all_type_info</ref>(Py_TYPE(nurse.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>()));</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tinfo.empty())<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>a<sp/>pybind-registered<sp/>type,<sp/>so<sp/>we<sp/>can<sp/>store<sp/>the<sp/>patient<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>internal<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1af62c3b270c006fce8eb96756ca0c3979" kindref="member">add_patient</ref>(nurse.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/>patient.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fall<sp/>back<sp/>to<sp/>clever<sp/>approach<sp/>based<sp/>on<sp/>weak<sp/>references<sp/>taken<sp/>from</highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Boost.Python.<sp/>This<sp/>is<sp/>not<sp/>used<sp/>for<sp/>pybind-registered<sp/>types<sp/>because</highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>objects<sp/>can<sp/>be<sp/>destroyed<sp/>out-of-order<sp/>in<sp/>a<sp/>GC<sp/>pass.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref><sp/>disable_lifesupport(</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[patient](<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref>)<sp/>{<sp/>patient.<ref refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" kindref="member">dec_ref</ref>();<sp/><ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref>.<ref refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" kindref="member">dec_ref</ref>();<sp/>});</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref><sp/>wr(nurse,<sp/>disable_lifesupport);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patient.<ref refid="classpybind11_1_1handle_1acc6d5c07da91466b4ebe6e5f8f7a1b58" kindref="member">inc_ref</ref>();<sp/></highlight><highlight class="comment">/*<sp/>reference<sp/>patient<sp/>and<sp/>leak<sp/>the<sp/>weak<sp/>reference<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>wr.release();</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382" refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Nurse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref>,<sp/><ref refid="structpybind11_1_1detail_1_1function__call" kindref="compound">function_call</ref><sp/>&amp;<ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>,<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a8e7d2e49b6d4398f7dc11593e42a8b9c" kindref="member">keep_alive_impl</ref>(</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nurse<sp/><sp/><sp/>==<sp/>0<sp/>?<sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref><sp/>:<sp/>Nurse<sp/><sp/><sp/>&lt;=<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.size()<sp/>?<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>[Nurse<sp/><sp/><sp/>-<sp/>1]<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>(),</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref><sp/>==<sp/>0<sp/>?<sp/><ref refid="namespacepybind11_1_1detail_1a41b003f0f244f4f7d572d2008c9bbea2" kindref="member">ret</ref><sp/>:<sp/><ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref><sp/>&lt;=<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>.size()<sp/>?<sp/><ref refid="namespacepybind11_1_1detail_1ad8c72601e9b3b2dadd0a5cf35b5a9fd8" kindref="member">call</ref>.<ref refid="structpybind11_1_1detail_1_1function__call_1a862bd6e3b0ff8c37108c18c515a8a620" kindref="member">args</ref>[<ref refid="namespacepybind11_1_1detail_1aea77a49f75ac89645a479ae8562c6565" kindref="member">Patient</ref><sp/>-<sp/>1]<sp/>:<sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref>()</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389" refid="namespacepybind11_1_1detail_1a7920862bbd224b2e0a9a2b02325b4b39" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;decltype(internals::registered_types_py)::<ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref>,<sp/>bool&gt;<sp/><ref refid="namespacepybind11_1_1detail_1a7920862bbd224b2e0a9a2b02325b4b39" kindref="member">all_type_info_get_cache</ref>(PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" kindref="member">registered_types_py</ref></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>z__cpp_lib_unordered_map_try_emplace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.try_emplace(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.emplace(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/>std::vector&lt;detail::type_info<sp/>*&gt;());</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res.second)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>cache<sp/>entry<sp/>created;<sp/>set<sp/>up<sp/>a<sp/>weak<sp/>reference<sp/>to<sp/>automatically<sp/>remove<sp/>it<sp/>if<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gets<sp/>destroyed:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1weakref" kindref="compound">weakref</ref>((PyObject<sp/>*)<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/><ref refid="classpybind11_1_1cpp__function" kindref="compound">cpp_function</ref>([<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>](<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/>wr)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1aca38286f978b7e059690321da744ea2f" kindref="member">registered_types_py</ref>.erase(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wr.<ref refid="classpybind11_1_1handle_1aa5bf7731654070d8a6834183a3c63132" kindref="member">dec_ref</ref>();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})).<ref refid="classpybind11_1_1object_1a6db3ef1f8b39f2038ecf578a7f07b59d" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>KeyIterator,<sp/>return_value_policy<sp/>Policy&gt;</highlight></codeline>
<codeline lineno="1409" refid="structpybind11_1_1detail_1_1iterator__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpybind11_1_1detail_1_1iterator__state" kindref="compound">iterator_state</ref><sp/>{</highlight></codeline>
<codeline lineno="1410" refid="structpybind11_1_1detail_1_1iterator__state_1a22d435b9ee2f542d4d1f90a4826e9251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator<sp/><ref refid="structpybind11_1_1detail_1_1iterator__state_1a22d435b9ee2f542d4d1f90a4826e9251" kindref="member">it</ref>;</highlight></codeline>
<codeline lineno="1411" refid="structpybind11_1_1detail_1_1iterator__state_1a5fea651c9ff015da69d92509b1d38fff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Sentinel<sp/><ref refid="structpybind11_1_1detail_1_1iterator__state_1a5fea651c9ff015da69d92509b1d38fff" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="1412" refid="structpybind11_1_1detail_1_1iterator__state_1a9e8817288b2bf3ea5b5aee50f327c3ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1iterator__state_1a9e8817288b2bf3ea5b5aee50f327c3ff" kindref="member">first_or_done</ref>;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417" refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" refkind="member"><highlight class="normal">template<sp/>&lt;typename...<sp/>Args&gt;<sp/>detail::<ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">init</ref>&lt;Args...&gt;<sp/><ref refid="namespacepybind11_1a67231190432080a41b98fd771c5d3dff" kindref="member">init</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init" kindref="compound">detail::init</ref>&lt;Args...&gt;();<sp/>}</highlight></codeline>
<codeline lineno="1418" refid="namespacepybind11_1a92d1d3fd106f97b8e8fbc0047c8b924f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">detail::init_alias</ref>&lt;Args...&gt;<sp/><ref refid="namespacepybind11_1a92d1d3fd106f97b8e8fbc0047c8b924f" kindref="member">init_alias</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1init__alias" kindref="compound">detail::init_alias</ref>&lt;Args...&gt;();<sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>Policy<sp/>=<sp/>return_value_policy::reference_internal,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel,</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType<sp/>=<sp/>decltype(*std::declval&lt;Iterator&gt;()),</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1426" refid="namespacepybind11_1ac97330a2a87d0653768770751b057c5e" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="namespacepybind11_1abc7e251f8927c3f839ec9beff8662a4c" kindref="member">make_iterator</ref>(Iterator<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref>,<sp/>Sentinel<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a70df48d572a9cc1f241cca6d69511b9d" kindref="member">last</ref>,<sp/>Extra<sp/>&amp;&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1iterator__state" kindref="compound">detail::iterator_state&lt;Iterator, Sentinel, false, Policy&gt;</ref><sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detail::get_type_info(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_&lt;state&gt;</ref>(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;iterator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classpybind11_1_1class___1a21605c83614e9e55b46b4c9782020c35" kindref="member">def</ref>(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref><sp/>&amp;s)<sp/>-&gt;<sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>})</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__next__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref><sp/>&amp;s)<sp/>-&gt;<sp/>ValueType<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.first_or_done)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s.it;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.first_or_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aba9190881a8a5a0953038a88e295e897" kindref="member">if</ref><sp/>(s.it<sp/>==<sp/>s.end)<sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.first_or_done<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>stop_iteration();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s.it;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>std::forward&lt;Extra&gt;(extra)...,<sp/>Policy);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>(<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>{<ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a70df48d572a9cc1f241cca6d69511b9d" kindref="member">last</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>Policy<sp/>=<sp/>return_value_policy::reference_internal,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KeyType<sp/>=<sp/>decltype((*std::declval&lt;Iterator&gt;()).<ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref>),</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;</highlight></codeline>
<codeline lineno="1455" refid="namespacepybind11_1a9720b33862b4fbd9345c2bf2a0e407f7" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="namespacepybind11_1a451a8f82d09d763f5400dead333116ee" kindref="member">make_key_iterator</ref>(Iterator<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref>,<sp/>Sentinel<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a70df48d572a9cc1f241cca6d69511b9d" kindref="member">last</ref>,<sp/>Extra<sp/>&amp;&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1iterator__state" kindref="compound">detail::iterator_state&lt;Iterator, Sentinel, true, Policy&gt;</ref><sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detail::get_type_info(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1class__" kindref="compound">class_&lt;state&gt;</ref>(<ref refid="namespacepybind11_1_1detail_1a17e0d33d04a53088f7ac2dceaa935872" kindref="member">handle</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;iterator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classpybind11_1_1class___1a21605c83614e9e55b46b4c9782020c35" kindref="member">def</ref>(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref><sp/>&amp;s)<sp/>-&gt;<sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>})</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__next__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref><sp/>&amp;s)<sp/>-&gt;<sp/>KeyType<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.first_or_done)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s.it;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.first_or_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1aba9190881a8a5a0953038a88e295e897" kindref="member">if</ref><sp/>(s.it<sp/>==<sp/>s.end)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.first_or_done<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>stop_iteration();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(*s.it).first;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>std::forward&lt;Extra&gt;(extra)...,<sp/>Policy);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>(<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>{<ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a1f68bd51a7b0912215a5025dbb67de70" kindref="member">first</ref>,<sp/><ref refid="namespacepybind11_1_1detail_1_1constexpr__impl_1a70df48d572a9cc1f241cca6d69511b9d" kindref="member">last</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>Policy<sp/>=<sp/>return_value_policy::reference_internal,</highlight></codeline>
<codeline lineno="1480" refid="namespacepybind11_1abc7e251f8927c3f839ec9beff8662a4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;<sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="namespacepybind11_1abc7e251f8927c3f839ec9beff8662a4c" kindref="member">make_iterator</ref>(Type<sp/>&amp;value,<sp/>Extra&amp;&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_iterator&lt;Policy&gt;(std::begin(value),<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">std::end</ref>(value),<sp/>extra...);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>Policy<sp/>=<sp/>return_value_policy::reference_internal,</highlight></codeline>
<codeline lineno="1487" refid="namespacepybind11_1a451a8f82d09d763f5400dead333116ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Extra&gt;<sp/><ref refid="classpybind11_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="namespacepybind11_1a451a8f82d09d763f5400dead333116ee" kindref="member">make_key_iterator</ref>(Type<sp/>&amp;value,<sp/>Extra&amp;&amp;...<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_key_iterator&lt;Policy&gt;(std::begin(value),<sp/><ref refid="border_8hpp_1afb358f48b1646c750fb9da6c6585be2b" kindref="member">std::end</ref>(value),<sp/>extra...);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491" refid="namespacepybind11_1aa3d4074b855542774c3fbdd75697d48c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputType&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1aa3d4074b855542774c3fbdd75697d48c" kindref="member">implicitly_convertible</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>implicit_caster<sp/>=<sp/>[](PyObject<sp/>*obj,<sp/>PyTypeObject<sp/>*<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>)<sp/>-&gt;<sp/>PyObject<sp/>*<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classpybind11_1_1detail_1_1type__caster" kindref="compound">detail::make_caster&lt;InputType&gt;</ref>().<ref refid="classpybind11_1_1detail_1_1type__caster__generic_1ab7b1b60b55293ee21be336e3daac4227" kindref="member">load</ref>(obj,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/><ref refid="namespacepybind11_1_1detail_1a95ea58cc74d18a818e49f20c57891329" kindref="member">args</ref>(1);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>[0]<sp/>=<sp/>obj;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyObject_Call((PyObject<sp/>*)<sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>,<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>.<ref refid="classpybind11_1_1handle_1a6f7e2e6beecb8c59c5192ea9bae7eaa5" kindref="member">ptr</ref>(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo<sp/>=<sp/>detail::get_type_info(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(OutputType)))</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tinfo-&gt;implicit_conversions.push_back(implicit_caster);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;implicitly_convertible:<sp/>Unable<sp/>to<sp/>find<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>type_id&lt;OutputType&gt;());</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExceptionTranslator&gt;</highlight></codeline>
<codeline lineno="1510" refid="namespacepybind11_1a4353c0dbefd359b04ebef9e47a0eb359" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a4353c0dbefd359b04ebef9e47a0eb359" kindref="member">register_exception_translator</ref>(ExceptionTranslator&amp;&amp;<sp/>translator)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1a3d4d8868728159a959ad949e276df796" kindref="member">registered_exception_translators</ref>.push_front(</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;ExceptionTranslator&gt;(translator));</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;</highlight></codeline>
<codeline lineno="1523" refid="classpybind11_1_1exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1exception" kindref="compound">exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1object" kindref="compound">object</ref><sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1525" refid="classpybind11_1_1exception_1a9e3722a8dca895cb698eecb1c9b46f40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1exception_1a9e3722a8dca895cb698eecb1c9b46f40" kindref="member">exception</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/>PyObject<sp/>*<ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/>PyExc_Exception)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>full_name<sp/>=<sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>.attr(</highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">).cast&lt;std::string&gt;()<sp/>+</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="namespacesetup_1ab3a7a0638d76a01367c5bc3cc699447f" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ptr<sp/>=<sp/>PyErr_NewException(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(full_name.c_str()),<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__python__builtins_1ga87cc23c83cdeaec183f0a0e4122d9997" kindref="member">hasattr</ref>(<ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>))</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;Error<sp/>during<sp/>initialization:<sp/>multiple<sp/>incompatible<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;definitions<sp/>with<sp/>name<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>.attr(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>current<sp/>python<sp/>exception<sp/>to<sp/>this<sp/>exception<sp/>object<sp/>with<sp/>the<sp/>given<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536" refid="classpybind11_1_1exception_1a0d9f9ec79865d44e170788de1839e6df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1exception_1a0d9f9ec79865d44e170788de1839e6df" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(m_ptr,<sp/>message);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CppException&gt;</highlight></codeline>
<codeline lineno="1548" refid="namespacepybind11_1aa580e4fbed60a69cda35ea099a04e1d1" refkind="member"><highlight class="normal"><ref refid="classpybind11_1_1exception" kindref="compound">exception&lt;CppException&gt;</ref><sp/>&amp;<ref refid="namespacepybind11_1aa580e4fbed60a69cda35ea099a04e1d1" kindref="member">register_exception</ref>(<ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>,</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="structpybind11_1_1base" kindref="compound">base</ref><sp/>=<sp/>PyExc_Exception)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1exception" kindref="compound">exception&lt;CppException&gt;</ref><sp/>ex(<ref refid="structpybind11_1_1scope" kindref="compound">scope</ref>,<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/><ref refid="structpybind11_1_1base" kindref="compound">base</ref>);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a4353c0dbefd359b04ebef9e47a0eb359" kindref="member">register_exception_translator</ref>([](std::exception_ptr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rethrow_exception(p);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppException<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ex(e.what());</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ex;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><ref refid="common_8h_1a577cd817cb71b655998cad4387cdaeba" kindref="member">NAMESPACE_BEGIN</ref>(detail)</highlight></codeline>
<codeline lineno="1564" refid="namespacepybind11_1_1detail_1a3c1d40520bceafb159eda9e05dd49a48" refkind="member"><highlight class="normal"><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/><ref refid="internal_8h_1a00d24c7231be28dbaf71f5408f30e44c" kindref="member">inline</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a913a30079a57934b1bfda83ba4080da4" kindref="member">print</ref>(<ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref><sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>,<sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strings<sp/>=<sp/><ref refid="classpybind11_1_1tuple" kindref="compound">tuple</ref>(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>.size());</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classpybind11_1_1args" kindref="compound">args</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strings[i]<sp/>=<sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>[i]);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569" refid="namespacepybind11_1_1detail_1ac78423c569a1c1a857367af9748e1d39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1ac78423c569a1c1a857367af9748e1d39" kindref="member">sep</ref><sp/>=<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1dict_1aed24c6a2b7fb47ec8a20fc9e19f63dd1" kindref="member">contains</ref>(</highlight><highlight class="stringliteral">&quot;sep&quot;</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>[</highlight><highlight class="stringliteral">&quot;sep&quot;</highlight><highlight class="normal">]<sp/>:<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570" refid="namespacepybind11_1_1detail_1a7bd3cf79f3ad1f0c79b9839e6834fca7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a7bd3cf79f3ad1f0c79b9839e6834fca7" kindref="member">line</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1ac78423c569a1c1a857367af9748e1d39" kindref="member">sep</ref>.attr(</highlight><highlight class="stringliteral">&quot;join&quot;</highlight><highlight class="normal">)(strings);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572" refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="1573" refid="namespacepybind11_1_1detail_1afece612f9e6ae07e4061cb56608b5498" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1dict_1aed24c6a2b7fb47ec8a20fc9e19f63dd1" kindref="member">contains</ref>(</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" kindref="member">file</ref><sp/>=<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>[</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">].<ref refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" kindref="member">cast</ref>&lt;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="1575" refid="namespacepybind11_1_1detail_1a5f8719feb140b42b4b7a31770a7f0f84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" kindref="member">file</ref><sp/>=<sp/>module::import(</highlight><highlight class="stringliteral">&quot;sys&quot;</highlight><highlight class="normal">).<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>error_already_set<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>print()<sp/>is<sp/>called<sp/>from<sp/>code<sp/>that<sp/>is<sp/>executed<sp/>as</highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>of<sp/>garbage<sp/>collection<sp/>during<sp/>interpreter<sp/>shutdown,</highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>importing<sp/>&apos;sys&apos;<sp/>can<sp/>fail.<sp/>Give<sp/>up<sp/>rather<sp/>than<sp/>crashing<sp/>the</highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpreter<sp/>in<sp/>this<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1_1detail_1acb9cd08d61a7fef71e33c5b31844a259" kindref="member">write</ref><sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" kindref="member">file</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1588" refid="namespacepybind11_1_1detail_1af9b806016c247eaa721c7150fecdd5de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1acb9cd08d61a7fef71e33c5b31844a259" kindref="member">write</ref>(<ref refid="namespacepybind11_1_1detail_1a7bd3cf79f3ad1f0c79b9839e6834fca7" kindref="member">line</ref>);</highlight></codeline>
<codeline lineno="1589" refid="namespacepybind11_1_1detail_1acb9cd08d61a7fef71e33c5b31844a259" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1acb9cd08d61a7fef71e33c5b31844a259" kindref="member">write</ref>(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1dict_1aed24c6a2b7fb47ec8a20fc9e19f63dd1" kindref="member">contains</ref>(</highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>[</highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">]<sp/>:<sp/><ref refid="namespacepybind11_1ade1f8946c805279f41d7f6eed0d4f07d" kindref="member">cast</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591" refid="namespacepybind11_1_1detail_1aba9190881a8a5a0953038a88e295e897" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>.<ref refid="classpybind11_1_1dict_1aed24c6a2b7fb47ec8a20fc9e19f63dd1" kindref="member">contains</ref>(</highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="classpybind11_1_1kwargs" kindref="compound">kwargs</ref>[</highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">].<ref refid="classpybind11_1_1object_1aece18ff0957cbd093908369dd7800519" kindref="member">cast</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;())</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1_1detail_1a53f5260a0266d107b3414aff054fd4f5" kindref="member">file</ref>.<ref refid="classpybind11_1_1detail_1_1object__api_1a1515b5309996f3109e3e73ea6c1ab8df" kindref="member">attr</ref>(</highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">)();</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(detail)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacepybind11_1a5f83e7a05cee9068927633ac47dbe69c" kindref="member">return_value_policy</ref><sp/>policy<sp/>=<sp/>return_value_policy::automatic_reference,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1597" refid="namespacepybind11_1a913a30079a57934b1bfda83ba4080da4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a913a30079a57934b1bfda83ba4080da4" kindref="member">print</ref>(Args<sp/>&amp;&amp;...<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>detail::collect_arguments&lt;policy&gt;(std::forward&lt;Args&gt;(<ref refid="classpybind11_1_1args" kindref="compound">args</ref>)...);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepybind11_1a913a30079a57934b1bfda83ba4080da4" kindref="member">detail::print</ref>(c.args(),<sp/>c.kwargs());</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WITH_THREAD)<sp/>&amp;&amp;<sp/>!defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>functions<sp/>below<sp/>essentially<sp/>reproduce<sp/>the<sp/>PyGILState_*<sp/>API<sp/>using<sp/>a<sp/>RAII</highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/>*<sp/>pattern,<sp/>but<sp/>there<sp/>are<sp/>a<sp/>few<sp/>important<sp/>differences:</highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/>*<sp/>1.<sp/>When<sp/>acquiring<sp/>the<sp/>GIL<sp/>from<sp/>an<sp/>non-main<sp/>thread<sp/>during<sp/>the<sp/>finalization</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>phase,<sp/>the<sp/>GILState<sp/>API<sp/>blindly<sp/>terminates<sp/>the<sp/>calling<sp/>thread,<sp/>which</highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is<sp/>often<sp/>not<sp/>what<sp/>is<sp/>wanted.<sp/>This<sp/>API<sp/>does<sp/>not<sp/>do<sp/>this.</highlight></codeline>
<codeline lineno="1610"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1611"><highlight class="comment"><sp/>*<sp/>2.<sp/>The<sp/>gil_scoped_release<sp/>function<sp/>can<sp/>optionally<sp/>cut<sp/>the<sp/>relationship</highlight></codeline>
<codeline lineno="1612"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>of<sp/>a<sp/>PyThreadState<sp/>and<sp/>its<sp/>associated<sp/>thread,<sp/>which<sp/>allows<sp/>moving<sp/>it<sp/>to</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>another<sp/>thread<sp/>(this<sp/>is<sp/>a<sp/>fairly<sp/>rare/advanced<sp/>use<sp/>case).</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/>*<sp/>3.<sp/>The<sp/>reference<sp/>count<sp/>of<sp/>an<sp/>acquired<sp/>thread<sp/>state<sp/>can<sp/>be<sp/>controlled.<sp/>This</highlight></codeline>
<codeline lineno="1616"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>can<sp/>be<sp/>handy<sp/>to<sp/>prevent<sp/>cases<sp/>where<sp/>callbacks<sp/>issued<sp/>from<sp/>an<sp/>external</highlight></codeline>
<codeline lineno="1617"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>thread<sp/>would<sp/>otherwise<sp/>constantly<sp/>construct<sp/>and<sp/>destroy<sp/>thread<sp/>state<sp/>data</highlight></codeline>
<codeline lineno="1618"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>structures.</highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>Python<sp/>bindings<sp/>of<sp/>NanoGUI<sp/>(http://github.com/wjakob/nanogui)<sp/>for<sp/>an</highlight></codeline>
<codeline lineno="1621"><highlight class="comment"><sp/>*<sp/>example<sp/>which<sp/>uses<sp/>features<sp/>2<sp/>and<sp/>3<sp/>to<sp/>migrate<sp/>the<sp/>Python<sp/>thread<sp/>of</highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/>*<sp/>execution<sp/>to<sp/>another<sp/>thread<sp/>(to<sp/>run<sp/>the<sp/>event<sp/>loop<sp/>on<sp/>the<sp/>original<sp/>thread,</highlight></codeline>
<codeline lineno="1623"><highlight class="comment"><sp/>*<sp/>in<sp/>this<sp/>case).</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">gil_scoped_acquire<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/>gil_scoped_acquire()<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;internals<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>();</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate<sp/>=<sp/>(PyThreadState<sp/>*)<sp/>PyThread_get_key_value(internals.tstate);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tstate)<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate<sp/>=<sp/>PyThreadState_New(internals.istate);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tstate)</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;scoped_acquire:<sp/>could<sp/>not<sp/>create<sp/>thread<sp/>state!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;gilstate_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_delete_key_value(internals.tstate);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_set_key_value(internals.tstate,<sp/>tstate);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a258682afd9a02ea6c742f2032d923ee8" kindref="member">detail::get_thread_state_unchecked</ref>()<sp/>!=<sp/>tstate;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(release)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>around<sp/>an<sp/>annoying<sp/>assertion<sp/>in<sp/>PyThreadState_Swap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(Py_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyInterpreterState<sp/>*interp<sp/>=<sp/>tstate-&gt;interp;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;interp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyEval_AcquireThread(tstate);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(Py_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;interp<sp/>=<sp/>interp;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_ref();</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc_ref()<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++tstate-&gt;gilstate_counter;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dec_ref()<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--tstate-&gt;gilstate_counter;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepybind11_1_1detail_1a258682afd9a02ea6c742f2032d923ee8" kindref="member">detail::get_thread_state_unchecked</ref>()<sp/>!=<sp/>tstate)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;scoped_acquire::dec_ref():<sp/>thread<sp/>state<sp/>must<sp/>be<sp/>current!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstate-&gt;gilstate_counter<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;scoped_acquire::dec_ref():<sp/>reference<sp/>count<sp/>underflow!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstate-&gt;gilstate_counter<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!release)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11_fail(</highlight><highlight class="stringliteral">&quot;scoped_acquire::dec_ref():<sp/>internal<sp/>error!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState_Clear(tstate);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState_DeleteCurrent();</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_delete_key_value(<ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>().tstate);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1fb186b7494d5c576d902c0730ecbb71" kindref="member">PYBIND11_NOINLINE</ref><sp/>~gil_scoped_acquire()<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dec_ref();</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(release)</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyEval_SaveThread();</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>release<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">gil_scoped_release<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>gil_scoped_release(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disassoc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/>disassoc(disassoc)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`get_internals()`<sp/>must<sp/>be<sp/>called<sp/>here<sp/>unconditionally<sp/>in<sp/>order<sp/>to<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`internals.tstate`<sp/>for<sp/>subsequent<sp/>`gil_scoped_acquire`<sp/>calls.<sp/>Otherwise,<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialization<sp/>race<sp/>could<sp/>occur<sp/>as<sp/>multiple<sp/>threads<sp/>try<sp/>`gil_scoped_acquire`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;internals<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate<sp/>=<sp/>PyEval_SaveThread();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disassoc)<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>internals.tstate;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_delete_key_value(key);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_set_key_value(key,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>~gil_scoped_release()<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tstate)</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyEval_RestoreThread(tstate);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disassoc)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>().tstate;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_delete_key_value(key);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThread_set_key_value(key,<sp/>tstate);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disassoc;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">gil_scoped_acquire<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>gil_scoped_acquire()<sp/>{<sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref><sp/>=<sp/>PyGILState_Ensure();<sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>~gil_scoped_acquire()<sp/>{<sp/>PyGILState_Release(<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">gil_scoped_release<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState<sp/>*<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>gil_scoped_release()<sp/>{<sp/><ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref><sp/>=<sp/>PyEval_SaveThread();<sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>~gil_scoped_release()<sp/>{<sp/>PyEval_RestoreThread(<ref refid="string__to__double_8cpp_1af63a1df0d582366f7a03c46143e3ae0e" kindref="member">state</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744" refid="classpybind11_1_1gil__scoped__acquire" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1gil__scoped__acquire" kindref="compound">gil_scoped_acquire</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1745" refid="classpybind11_1_1gil__scoped__release" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpybind11_1_1gil__scoped__release" kindref="compound">gil_scoped_release</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748" refid="classpybind11_1_1error__already__set_1a19afee786daecf8c8b260e94d53e0888" refkind="member"><highlight class="normal">error_already_set::~error_already_set()<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1gil__scoped__acquire" kindref="compound">gil_scoped_acquire</ref><sp/>gil;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755" refid="namespacepybind11_1a2bd4a52df3fbac712407b5cad8449865" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a2bd4a52df3fbac712407b5cad8449865" kindref="member">get_type_overload</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*this_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpybind11_1_1detail_1_1type__info" kindref="compound">detail::type_info</ref><sp/>*this_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>detail::get_object_handle(this_ptr,<sp/>this_type);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1handle" kindref="compound">handle</ref><sp/><ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.get_type();</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>std::make_pair(<ref refid="namespacepybind11_1_1detail_1a2e27b6b0496dbceae6708f0526822bba" kindref="member">type</ref>.ptr(),<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cache<sp/>functions<sp/>that<sp/>aren&apos;t<sp/>overloaded<sp/>in<sp/>Python<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>many<sp/>costly<sp/>Python<sp/>dictionary<sp/>lookups<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cache<sp/>=<sp/><ref refid="namespacepybind11_1_1detail_1a32ba309d834c9384f019760a21d1213c" kindref="member">detail::get_internals</ref>().<ref refid="structpybind11_1_1detail_1_1internals_1afa24a87f87aee7bd7666fa31dac5e529" kindref="member">inactive_overload_cache</ref>;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache.find(key)<sp/>!=<sp/>cache.end())</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>overload<sp/>=<sp/><ref refid="group__python__builtins_1ga0854324102907dc2d82ac413b6e6b66e" kindref="member">getattr</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overload.is_cpp_function())<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache.insert(key);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>call<sp/>dispatch<sp/>code<sp/>if<sp/>invoked<sp/>from<sp/>overridden<sp/>function.</highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unfortunately<sp/>this<sp/>doesn&apos;t<sp/>work<sp/>on<sp/>PyPy.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(PYPY_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>PyFrameObject<sp/>*frame<sp/>=<sp/>PyThreadState_Get()-&gt;frame;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>&amp;&amp;<sp/>(std::string)<sp/><ref refid="classpybind11_1_1str" kindref="compound">str</ref>(frame-&gt;f_code-&gt;co_name)<sp/>==<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;f_code-&gt;co_argcount<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyFrame_FastToLocals(frame);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*self_caller<sp/>=<sp/>PyDict_GetItem(</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;f_locals,<sp/>PyTuple_GET_ITEM(frame-&gt;f_code-&gt;co_varnames,<sp/>0));</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self_caller<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr())</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PyPy<sp/>currently<sp/>doesn&apos;t<sp/>provide<sp/>a<sp/>detailed<sp/>cpyext<sp/>emulation<sp/>of</highlight></codeline>
<codeline lineno="1788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>objects,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>emulate<sp/>this<sp/>using<sp/>Python.<sp/>This</highlight></codeline>
<codeline lineno="1789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>going<sp/>to<sp/>be<sp/>slow..*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpybind11_1_1dict" kindref="compound">dict</ref><sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>;<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>[</highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="classpybind11_1_1str" kindref="compound">pybind11::str</ref>(<ref refid="structpybind11_1_1name" kindref="compound">name</ref>);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>PyRun_String(</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;import<sp/>inspect\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;frame<sp/>=<sp/>inspect.currentframe()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;if<sp/>frame<sp/>is<sp/>not<sp/>None:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frame.f_back\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>if<sp/>frame<sp/>is<sp/>not<sp/>None<sp/>and<sp/>str(frame.f_code.co_name)<sp/>==<sp/>name<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;frame.f_code.co_argcount<sp/>&gt;<sp/>0:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self_caller<sp/>=<sp/>frame.f_locals[frame.f_code.co_varnames[0]]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self_caller<sp/>==<sp/>self:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self<sp/>=<sp/>None\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_file_input,<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>.ptr(),<sp/><ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>.ptr());</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpybind11_1_1error__already__set" kindref="compound">error_already_set</ref>();</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemkdoc_1a85ae95dfe8536ee978dcacf1f5dcfe00" kindref="member">d</ref>[</highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">].is_none())</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(result);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overload;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812" refid="namespacepybind11_1a1bf1986e4cc6b7770ee71b3ce88a1a7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/><ref refid="namespacepybind11_1a1bf1986e4cc6b7770ee71b3ce88a1a7c" kindref="member">get_overload</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*this_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tinfo<sp/>=<sp/>detail::get_type_info(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tinfo<sp/>?<sp/><ref refid="namespacepybind11_1a2bd4a52df3fbac712407b5cad8449865" kindref="member">get_type_overload</ref>(this_ptr,<sp/>tinfo,<sp/><ref refid="structpybind11_1_1name" kindref="compound">name</ref>)<sp/>:<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817" refid="pybind11_8h_1ad225e789a43a99757532d624f794b377" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OVERLOAD_INT(ret_type,<sp/>cname,<sp/>name,<sp/>...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11::gil_scoped_acquire<sp/>gil;<sp/>\</highlight></codeline>
<codeline lineno="1819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pybind11::function<sp/>overload<sp/>=<sp/>pybind11::get_overload(static_cast&lt;const<sp/>cname<sp/>*&gt;(this),<sp/>name);<sp/>\</highlight></codeline>
<codeline lineno="1820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(overload)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>o<sp/>=<sp/>overload(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="1822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pybind11::detail::cast_is_temporary_value_reference&lt;ret_type&gt;::value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>pybind11::detail::overload_caster_t&lt;ret_type&gt;<sp/>caster;<sp/>\</highlight></codeline>
<codeline lineno="1824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pybind11::detail::cast_ref&lt;ret_type&gt;(std::move(o),<sp/>caster);<sp/>\</highlight></codeline>
<codeline lineno="1825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>return<sp/>pybind11::detail::cast_safe&lt;ret_type&gt;(std::move(o));<sp/>\</highlight></codeline>
<codeline lineno="1827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830" refid="pybind11_8h_1a6a5ebc119f4e7ca7ccb05d9d1f64d547" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OVERLOAD_NAME(ret_type,<sp/>cname,<sp/>name,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OVERLOAD_INT(ret_type,<sp/>cname,<sp/>name,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="1832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>cname::fn(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834" refid="pybind11_8h_1a52b952e976930f2149eec9d0eb450100" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OVERLOAD_PURE_NAME(ret_type,<sp/>cname,<sp/>name,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OVERLOAD_INT(ret_type,<sp/>cname,<sp/>name,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="1836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>pybind11::pybind11_fail(&quot;Tried<sp/>to<sp/>call<sp/>pure<sp/>virtual<sp/>function<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>#cname<sp/>&quot;::&quot;<sp/>name<sp/>&quot;\&quot;&quot;);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838" refid="pybind11_8h_1a554e6c4e025a0a1a1d8b30998144e386" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OVERLOAD(ret_type,<sp/>cname,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OVERLOAD_NAME(ret_type,<sp/>cname,<sp/>#fn,<sp/>fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841" refid="pybind11_8h_1acf72084f40e31c334fd2d2b0161e959b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYBIND11_OVERLOAD_PURE(ret_type,<sp/>cname,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PYBIND11_OVERLOAD_PURE_NAME(ret_type,<sp/>cname,<sp/>#fn,<sp/>fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><ref refid="common_8h_1a12bb24ea980ca8fb1f46b1992bc9c83a" kindref="member">NAMESPACE_END</ref>(<ref refid="namespacepybind11" kindref="compound">pybind11</ref>)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Leave<sp/>ignored<sp/>warnings<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/third-party/pybind11/include/pybind11/pybind11.h"/>
  </compounddef>
</doxygen>
