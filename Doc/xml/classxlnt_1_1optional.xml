<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="classxlnt_1_1optional" kind="class" language="C++" prot="public">
    <compoundname>xlnt::optional</compoundname>
    <includes refid="optional_8hpp" local="no">optional.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classxlnt_1_1optional_1a98f9c71d1d1076c619a65f78dbf65904" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_nothrow_copy_constructible&lt; T &gt;{}, std::true_type, std::false_type &gt;::type</type>
        <definition>using xlnt::optional&lt; T &gt;::ctor_copy_T_noexcept =  typename std::conditional&lt;std::is_nothrow_copy_constructible&lt;T&gt;{}, std::true_type, std::false_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>ctor_copy_T_noexcept</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="45" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxlnt_1_1optional_1a6d8e0a55aefd0d6a47486aa6dd3a3d3e" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_nothrow_move_constructible&lt; T &gt;{}, std::true_type, std::false_type &gt;::type</type>
        <definition>using xlnt::optional&lt; T &gt;::ctor_move_T_noexcept =  typename std::conditional&lt;std::is_nothrow_move_constructible&lt;T&gt;{}, std::true_type, std::false_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>ctor_move_T_noexcept</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="46" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxlnt_1_1optional_1a38ea525229352b6a41beac42c8b0f8a8" prot="private" static="no">
        <type>ctor_copy_T_noexcept</type>
        <definition>using xlnt::optional&lt; T &gt;::copy_ctor_noexcept =  ctor_copy_T_noexcept</definition>
        <argsstring></argsstring>
        <name>copy_ctor_noexcept</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="47" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxlnt_1_1optional_1a0092475a830b3b548a629ba6e58977c0" prot="private" static="no">
        <type>ctor_move_T_noexcept</type>
        <definition>using xlnt::optional&lt; T &gt;::move_ctor_noexcept =  ctor_move_T_noexcept</definition>
        <argsstring></argsstring>
        <name>move_ctor_noexcept</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="48" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxlnt_1_1optional_1a9bb6d5fd8412f845149a0f78d576abf1" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_nothrow_copy_constructible&lt; T &gt;{} &amp;&amp;std::is_nothrow_assignable&lt; T, T &gt;{}, std::true_type, std::false_type &gt;::type</type>
        <definition>using xlnt::optional&lt; T &gt;::set_copy_noexcept_t =  typename std::conditional&lt;std::is_nothrow_copy_constructible&lt;T&gt;{} &amp;&amp; std::is_nothrow_assignable&lt;T, T&gt;{}, std::true_type, std::false_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>set_copy_noexcept_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="49" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxlnt_1_1optional_1a26cea5caae69d62638d53a0033f206c2" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_nothrow_move_constructible&lt; T &gt;{} &amp;&amp;std::is_nothrow_move_assignable&lt; T &gt;{}, std::true_type, std::false_type &gt;::type</type>
        <definition>using xlnt::optional&lt; T &gt;::set_move_noexcept_t =  typename std::conditional&lt;std::is_nothrow_move_constructible&lt;T&gt;{} &amp;&amp; std::is_nothrow_move_assignable&lt;T&gt;{}, std::true_type, std::false_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>set_move_noexcept_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="50" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classxlnt_1_1optional_1aa93ee56860ce026a794f00914770c816" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_nothrow_destructible&lt; T &gt;{}, std::true_type, std::false_type &gt;::type</type>
        <definition>using xlnt::optional&lt; T &gt;::clear_noexcept_t =  typename std::conditional&lt;std::is_nothrow_destructible&lt;T&gt;{}, std::true_type, std::false_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>clear_noexcept_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="51" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classxlnt_1_1optional_1a38c88c8ca2a100883a3a839c0c0f95e0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool xlnt::optional&lt; T &gt;::has_value_</definition>
        <argsstring></argsstring>
        <name>has_value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="328" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classxlnt_1_1optional_1ae0003052765087d8af69d78a8932e0f3" prot="private" static="no" mutable="no">
        <type>std::aligned_storage&lt; sizeof(T), alignof(T)&gt;::type</type>
        <definition>std::aligned_storage&lt;sizeof(T), alignof(T)&gt;::type xlnt::optional&lt; T &gt;::storage_</definition>
        <argsstring></argsstring>
        <name>storage_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="329" column="42" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classxlnt_1_1optional_1abdc73c6fb50f1cc74b2e5b5237b1fadf" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_floating_point&lt; U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool xlnt::optional&lt; T &gt;::compare_equal</definition>
        <argsstring>(const U &amp;lhs, const U &amp;rhs) const</argsstring>
        <name>compare_equal</name>
        <param>
          <type>const U &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Default equality operation, just uses operator== </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="57" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1abdc73c6fb50f1cc74b2e5b5237b1fadf" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_floating_point&lt; U &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool xlnt::optional&lt; T &gt;::compare_equal</definition>
        <argsstring>(const U &amp;lhs, const U &amp;rhs) const</argsstring>
        <name>compare_equal</name>
        <param>
          <type>const U &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>equality operation for floating point numbers. Provides &quot;fuzzy&quot; equality </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="66" column="20" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1aca72dd5291e7f275c6f4fd80883bb857" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; xlnt::optional&lt; T &gt;::value_ref</definition>
        <argsstring>() noexcept</argsstring>
        <name>value_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="318" column="7" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a01a28b9fb5457e0ea62d8037ab67e98a" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; xlnt::optional&lt; T &gt;::value_ref</definition>
        <argsstring>() const noexcept</argsstring>
        <name>value_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="323" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="323" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classxlnt_1_1optional_1acedf3f5e541d8676733466d22437ac07" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>xlnt::optional&lt; T &gt;::optional</definition>
        <argsstring>() noexcept</argsstring>
        <name>optional</name>
        <briefdescription>
<para>Default contructor. <ref refid="classxlnt_1_1optional_1a699e2f6ac064c6e9ed2df057333ef272" kindref="member">is_set()</ref> will be false initially. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="75" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a3b733cb9a80e61723168aba04b0df4a5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>xlnt::optional&lt; T &gt;::optional</definition>
        <argsstring>(const T &amp;value) noexcept((ctor_copy_T_noexcept{}))</argsstring>
        <name>optional</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs this optional with a value. noexcept if T copy ctor is noexcept </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="84" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a686ea7c72179a8aac0b134df152e621c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>xlnt::optional&lt; T &gt;::optional</definition>
        <argsstring>(T &amp;&amp;value) noexcept((ctor_move_T_noexcept{}))</argsstring>
        <name>optional</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs this optional with a value. noexcept if T move ctor is noexcept </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="94" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1abdc8f7464a97caa59bd2663da2d4b3da" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>xlnt::optional&lt; T &gt;::optional</definition>
        <argsstring>(const optional &amp;other) noexcept((copy_ctor_noexcept{}))</argsstring>
        <name>optional</name>
        <param>
          <type>const <ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructs this optional from other noexcept if T copy ctor is noexcept </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="104" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a4b0cbe767e5efc623510902a596b2816" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>xlnt::optional&lt; T &gt;::optional</definition>
        <argsstring>(optional &amp;&amp;other) noexcept((move_ctor_noexcept{}))</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructs this optional from other. Clears the value from other if set noexcept if T move ctor is noexcept </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="117" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a1e30fddfaa6b1d0447046e3f17a7a50c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; xlnt::optional&lt; T &gt;::operator=</definition>
        <argsstring>(const optional &amp;other) noexcept((set_copy_noexcept_t{} &amp;&amp;clear_noexcept_t{}))</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment of this optional from other noexcept if set and clear are noexcept for T&amp; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="131" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="131" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a85d99eabc3dd3c09f2316325bd6ebd04" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; xlnt::optional&lt; T &gt;::operator=</definition>
        <argsstring>(optional &amp;&amp;other) noexcept((set_move_noexcept_t{} &amp;&amp;clear_noexcept_t{}))</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment of this optional from other noexcept if set and clear are noexcept for T&amp;&amp; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="148" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="148" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a6ac5ec8058d63db4ce1847961fd867ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>xlnt::optional&lt; T &gt;::~optional</definition>
        <argsstring>() noexcept</argsstring>
        <name>~optional</name>
        <briefdescription>
<para>Destructor cleans up the T instance if set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="165" column="5" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a699e2f6ac064c6e9ed2df057333ef272" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::optional&lt; T &gt;::is_set</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_set</name>
        <briefdescription>
<para>Returns true if this object currently has a value set. This should be called before accessing the value with <ref refid="classxlnt_1_1optional_1a9b7ab8dc40108f1887274ac61261c605" kindref="member">optional::get()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="174" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a8d190925f6b3894fd6cc486bda88e87d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::optional&lt; T &gt;::set</definition>
        <argsstring>(const T &amp;value) noexcept((set_copy_noexcept_t{}))</argsstring>
        <name>set</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Copies the value into the stored value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="182" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="182" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a72865b1e79e34a4a32a0a56c33ec7d80" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::optional&lt; T &gt;::set</definition>
        <argsstring>(T &amp;&amp;value) noexcept((set_move_noexcept_t{}))</argsstring>
        <name>set</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Moves the value into the stored value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="205" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="205" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a55e567569aa86a180fb6f5432a3302e1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; xlnt::optional&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;rhs) noexcept((set_copy_noexcept_t{}))</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator overload. Equivalent to setting the value using <ref refid="classxlnt_1_1optional_1a8d190925f6b3894fd6cc486bda88e87d" kindref="member">optional::set</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="232" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="232" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1adebeba31df56da139e8b1df102800a38" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classxlnt_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; xlnt::optional&lt; T &gt;::operator=</definition>
        <argsstring>(T &amp;&amp;rhs) noexcept((set_move_noexcept_t{}))</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator overload. Equivalent to setting the value using <ref refid="classxlnt_1_1optional_1a8d190925f6b3894fd6cc486bda88e87d" kindref="member">optional::set</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="241" column="14" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1afd687ed27b0bbf542aee8e342a62be8b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void xlnt::optional&lt; T &gt;::clear</definition>
        <argsstring>() noexcept((clear_noexcept_t{}))</argsstring>
        <name>clear</name>
        <briefdescription>
<para>After this is called, <ref refid="classxlnt_1_1optional_1a699e2f6ac064c6e9ed2df057333ef272" kindref="member">is_set()</ref> will return false until a new value is provided. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="250" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="250" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a9b7ab8dc40108f1887274ac61261c605" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; xlnt::optional&lt; T &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Gets the value. If no value has been initialized in this object, an <ref refid="classxlnt_1_1invalid__attribute" kindref="compound">xlnt::invalid_attribute</ref> exception will be thrown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="263" column="7" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="263" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a2cbf835dc08d686335f21b6dda82b641" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; xlnt::optional&lt; T &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Gets the value. If no value has been initialized in this object, an <ref refid="classxlnt_1_1invalid__attribute" kindref="compound">xlnt::invalid_attribute</ref> exception will be thrown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="277" column="13" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="277" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1a7a8c849efef832c32fbbaeec35f96ef5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::optional&lt; T &gt;::operator==</definition>
        <argsstring>(const optional&lt; T &gt; &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns true if neither this nor other have a value or both have a value and those values are equal according to their equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="292" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="292" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classxlnt_1_1optional_1ac1927d03f1240a2975eec55e36602b68" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool xlnt::optional&lt; T &gt;::operator!=</definition>
        <argsstring>(const optional&lt; T &gt; &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classxlnt_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns false if neither this nor other have a value or both have a value and those values are equal according to their equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="311" column="10" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="311" bodyend="314"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Many settings in xlnt are allowed to not have a value set. This class encapsulates a value which may or may not be set. Memory is allocated within the optional class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" line="39" column="1" bodyfile="C:/Users/nouet/Documents/Cours/5A/Dev PRD/PrdCoprod/PrdCoprod/libs/xlnt-1.5.0/include/xlnt/utils/optional.hpp" bodystart="40" bodyend="330"/>
    <listofallmembers>
      <member refid="classxlnt_1_1optional_1afd687ed27b0bbf542aee8e342a62be8b" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>clear</name></member>
      <member refid="classxlnt_1_1optional_1aa93ee56860ce026a794f00914770c816" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>clear_noexcept_t</name></member>
      <member refid="classxlnt_1_1optional_1abdc73c6fb50f1cc74b2e5b5237b1fadf" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>compare_equal</name></member>
      <member refid="classxlnt_1_1optional_1abdc73c6fb50f1cc74b2e5b5237b1fadf" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>compare_equal</name></member>
      <member refid="classxlnt_1_1optional_1a38ea525229352b6a41beac42c8b0f8a8" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>copy_ctor_noexcept</name></member>
      <member refid="classxlnt_1_1optional_1a98f9c71d1d1076c619a65f78dbf65904" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>ctor_copy_T_noexcept</name></member>
      <member refid="classxlnt_1_1optional_1a6d8e0a55aefd0d6a47486aa6dd3a3d3e" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>ctor_move_T_noexcept</name></member>
      <member refid="classxlnt_1_1optional_1a9b7ab8dc40108f1887274ac61261c605" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>get</name></member>
      <member refid="classxlnt_1_1optional_1a2cbf835dc08d686335f21b6dda82b641" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>get</name></member>
      <member refid="classxlnt_1_1optional_1a38c88c8ca2a100883a3a839c0c0f95e0" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>has_value_</name></member>
      <member refid="classxlnt_1_1optional_1a699e2f6ac064c6e9ed2df057333ef272" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>is_set</name></member>
      <member refid="classxlnt_1_1optional_1a0092475a830b3b548a629ba6e58977c0" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>move_ctor_noexcept</name></member>
      <member refid="classxlnt_1_1optional_1ac1927d03f1240a2975eec55e36602b68" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>operator!=</name></member>
      <member refid="classxlnt_1_1optional_1a1e30fddfaa6b1d0447046e3f17a7a50c" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>operator=</name></member>
      <member refid="classxlnt_1_1optional_1a85d99eabc3dd3c09f2316325bd6ebd04" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>operator=</name></member>
      <member refid="classxlnt_1_1optional_1a55e567569aa86a180fb6f5432a3302e1" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>operator=</name></member>
      <member refid="classxlnt_1_1optional_1adebeba31df56da139e8b1df102800a38" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>operator=</name></member>
      <member refid="classxlnt_1_1optional_1a7a8c849efef832c32fbbaeec35f96ef5" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>operator==</name></member>
      <member refid="classxlnt_1_1optional_1acedf3f5e541d8676733466d22437ac07" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>optional</name></member>
      <member refid="classxlnt_1_1optional_1a3b733cb9a80e61723168aba04b0df4a5" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>optional</name></member>
      <member refid="classxlnt_1_1optional_1a686ea7c72179a8aac0b134df152e621c" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>optional</name></member>
      <member refid="classxlnt_1_1optional_1abdc8f7464a97caa59bd2663da2d4b3da" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>optional</name></member>
      <member refid="classxlnt_1_1optional_1a4b0cbe767e5efc623510902a596b2816" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>optional</name></member>
      <member refid="classxlnt_1_1optional_1a8d190925f6b3894fd6cc486bda88e87d" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>set</name></member>
      <member refid="classxlnt_1_1optional_1a72865b1e79e34a4a32a0a56c33ec7d80" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>set</name></member>
      <member refid="classxlnt_1_1optional_1a9bb6d5fd8412f845149a0f78d576abf1" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>set_copy_noexcept_t</name></member>
      <member refid="classxlnt_1_1optional_1a26cea5caae69d62638d53a0033f206c2" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>set_move_noexcept_t</name></member>
      <member refid="classxlnt_1_1optional_1ae0003052765087d8af69d78a8932e0f3" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>storage_</name></member>
      <member refid="classxlnt_1_1optional_1aca72dd5291e7f275c6f4fd80883bb857" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>value_ref</name></member>
      <member refid="classxlnt_1_1optional_1a01a28b9fb5457e0ea62d8037ab67e98a" prot="private" virt="non-virtual"><scope>xlnt::optional</scope><name>value_ref</name></member>
      <member refid="classxlnt_1_1optional_1a6ac5ec8058d63db4ce1847961fd867ac" prot="public" virt="non-virtual"><scope>xlnt::optional</scope><name>~optional</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
